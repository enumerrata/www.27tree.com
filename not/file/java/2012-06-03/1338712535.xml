<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>Java技巧:获得IP地址</title>
<content>&amp;lt;p&amp;gt;
	如何用Java获得一个域名的IP地址呢？提供这个功能的类叫做java.net.InetAddress。我们假设现在有这样一个域名，它用一个静态的getByName来重新获得一个InetAddress，然后得到可以读出的IP地址。下面的代码是非常基本的命令行。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"Java\"&amp;gt;import&amp;nbsp;java.net.InetAddress;
　　import&amp;nbsp;java.net.UnknownHostException;
　　public&amp;nbsp;class&amp;nbsp;NsLookup&amp;nbsp;{
　　&amp;nbsp;static&amp;nbsp;public&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{
　　&amp;nbsp;try&amp;nbsp;{
　　InetAddress&amp;nbsp;address&amp;nbsp;=&amp;nbsp;InetAddress.getByName(args[0]);
　　System.out.println(args[0]+
　　:&amp;nbsp;+address.getHostAddress());
　　&amp;nbsp;}
　　&amp;nbsp;catch(UnknownHostException&amp;nbsp;uhe)&amp;nbsp;{
　　System.err.println(Unable&amp;nbsp;to&amp;nbsp;find:&amp;nbsp;+args[0]);
　　&amp;nbsp;}
　　&amp;nbsp;}
　　}&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	InetAddress也可以通过使用getAddress()来获得IP地址，但是它的返回值是一个4个字节的数组。因此尽管getAddress()在获得IP方面是有用的，但却不适于用来输出。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	上面的命令的输出结果看起来就是这样：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	bash$&amp;nbsp;java&amp;nbsp;code.NsLookup&amp;nbsp;www.sun.com
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.sun.com:&amp;nbsp;192.18.97.241
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
有时一个域名会包含不止一个IP地址，比如微软的Web服务器，这是为了保持负载平衡。InetAddress提供了一种可以得到一个域名的所有IP地址的方法。让我们来考虑以下代码：
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"Java\"&amp;gt;import&amp;nbsp;java.net.InetAddress;
　　import&amp;nbsp;java.net.UnknownHostException;
　　public&amp;nbsp;class&amp;nbsp;NsLookup&amp;nbsp;{
　　&amp;nbsp;static&amp;nbsp;public&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{
&amp;nbsp;　　try&amp;nbsp;{
&amp;nbsp;　　String&amp;nbsp;name&amp;nbsp;=&amp;nbsp;args[0];
　　InetAddress[]&amp;nbsp;addresses&amp;nbsp;=&amp;nbsp;InetAddress.getAllByName(name);
　　&amp;nbsp;for(int&amp;nbsp;i=0;&amp;nbsp;i&amp;amp;lt;addresses.length;&amp;nbsp;i++)&amp;nbsp;{
　　System.out.println(name+[+i+]
　　:&amp;nbsp;+address.getHostAddress());
　　&amp;nbsp;}
　　&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch(UnknownHostException&amp;nbsp;uhe)&amp;nbsp;{
　　&amp;nbsp;System.err.println(Unable&amp;nbsp;to&amp;nbsp;find:&amp;nbsp;+args[0]);
　　&amp;nbsp;}
　　&amp;nbsp;}
　　}&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	对于www.sun.com，将会输出：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	bash$&amp;nbsp;java&amp;nbsp;code.NsLookup&amp;nbsp;www.sun.com
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.sun.com[0]:&amp;nbsp;192.18.97.241
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	然而，对于www.microsoft.com，将会输出：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	bash$&amp;nbsp;javad&amp;nbsp;code/NsLookup.java
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[0]:&amp;nbsp;207.46.230.218
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[1]:&amp;nbsp;207.46.197.101
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[2]:&amp;nbsp;207.46.230.229
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[3]:&amp;nbsp;207.46.197.113
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[4]:&amp;nbsp;207.46.230.219
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[5]:&amp;nbsp;207.46.230.220
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	www.microsoft.com[6]:&amp;nbsp;207.46.197.102
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	由于InetAddress，localhost必须要特别处理。如果字符串“localhost”直接进入NsLookup程序的原始版本，就会得到以下相当无用的结果：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	bash$&amp;nbsp;java&amp;nbsp;code.NsLookup&amp;nbsp;www.sun.com
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	localhost:&amp;nbsp;127.0.0.1
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我们可以手动寻找本地地址：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"Java\"&amp;gt;try&amp;nbsp;{
　　&amp;nbsp;InetAddress&amp;nbsp;localhost&amp;nbsp;=&amp;nbsp;InetAddress.getLocalHost();
　　&amp;nbsp;System.out.println
　　(localhost:&amp;nbsp;+localhost.getHostAddress());
　　&amp;nbsp;System.out.println
　　(localhost:&amp;nbsp;+localhost.getHostName());
　　&amp;nbsp;}&amp;nbsp;catch(UnknownHostException&amp;nbsp;uhe)&amp;nbsp;{
　　&amp;nbsp;System.err.println
　　(Localhost&amp;nbsp;not&amp;nbsp;seeable.&amp;nbsp;Something&amp;nbsp;is&amp;nbsp;odd.&amp;nbsp;);
　　&amp;nbsp;}&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	这里是一个输出的例子：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	localhost:&amp;nbsp;192.168.13.15
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	localhost:&amp;nbsp;crab
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本地主机的域名并没有返回完整的该机器的域名，这是因为它取决于该机器的设置。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	最后，InetAddress可能会被用来将IP地址转变为这些地址的域名，这对于分析Web日志是很有用的。InetAddress使得开发者们可以轻松的和域名、IP地址打交道，并且使他们可以不必和DNS服务器进行交互。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;</content>
<json-link>./file/java/2012-06-03/1338712535.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
