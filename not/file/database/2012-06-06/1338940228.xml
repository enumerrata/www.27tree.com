<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>三种东西永远不要放到数据库里</title>
<content>&amp;lt;p&amp;gt;
	1、&amp;nbsp;&amp;nbsp;&amp;nbsp;图片，文件，二进制数据
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	既然数据库支持BLOB类型的数据，把文件塞进BLOB字段里一定没有错了!?错，不是这样的!别的先不提，在很多数据库语言里，处理大字段都不是很容易。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	把文件存放在数据库里有很多问题：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	对数据库的读/写的速度永远都赶不上文件系统处理的速度
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	数据库备份变的巨大，越来越耗时间
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	对文件的访问需要穿越你的应用层和数据库层
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这后两个是真正的杀手。把图片缩略图存到数据库里?很好，那你就不能使用nginx或其它类型的轻量级服务器来处理它们了。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	给自己行个方便吧，在数据库里只简单的存放一个磁盘上你的文件的相对路径，或者使用S3或CDN之类的服务。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2、　短生命期数据
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	使用情况统计数据，测量数据，GPS定位数据，session数据，任何只是短时间内对你有用，或经常变化的数据。如果你发现自己正在使用定时任务从某个表里删除有效期只有一小时，一天或数周的数据，那说明你没有找对正确的做事情的方法。使用redis，&amp;nbsp;statsd/graphite，&amp;nbsp;Riak，它们都是干这种事情更合适的工具。这建议也适用于对于收集那些短生命期的数据。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	当然，用挖土机在后花园里种土豆也是可行的，但相比起从储物间里拿出一把铲子，你预约一台挖土机、等它赶到你的园子里挖坑，这显然更慢。你要选择合适的工具来处理手头上的事。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3、　日志文件
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	把日志数据存放到数据库里，表面上看起来似乎不错，而且“将来也许我需要对这些数据进行复杂的查询”，这样的话很得人心。这样做并不是一个特别差的做法，但如果你把日志数据和你的产品数据存放到一个数据库里就非常不好了。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	也许你的日志记录做的很保守，每次web请求只产生一条日志。对于整个网站的每个事件来说，这仍然会产生大量的数据库插入操作，争夺你用户需要的数据库资源。如果你的日志级别设置为verbose或debug，那等着看你的数据库着火吧。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	你应该使用一些比如Splunk&amp;nbsp;Loggly或纯文本文件来存放你的日志数据。这样去查看它们也许会不方便，但这样的时候不多，甚至有时候你需要写出一些代码来分析出你想要的答案，但总的来说是值得的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	可是稍等一下，你是那片不一样的雪花，你遇到的问题会如此的不同，所以，如果你把上面提到的三种东西中的某一种放到了数据库里也不会有问题。不，你错了，不，你不特殊。相信我。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	原文地址：外刊IT评论
&amp;lt;/p&amp;gt;</content>
<json-link>./file/database/2012-06-06/1338940228.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
