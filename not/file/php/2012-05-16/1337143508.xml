<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>简述MVC思想与PHP如何实现MVC</title>
<content>&amp;lt;p&amp;gt;
	我相信已经有很多这样的文章了，但是我今天还是愿意把自己的经验与大家分享一下。纯属原创，我也没什么保留，希望对新手有帮助，有说的不对的地方，也欢迎指出。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	什么是MVC？
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	简单的说就是将网站源码分类、分层。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	MVC三个字母的含义：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	M：Model&amp;nbsp;模型，负责数据库操作。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	V：View&amp;nbsp;视图，负责调用Model调取数据，再调用模板，展示出最终效果。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	C：Controller&amp;nbsp;控制器，程序的入口，决定改调用哪个View，并告诉View该做什么。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	如此说来，程序的执行顺序是C-V-M&amp;nbsp;或&amp;nbsp;C-M&amp;nbsp;，和MVC的名字正好相反。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	为什么要MVC？
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.能使网站程序物理结构更合理。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	当用PHP建设一个网站的时候，最笨的方法，你可能把每个页面建成一个PHP文件。如果你的网站只有
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	index.php，menu.php.article.php
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	三个页面，那你可以不用MVC，但我们做一般的网站的时候，动辄几十个页面，把所有页面放在根目录显然不是我们所能接受的，于是你需要一个合理的思想去将
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	你的代码分类，按功能把他们分成不同的目录，且由程序智能的载入调用，这就是MVC要帮助你做的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.使代码更容易维护。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我们再来看单个页面，最笨的方法，就是PHP代码与HTML代码混合，这显然不够好，你在维护网站的时候不得不区分哪里是PHP，哪里是HTML，
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这对于一个程序员来说，简直只灾难。于是很多人就使用Smarty，这样就可以将“数据处理”与“页面展示”分开来，这样做的确不错，也有很多人正在这么
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	做，但这还不是MVC，MVC要做的就是将“数据处理”再分为“逻辑处理”与“数据库操作”，这就是所说的分层。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这样当你的程序错误或想要修改的时候，就变得很轻松了，当页面显示错误的时候，你就去检查V或模板文件；当逻辑有问题的时候，你就去检查C和V；当你数据库操作错误就去检查M。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	其实MVC一般要把PHP的一个页面分割为4个页面，分别是C，V，M，模板。各司其职，方便管理。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.有利于代码复用。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	MVC会把一般会把一个大的功能放在一个目录下，也就是由一个C去管理。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如要做一个含有会员系统的网站，我们就可以把会员相关的代码都放到user目录里，由User_Controller统一管理，当我们另一个网站也需要会员系统的时候，我们就可以直接把这个目录复制过去，修改一下接口就可以了。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	PHP实现MVC的思路
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我们需要三个基类：Controller、View、Model&amp;nbsp;，然后不同的C、V、M分别继承他们就有对应的属性与方法了，如果这里你不理解，可以去看看面向对象的书。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我给大家提供一种MVC基类的设计思路，仅供参考：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;Controller类的设计
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个main（）方法，供程序调用，主要是通过get和post变量决定该如何处理。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个getModel（$model）方法，在需要调用数据库的时候，调用对应目录的M。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个display（$view）方法，在main（）方法中调用，载入对应的V，并掉应V的main（）方法；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.View类的设计与Controller很相似
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个main（）方法，当C载入V的时候调用这个方法，使程序能继续执行下去。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个getModel（$model）方法，在需要调用数据库的时候，调用对应目录的M。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个display（$template），调用对应的模板文件，并把数据传递给模板。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.Model类的设计
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	可以定义一些属性，例如要操作那些表，操作那些字段等。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个getDB（）方法，获得一个数据库类的实例，（数据库类一般都是用单件模式设计的）
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个load（）方法，载入一个数据。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个add（）方法，可以根据定义好的属性自动构造SQL语句，并执行插入操作。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个eidt（）方法，同上，但执行修改操作。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个del（）方法，同上，但执行删除操作。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	为了能使新手更好的理解我这个思路的工作原理，我们现在模拟一个用户登录的场景，看看MVC是如何工作的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	现在假设，所有的数据都提交给index.php，
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第一步：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我们提交各get变量，告诉index.php该用哪个C，例如可以这样index.php？controller=user
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	然后index接收到get变量，什么也不需要做，直接找到/user/controller.php，把所有数据丢给他，本来GET和POST就是全局的，所以index.php也不需要做什么，直接调用C的main函数就可以了，到此index.php的任务完成。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第二步：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	C的main函数开始执行，检查变量，发现用户要执行的登录操作（很简单，你post个变量do=login就可以了），于是调用
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	getModel，载入对应的M类（例如/user/models/model.php），并实例化，
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	调用实例的load方法，载入该用户的数据资料，判断是否与用户提交的密码一致，如果提交的数据不正确header跳转到出错页面，如果正确，调用
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	display（）方法，载入对应的V（例如/user/views/details.php），并实例化，调用其main（）函数，进入第三步。到此C
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	的任务已完成，第二不操作均在main函数中进行。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第三步：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	你可以选择调用getModel（）载入M，重写调取数据，也可以在C实例化V的时候，把参数传过来（例如SESSION），当V已经确定得到数据以后，display（），载入模板，MVC执行完毕。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	当然，由于字数与精力限制，这里写的只是非常简要的概括，实际实施的时候要考虑很多细节，但我设计MVC的时候，大概思路就是这样，也用到了实际中，感觉良好。
&amp;lt;/p&amp;gt;</content>
<json-link>./file/php/2012-05-16/1337143508.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
