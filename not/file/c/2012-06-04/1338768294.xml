<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>学好VC++的十大良好习惯</title>
<content>&amp;lt;p&amp;gt;
	一、充分利用MSDN，因为我个人觉得它胜过任何一本编程参考书
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	MSDN是　Microsoft　当前提供的有关编程信息的最全面的资源，它包含微软最新的技术数据库，加上易学易用的全文检索功能，让您迅速找到任何您需要的技术参考数据，让您随时拥有与全世界菁英同步的技术，掌握最丰富的程序开发资源。我经常收到很多朋友的EMAILS，他们所提的问题往往都非常的简单，MSDN完全可以解答这些问题，但他们好象不太喜欢用，这是让我郁闷的地方，是因为英文不好呢，还是没有学会充分利用各种资源来解决问题的方法呢？
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二、提高英文水平，养成多上英文网站多看英文资料多买老外原版英文书
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	有关程序员与英文水平的讨论已太多太多，我个人认为要成为程序员，高中的英语水平够了，甚至不懂英语的一些人，也同样可以成为较好的程序员，因为开发工具的发展将是越来越傻瓜，但如果你是仅仅满足于能运用某种工具开发某个软件模块，那是没话说了。真正热衷技术肯干钻研乐于接受挑战的程序员是不满足于现状的，他们总感觉有太多的未知，于是总在不停地学习，如今信息技术发展得太快，而大部分的技术最先出现的时候都是英文版本的，要几个月或者几年以后才有中文版本的书出来，因此要想跟上步伐，一定要努力提高自己的英文水平，这样才能同步跟上信息技术。&amp;nbsp;　　你可能担心自己的英语水平不行，没关系，刚开始多查字典，“万事开头难”，必须有持之以恒的精神，不久你就会发现计算机英语其实很容易的。何况很多英文技术站点确实比国内做得好啊！比如http：//www.codeguru.com，http：//www.codeproject.com，http：//www.programmersheaven.com　等等。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	三、加强自我管理，善于作自我总结，分析自已的优点及缺点&amp;nbsp;　　中国境内百分之八十以上的领导人在百分之八十以上的场合的讲话中都有类似的观点，所以在这里我是不多说了，反正这一条用在什么行业什么地方都不会有错的，人生最大的敌人不是就是自已吗？管好自已认清自已，那还有什么搞不定的？
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	四、养成良好的文档习惯&amp;nbsp;　　程序员大多都不喜欢写文档，我以前也是特讨厌，在我的思想里，所谓的文档就是一些废话，一句话硬是用十句话来代替的无聊透顶，就如同部分中文系男生的爱情表白，明明就是“我爱你”三个字，他硬是把月亮啊太阳啊大海啊高山啊石头啊天使啊乱七八糟的都拉上关系了，尽管听起来浪漫，但在我认为不实用，：），甚至太肉麻了，一个男子汉干嘛这么罗里罗嗦的。。。。。。良好的文档是正规研发流程中非常重要的环节，一个好的程序是先写好设计文档再进行编程的，在设计文档的指导下，才能写出安全的代码。如果你不写文档，一开始就写程序，这样你就不会按已设计好的路线走，而是想到哪写到哪。小功能还好说，要是大功能，就容易混乱甚至失控。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	那么如何写文档呢？其实我认为没有统一的标准，虽然国家及一些NB的人总结了很多的模板，但每个人的习惯不同，如果你不加以修改或创新，就套用某个标准，我相信写起来会很吃力及说不清的难受，因此我觉得只要能将你的设计思想及实现算法或步骤描述清楚就是好的文档，我强烈建议广大程序员朋友们在写文档时要善于用图表来说明你的思想，我们不是作家，也可能作文都经常性地不及格，写出五官端正的文章对我们来说可能不容易啊！好好地利用VISIO，ROSE或别的工具来表达你的思想吧！
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	五、代码风格要规范，严谨，效率要高　　这个不用说了，所以一定要记住了！不过，这一点有时可能与人的性格有关，如果你是经常丢三落四经常胡子长长经常钮扣扣错经常吃个快餐要一个小时的人，那你在CODING的时候可千万要注意了，CODING是CODING，生活是生活，不要写出的程序也是那样就不好了！
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	六、掌握好跟踪调试技巧&amp;nbsp;　　跟踪调试程序是一件繁琐而又复杂的事情，所以掌握必要的调试策略及技巧却可以使这些工作变得轻松起来。强烈建议你去看一下老美Everett&amp;nbsp;N。McKay及Mike&amp;nbsp;Wooding写的书＜＜Debugging&amp;nbsp;Windows&amp;nbsp;Programs＞＞，你一不定受益匪浅。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	七、养成自我测试的习惯&amp;nbsp;　　测试工作应由测试工程师来做，但在你写完一个模块或一个软件时，还是要自已先测试一下，保证不要出现一些低级的错误，何况这些错误让测试工程师看到了，狂扁你一顿，你很没FACES的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	八、善于交流善于沟通，特别是经常与一些高手交流一下学习的心得体会&amp;nbsp;　　有人说，程序员的性格大多内向不喜欢说话，其实是有些误会了，不是不喜欢而是话不投机，我的脑袋一天到晚都在不停地转，函数，数据，算法啊充满了我的世界，我那还有时间与你谈一些无聊的话题，话要找对人了，才容易谈下去，书上说过“听君一席话，胜读十年书”，你要找的就是这种豁然开朗！现在技术的论坛越来越来，这将成为程序员交流一个重要的地方，也有人说：“读君一长贴，胜读十年书”　：）
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	九、阶段性地做一下专题总结&amp;nbsp;　　知识要温故而知新，因此我建议程序员要养成阶段性地做专题总结的习惯，比如你这个月学习或在做与多线程有关的模块或项目，那么在你做完后，你就可以好好地总结一下所有与多线程相关的技术，包括理论知识，实践方法以及各种技巧及优秀文章等等，这对你各种能力的提高将有很大的帮助，你试过了吗，如果没有，那就快点行动吧！
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	十、要有持之以恒的精神&amp;nbsp;　　这是废话，因为我揍不齐十大，所以将它也算上，中国自古以来喜欢号召大众学习某种精神，比如马克思的，列宁的，毛泽东的，邓小平的，雷峰的等，这些精神使社会更安定人民生活更美好，那么程序员要有什么样的精神呢？我不是我说了就算了的，我只是想说明要学好任何一门技术，最好要有持之以恒精益求精的精神，特别是学一些比较抽象比较难的技术，比如VC＋＋，我想它应比别的开发语言都要难学些，或许你已经开始了两年了，但感觉还是不爽仿佛也没掌握什么，这个时候你除了思考一下你的学习方法以外，还必须坚定你的目标及信念！
&amp;lt;/p&amp;gt;</content>
<json-link>./file/c/2012-06-04/1338768294.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
