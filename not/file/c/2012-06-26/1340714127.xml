<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>C语言教程：预处理命令</title>
<content>&amp;lt;p&amp;gt;
	概述
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在前面各章中，已多次使用过以“#”号开头的预处理命令。如包含命令#&amp;nbsp;include，宏定义命令#&amp;nbsp;define等。在源程序中这些命令都放在函数之外，&amp;nbsp;而且一般都放在源文件的前面，它们称为预处理部分。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	所谓预处理是指在进行编译的第一遍扫描(词法扫描和语法分析)之前所作的工作。预处理是Ｃ语言的一个重要功能，&amp;nbsp;它由预处理程序负责完成。当对一个源文件进行编译时，&amp;nbsp;系统将自动引用预处理程序对源程序中的预处理部分作处理，&amp;nbsp;处理完毕自动进入对源程序的编译。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	Ｃ语言提供了多种预处理功能，如宏定义、文件包含、&amp;nbsp;条件编译等。合理地使用预处理功能编写的程序便于阅读、修改、&amp;nbsp;移植和调试，也有利于模块化程序设计。本章介绍常用的几种预处理功能。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	宏定义
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在Ｃ语言源程序中允许用一个标识符来表示一个字符串，&amp;nbsp;称为“宏”。被定义为“宏”的标识符称为“宏名”。在编译预处理时，对程序中所有出现的“宏名”，都用宏定义中的字符串去代换，&amp;nbsp;这称为“宏代换”或“宏展开”。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	宏定义是由源程序中的宏定义命令完成的。&amp;nbsp;宏代换是由预处理程序自动完成的。在Ｃ语言中，“宏”分为有参数和无参数两种。&amp;nbsp;下面分别讨论这两种“宏”的定义和调用。&amp;nbsp;无参宏定义
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	无参宏的宏名后不带参数。其定义的一般形式为：&amp;nbsp;#define&amp;nbsp;标识符&amp;nbsp;字符串&amp;nbsp;其中的“#”表示这是一条预处理命令。凡是以“#”开头的均为预处理命令。“define”为宏定义命令。&amp;nbsp;“标识符”为所定义的宏名。“字符串”可以是常数、表达式、格式串等。在前面介绍过的符号常量的定义就是一种无参宏定义。&amp;nbsp;此外，常对程序中反复使用的表达式进行宏定义。例如：&amp;nbsp;#&amp;nbsp;define&amp;nbsp;M&amp;nbsp;(y*y+3*y)&amp;nbsp;定义M表达式(y*y+3*y)。在编写源程序时，所有的(y*y+3*y)都可由M代替，而对源程序作编译时，将先由预处理程序进行宏代换，即用(y*y+3*y)表达式去置换所有的宏名M，然后再进行编译。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;M&amp;nbsp;(y*y+3*y)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;s,y;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;y);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=3*M+4*M+5*M;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(s=%d\n,s);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	上例程序中首先进行宏定义，定义M表达式(y*y+3*y),在s=&amp;nbsp;3*M+4*M+5*&amp;nbsp;M中作了宏调用。在预处理时经宏展开后该语句变为：s=3*(y*y+3*y)+4(y*y+3*y)+5(y*y+3*y);但要注意的是，在宏定义中表达式(y*y+3*y)两边的括号不能少。否则会发生错误。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	当作以下定义后：&amp;nbsp;#difine&amp;nbsp;M&amp;nbsp;y*y+3*y在宏展开时将得到下述语句：&amp;nbsp;s=3*y*y+3*y+4*y*y+3*y+5*y*y+3*y；这相当于；&amp;nbsp;3y2+3y+4y2+3y+5y2+3y；显然与原题意要求不符。计算结果当然是错误的。&amp;nbsp;因此在作宏定义时必须十分注意。应保证在宏代换之后不发生错误。对于宏定义还要说明以下几点：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;宏定义是用宏名来表示一个字符串，在宏展开时又以该字符串取代宏名，这只是一种简单的代换，字符串中可以含任何字符，可以是常数，也可以是表达式，预处理程序对它不作任何检查。如有错误，只能在编译已被宏展开后的源程序时发现。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;宏定义不是说明或语句，在行末不必加分号，如加上分号则连分号也一起置换。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;宏定义必须写在函数之外，其作用域为宏定义命令起到源程序结&amp;nbsp;束。如要终止其作用域可使用#&amp;nbsp;undef命令，例如：&amp;nbsp;#&amp;nbsp;define&amp;nbsp;PI&amp;nbsp;3.14159
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	……
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#&amp;nbsp;undef&amp;nbsp;PIPI的作用域
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	f1()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	....表示PI只在main函数中有效，在f1中无效。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.&amp;nbsp;宏名在源程序中若用引号括起来，则预处理程序不对其作宏代换。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;OK&amp;nbsp;100
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(OK);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	上例中定义宏名OK表示100，但在printf语句中OK被引号括起来，因此不作宏代换。程序的运行结果为：OK这表示把“OK”当字符串处理。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	5.&amp;nbsp;宏定义允许嵌套，在宏定义的字符串中可以使用已经定义的宏名。在宏展开时由预处理程序层层代换。例如：&amp;nbsp;#define&amp;nbsp;PI&amp;nbsp;3.1415926
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;S&amp;nbsp;PI*y*y&amp;nbsp;/*&amp;nbsp;PI是已定义的宏名*/对语句：&amp;nbsp;printf(%f,s);在宏代换后变为：&amp;nbsp;printf(%f,3.1415926*y*y);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	6.&amp;nbsp;习惯上宏名用大写字母表示，以便于与变量区别。但也允许用小写字母。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	7.&amp;nbsp;可用宏定义表示数据类型，使书写方便。例如：&amp;nbsp;#define&amp;nbsp;STU&amp;nbsp;struct&amp;nbsp;stu在程序中可用STU作变量说明：&amp;nbsp;STU&amp;nbsp;body[5],*p;#define&amp;nbsp;INTEGER&amp;nbsp;int　在程序中即可用INTEGER作整型变量说明：&amp;nbsp;INTEGER&amp;nbsp;a,b;&amp;nbsp;应注意用宏定义表示数据类型和用typedef定义数据说明符的区别。宏定义只是简单的字符串代换，是在预处理完成的，而typedef是在编译时处理的，它不是作简单的代换，&amp;nbsp;而是对类型说明符重新命名。被命名的标识符具有类型定义说明的功能。请看下面的例子：&amp;nbsp;#define&amp;nbsp;PIN1&amp;nbsp;int*　typedef&amp;nbsp;(int*)&amp;nbsp;PIN2;从形式上看这两者相似，&amp;nbsp;但在实际使用中却不相同。下面用PIN1，PIN2说明变量时就可以看出它们的区别：&amp;nbsp;PIN1&amp;nbsp;a,b;在宏代换后变成&amp;nbsp;int&amp;nbsp;*a,b;表示a是指向整型的指针变量，而b是整型变量。然而：PIN2&amp;nbsp;a,b;表示a,b都是指向整型的指针变量。因为PIN2是一个类型说明符。由这个例子可见，宏定义虽然也可表示数据类型，&amp;nbsp;但毕竟是作字符
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	代换。在使用时要分外小心，以避出错。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	8.&amp;nbsp;对“输出格式”作宏定义，可以减少书写麻烦。例9.3&amp;nbsp;中就采用了这种方法。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;P&amp;nbsp;printf
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;D&amp;nbsp;%d\n
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;F&amp;nbsp;%f\n
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a=5,&amp;nbsp;c=8,&amp;nbsp;e=11;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;b=3.8,&amp;nbsp;d=9.7,&amp;nbsp;f=21.08;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	P(D&amp;nbsp;F,a,b);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	P(D&amp;nbsp;F,c,d);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	P(D&amp;nbsp;F,e,f);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	带参宏定义
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	Ｃ语言允许宏带有参数。在宏定义中的参数称为形式参数，&amp;nbsp;在宏调用中的参数称为实际参数。对带参数的宏，在调用中，不仅要宏展开，&amp;nbsp;而且要用实参去代换形参。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	带参宏定义的一般形式为：&amp;nbsp;#define&amp;nbsp;宏名(形参表)&amp;nbsp;字符串&amp;nbsp;在字符串中含有各个形参。带参宏调用的一般形式为：&amp;nbsp;宏名(实参表)；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;M(y)&amp;nbsp;y*y+3*y&amp;nbsp;/*宏定义*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	:
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	k=M(5);&amp;nbsp;/*宏调用*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	:&amp;nbsp;在宏调用时，用实参5去代替形参y，&amp;nbsp;经预处理宏展开后的语句
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	为：&amp;nbsp;k=5*5+3*5
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;MAX(a,b)&amp;nbsp;(a&amp;amp;gt;b)?a:b
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;x,y,max;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;two&amp;nbsp;numbers:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d%d,&amp;amp;x,&amp;amp;y);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	max=MAX(x,y);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(max=%d\n,max);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	上例程序的第一行进行带参宏定义，用宏名MAX表示条件表达式(a&amp;amp;gt;b)?a:b，形参a,b均出现在条件表达式中。程序第七行max=MAX(x,
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	y)为宏调用，实参x,y，将代换形参a,b。宏展开后该语句为：&amp;nbsp;max=(x&amp;amp;gt;y)?x:y;用于计算x,y中的大数。对于带参的宏定义有以下问题需要说明：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;带参宏定义中，宏名和形参表之间不能有空格出现。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如把：&amp;nbsp;#define&amp;nbsp;MAX(a,b)&amp;nbsp;(a&amp;amp;gt;b)?a:b写为：&amp;nbsp;#define&amp;nbsp;MAX&amp;nbsp;(a,b)&amp;nbsp;(a&amp;amp;gt;b)?a:b&amp;nbsp;将被认为是无参宏定义，宏名MAX代表字符串&amp;nbsp;(a,b)(a&amp;amp;gt;b)?a:b。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	宏展开时，宏调用语句：&amp;nbsp;max=MAX(x,y);将变为：&amp;nbsp;max=(a,b)(a&amp;amp;gt;b)?a:b(x,y);这显然是错误的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;在带参宏定义中，形式参数不分配内存单元，因此不必作类型定义。而宏调用中的实参有具体的值。要用它们去代换形参，因此必须作类型说明。这是与函数中的情况不同的。在函数中，形参和实参是两个不同的量，各有自己的作用域，调用时要把实参值赋予形参，进行“值传递”。而在带参宏中，只是符号代换，不存在值传递的问题。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;在宏定义中的形参是标识符，而宏调用中的实参可以是表达式。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;SQ(y)&amp;nbsp;(y)*(y)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a,sq;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	sq=SQ(a+1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(sq=%d\n,sq);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	上例中第一行为宏定义，形参为y。程序第七行宏调用中实参为a+1，是一个表达式，在宏展开时，用a+1代换y，再用(y)*(y)&amp;nbsp;代换SQ，得到如下语句：&amp;nbsp;sq=(a+1)*(a+1);&amp;nbsp;这与函数的调用是不同的，&amp;nbsp;函数调用时要把实参表达式的值求出来再赋予形参。&amp;nbsp;而宏代换中对实参表达式不作计算直接地照原样代换。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.&amp;nbsp;在宏定义中，字符串内的形参通常要用括号括起来以避免出错。&amp;nbsp;在上例中的宏定义中(y)*(y)表达式的y都用括号括起来，因此结果是正确的。如果去掉括号，把程序改为以下形式：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;SQ(y)&amp;nbsp;y*y
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a,sq;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	sq=SQ(a+1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(sq=%d\n,sq);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	运行结果为：input&amp;nbsp;a&amp;nbsp;number:3
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	sq=7&amp;nbsp;同样输入3，但结果却是不一样的。问题在哪里呢?&amp;nbsp;这是由于代换只作符号代换而不作其它处理而造成的。&amp;nbsp;宏代换后将得到以下语句：&amp;nbsp;sq=a+1*a+1;&amp;nbsp;由于a为3故sq的值为7。这显然与题意相违，因此参数两边的括号是不能少的。即使在参数两边加括号还是不够的，请看下面程序：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;SQ(y)&amp;nbsp;(y)*(y)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a,sq;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	sq=160/SQ(a+1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(sq=%d\n,sq);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序与前例相比，只把宏调用语句改为：&amp;nbsp;sq=160/SQ(a+1);&amp;nbsp;运行本程序如输入值仍为3时，希望结果为10。但实际运行的结果如下：input&amp;nbsp;a&amp;nbsp;number:3　sq=160为什么会得这样的结果呢?分析宏调用语句，在宏代换之后变为：&amp;nbsp;sq=160/(a+1)*(a+1);a为3时，由于“/”和“*”运算符优先级和结合性相同，&amp;nbsp;则先作160/(3+1)得40，再作40*(3+1)最后得160。为了得到正确答案应在宏定义中的整个字符串外加括号，&amp;nbsp;程序修改如下
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;SQ(y)&amp;nbsp;((y)*(y))
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a,sq;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	sq=160/SQ(a+1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(sq=%d\n,sq);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	以上讨论说明，对于宏定义不仅应在参数两侧加括号，&amp;nbsp;也应在整个字符串外加括号。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	5.&amp;nbsp;带参的宏和带参函数很相似，但有本质上的不同，除上面已谈到的各点外，把同一表达式用函数处理与用宏处理两者的结果有可能是不同的。main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i=1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while(i&amp;amp;lt;=5)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d\n,SQ(i++));
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	SQ(int&amp;nbsp;y)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return((y)*(y));
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}#define&amp;nbsp;SQ(y)&amp;nbsp;((y)*(y))
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i=1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while(i&amp;amp;lt;=5)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d\n,SQ(i++));
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在上例中函数名为SQ，形参为Y，函数体表达式为((y)*(y))。在例9.6中宏名为SQ，形参也为y，字符串表达式为(y)*(y))。&amp;nbsp;两例是相同的。例9.6的函数调用为SQ(i++)，例9.7的宏调用为SQ(i++)，实参也是相同的。从输出结果来看，却大不相同。分析如下：在例9.6中，函数调用是把实参i值传给形参y后自增1。&amp;nbsp;然后输出函数值。因而要循环5次。输出1～5的平方值。而在例9.7中宏调用时，只作代换。SQ(i++)被代换为((i++)*(i++))。在第一次循环时，由于i等于1，其计算过程为：表达式中前一个i初值为1，然后i自增1变为2，因此表达式中第2个i初值为2，两相乘的结果也为2，然后i值再自增1，得3。在第二次循环时，i值已有初值为3，因此表达式中前一个i为3，后一个i为4，&amp;nbsp;乘积为12，然后i再自增1变为5。进入第三次循环，由于i&amp;nbsp;值已为5，所以这将是最后一次循环。计算表达式的值为5*6等于30。i值再自增1变为6，不再满足循环条件，停止循环。从以上分析可以看出函数调用和宏调用二者在形式上相似，&amp;nbsp;在本质上是完全不同的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	6.&amp;nbsp;宏定义也可用来定义多个语句，在宏调用时，把这些语句又代换到源程序内。看下面的例子。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;SSSV(s1,s2,s3,v)&amp;nbsp;s1=l*w;s2=l*h;s3=w*h;v=w*l*h;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;l=3,w=4,h=5,sa,sb,sc,vv;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	SSSV(sa,sb,sc,vv);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(sa=%d\nsb=%d\nsc=%d\nvv=%d\n,sa,sb,sc,vv);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序第一行为宏定义，用宏名SSSV表示4个赋值语句，4&amp;nbsp;个形参分别为4个赋值符左部的变量。在宏调用时，把4&amp;nbsp;个语句展开并用实参代替形参。使计算结果送入实参之中。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	文件包含
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	文件包含是C预处理程序的另一个重要功能。文件包含命令行的一般形式为：&amp;nbsp;#include文件名&amp;nbsp;在前面我们已多次用此命令包含过库函数的头文件。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestdio.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includemath.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	文件包含命令的功能是把指定的文件插入该命令行位置取代该命令行，&amp;nbsp;从而把指定的文件和当前的源程序文件连成一个源文件。在程序设计中，文件包含是很有用的。&amp;nbsp;一个大的程序可以分为多个模块，由多个程序员分别编程。&amp;nbsp;有些公用的符号常量或宏定义等可单独组成一个文件，&amp;nbsp;在其它文件的开头用包含命令包含该文件即可使用。这样，可避免在每个文件开头都去书写那些公用量，&amp;nbsp;从而节省时间，并减少出错。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	对文件包含命令还要说明以下几点：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;包含命令中的文件名可以用双引号括起来，也可以用尖括号括起来。例如以下写法都是允许的：&amp;nbsp;#includestdio.h　#include&amp;amp;lt;math.h&amp;amp;gt;&amp;nbsp;但是这两种形式是有区别的：使用尖括号表示在包含文件目录中去查找(包含目录是由用户在设置环境时设置的)，&amp;nbsp;而不在源文件目录去查找；&amp;nbsp;使用双引号则表示首先在当前的源文件目录中查找，若未找到才到包含目录中去查找。&amp;nbsp;用户编程时可根据自己文件所在的目录来选择某一种命令形式。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;一个include命令只能指定一个被包含文件，&amp;nbsp;若有多个文件要包含，则需用多个include命令。3.&amp;nbsp;文件包含允许嵌套，即在一个被包含的文件中又可以包含另一个文件。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	条件编译
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	预处理程序提供了条件编译的功能。&amp;nbsp;可以按不同的条件去编译不同的程序部分，因而产生不同的目标代码文件。&amp;nbsp;这对于程序的移植和调试是很有用的。&amp;nbsp;条件编译有三种形式，下面分别介绍：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;第一种形式：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#ifdef&amp;nbsp;标识符
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段1
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段2
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#endif
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	它的功能是，如果标识符已被&amp;nbsp;#define命令定义过则对程序段1进行编译；否则对程序段2进行编译。如果没有程序段2(它为空)，本格式中的#else可以没有，&amp;nbsp;即可以写为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#ifdef&amp;nbsp;标识符
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段&amp;nbsp;#endif
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;NUM&amp;nbsp;ok
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;*ps;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps=(struct&amp;nbsp;stu*)malloc(sizeof(struct&amp;nbsp;stu));
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;num=102;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;name=Zhang&amp;nbsp;ping;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;sex=&amp;nbsp;M&amp;nbsp;;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;score=62.5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#ifdef&amp;nbsp;NUM
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nScore=%f\n,ps-&amp;amp;gt;num,ps-&amp;amp;gt;score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Name=%s\nSex=%c\n,ps-&amp;amp;gt;name,ps-&amp;amp;gt;sex);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#endif
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	free(ps);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	由于在程序的第16行插入了条件编译预处理命令，&amp;nbsp;因此要根据NUM是否被定义过来决定编译那一个printf语句。而在程序的第一行已对NUM作过宏定义，因此应对第一个printf语句作编译故运行结果是输出了学号和成绩。在程序的第一行宏定义中，定义NUM表示字符串OK，其实也可以为任何字符串，甚至不给出任何字符串，写为：&amp;nbsp;#define&amp;nbsp;NUM&amp;nbsp;也具有同样的意义。&amp;nbsp;只有取消程序的第一行才会去编译第二个printf语句。读者可上机试作。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;第二种形式：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#ifndef&amp;nbsp;标识符
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段1
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段2
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#endif
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	与第一种形式的区别是将“ifdef”改为“ifndef”。它的功能是，如果标识符未被#define命令定义过则对程序段1进行编译，&amp;nbsp;否则对程序段2进行编译。这与第一种形式的功能正相反。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;第三种形式：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#if&amp;nbsp;常量表达式
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段1
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序段2
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#endif
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	它的功能是，如常量表达式的值为真(非0)，则对程序段1&amp;nbsp;进行编译，否则对程序段2进行编译。因此可以使程序在不同条件下，完成不同的功能
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;R&amp;nbsp;1
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;c,r,s;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf&amp;nbsp;(input&amp;nbsp;a&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%f,&amp;amp;c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#if&amp;nbsp;R
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	r=3.14159*c*c;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(area&amp;nbsp;of&amp;nbsp;round&amp;nbsp;is:&amp;nbsp;%f\n,r);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=c*c;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(area&amp;nbsp;of&amp;nbsp;square&amp;nbsp;is:&amp;nbsp;%f\n,s);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#endif
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例中采用了第三种形式的条件编译。在程序第一行宏定义中，定义R为1，因此在条件编译时，常量表达式的值为真，&amp;nbsp;故计算并输出圆面积。上面介绍的条件编译当然也可以用条件语句来实现。&amp;nbsp;但是用条件语句将会对整个源程序进行编译，生成的目标代码程序很长，而采用条件编译，则根据条件只编译其中的程序段1或程序段2，&amp;nbsp;生成的目标程序较短。如果条件选择的程序段很长，&amp;nbsp;采用条件编译的方法是十分必要的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本章小结
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;预处理功能是Ｃ语言特有的功能，它是在对源程序正式编译前由预处理程序完成的。程序员在程序中用预处理命令来调用这些功能。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;宏定义是用一个标识符来表示一个字符串，这个字符串可以是常量、变量或表达式。在宏调用中将用该字符串代换宏名。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;宏定义可以带有参数，宏调用时是以实参代换形参。而不是“值传送”。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.&amp;nbsp;为了避免宏代换时发生错误，宏定义中的字符串应加括号，字符串中出现的形式参数两边也应加括号。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	5.&amp;nbsp;文件包含是预处理的一个重要功能，它可用来把多个源文件连接成一个源文件进行编译，结果将生成一个目标文件。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	6.&amp;nbsp;条件编译允许只编译源程序中满足条件的程序段，使生成的目标程序较短，从而减少了内存的开销并提高了程序的效率。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	7.&amp;nbsp;使用预处理功能便于程序的修改、阅读、移植和调试，也便于实现模块化程序设计。
&amp;lt;/p&amp;gt;</content>
<json-link>./file/c/2012-06-26/1340714127.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
