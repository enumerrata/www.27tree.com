<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>C语言教程：数组</title>
<content>&amp;lt;p&amp;gt;
	数组在程序设计中，为了处理方便，&amp;nbsp;把具有相同类型的若干变量按有序的形式组织起来。这些按序排列的同类数据元素的集合称为数组。在Ｃ语言中，&amp;nbsp;数组属于构造数据类型。一个数组可以分解为多个数组元素，这些数组元素可以是基本数据类型或是构造类型。因此按数组元素的类型不同，数组又可分为数值数组、字符数组、指针数组、结构数组等各种类别。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本章介绍数值数组和字符数组，其余的在以后各章陆续介绍。数组类型说明&amp;nbsp;在Ｃ语言中使用数组必须先进行类型说明。&amp;nbsp;数组说明的一般形
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	式为：&amp;nbsp;类型说明符&amp;nbsp;数组名&amp;nbsp;[常量表达式]，……；&amp;nbsp;其中，类型说明符是任一种基本数据类型或构造数据类型。&amp;nbsp;数组名是用户定义的数组标识符。&amp;nbsp;方括号中的常量表达式表示数据元素的个数，也称为数组的长度。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a[10];&amp;nbsp;说明整型数组a，有10个元素。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;b[10],c[20];&amp;nbsp;说明实型数组b，有10个元素，实型数组c，有20个元素。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;ch[20];&amp;nbsp;说明字符数组ch，有20个元素。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	对于数组类型说明应注意以下几点：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.数组的类型实际上是指数组元素的取值类型。对于同一个数组，其所有元素的数据类型都是相同的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.数组名的书写规则应符合标识符的书写规定。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.数组名不能与其它变量名相同，例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;a[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	……
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	是错误的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.方括号中常量表达式表示数组元素的个数，如a[5]表示数组a有5个元素。但是其下标从0开始计算。因此5个元素分别为a[0],a[1],a[2],a[3],a[4]。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	5.不能在方括号中用变量来表示元素的个数，&amp;nbsp;但是可以是符号常数或常量表达式。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;FD&amp;nbsp;5
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a[3+2],b[7+FD];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	……
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	是合法的。但是下述说明方式是错误的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;n=5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a[n];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	……
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	6.允许在同一个类型说明中，说明多个数组和多个变量。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：&amp;nbsp;int&amp;nbsp;a,b,c,d,k1[10],k2[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	数组元素的表示方法
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	数组元素是组成数组的基本单元。数组元素也是一种变量，&amp;nbsp;其标识方法为数组名后跟一个下标。&amp;nbsp;下标表示了元素在数组中的顺序号。数组元素的一般形式为：&amp;nbsp;数组名[下标]&amp;nbsp;其中的下标只能为整型常量或整型表达式。如为小数时，C编译将自动取整。例如，a[5],a[i+j],a[i++]都是合法的数组元素。&amp;nbsp;数组元素通常也称为下标变量。必须先定义数组，&amp;nbsp;才能使用下标变量。在Ｃ语言中只能逐个地使用下标变量，&amp;nbsp;而不能一次引用整个数组。&amp;nbsp;例如，输出有10&amp;nbsp;个元素的数组必须使用循环语句逐个输出各下标变量：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;&amp;nbsp;i&amp;amp;lt;10;&amp;nbsp;i++)　　printf(%d,a[i]);&amp;nbsp;而不能用一个语句输出整个数组，下面的写法是错误的：&amp;nbsp;printf(%d,a);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,a[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i++]=2*i+1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=9;i&amp;amp;gt;=0;i--)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d,a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n%d&amp;nbsp;%d\n,a[5.2],a[5.8]);}&amp;nbsp;for(i=0;i&amp;amp;lt;10;)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i++]=2*i+1;&amp;nbsp;for(i=9;i&amp;amp;gt;=0;i--)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d,a[i]);&amp;nbsp;printf(\n%d&amp;nbsp;%d\n,a[5.2],a[5.8]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例中用一个循环语句给a数组各元素送入奇数值，然后用第二个循环语句从大到小输出各个奇数。在第一个&amp;nbsp;for语句中，表达式3省略了。在下标变量中使用了表达式i++，用以修改循环变量。当然第二个for语句也可以这样作，&amp;nbsp;Ｃ语言允许用表达式表示下标。&amp;nbsp;程序中最后一个printf语句输出了两次a[5]的值，&amp;nbsp;可以看出当下标不为整数时将自动取整。数组的赋值给数组赋值的方法除了用赋值语句对数组元素逐个赋值外，&amp;nbsp;还可采用初始化赋值和动态赋值的方法。数组初始化赋值数组初始化赋值是指在数组说明时给数组元素赋予初值。&amp;nbsp;数组初始化是在编译阶段进行的。这样将减少运行时间，提高效率。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	初始化赋值的一般形式为：&amp;nbsp;static&amp;nbsp;类型说明符&amp;nbsp;数组名[常量表达式]={值，值……值}；&amp;nbsp;其中static表示是静态存储类型，&amp;nbsp;Ｃ语言规定只有静态存储数组和外部存储数组才可作初始化赋值(有关静态存储，外部存储的概念在第五章中介绍)。在{&amp;nbsp;}中的各数据值即为各元素的初值，&amp;nbsp;各值之间用逗号间隔。例如：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[10]={&amp;nbsp;0,1,2,3,4,5,6,7,8,9&amp;nbsp;};&amp;nbsp;相当于a[0]=0;a[1]=1...a[9]=9;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	Ｃ语言对数组的初始赋值还有以下几点规定：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.可以只给部分元素赋初值。当{&amp;nbsp;}中值的个数少于元素个数时，只给前面部分元素赋值。例如：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[10]={0,1,2,3,4};表示只给a[0]～a[4]5个元素赋值，而后5个元素自动赋0值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.只能给元素逐个赋值，不能给数组整体赋值。&amp;nbsp;例如给十个元素全部赋1值，只能写为：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[10]={1,1,1,1,1,1,1,1,1,1};而不能写为：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[10]=1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.如不给可初始化的数组赋初值，则全部元素均为0值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.如给全部元素赋值，则在数组说明中，&amp;nbsp;可以不给出数组元素的个数。例如：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[5]={1,2,3,4,5};可写为：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[]={1,2,3,4,5};动态赋值可以在程序执行过程中，对数组作动态赋值。&amp;nbsp;这时可用循环语句配合scanf函数逐个对数组元素赋值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,max,a[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;10&amp;nbsp;numbers:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	max=a[0];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=1;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(a[i]&amp;amp;gt;max)&amp;nbsp;max=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(maxmum=%d\n,max);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	max=a[0];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=1;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(a[i]&amp;amp;gt;max)&amp;nbsp;max=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(maxmum=%d\n,max);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例程序中第一个for语句逐个输入10个数到数组a中。&amp;nbsp;然后把a[0]送入max中。在第二个for语句中，从a[1]到a[9]逐个与max中的内容比较，若比max的值大，则把该下标变量送入max中，因此max总是在已比较过的下标变量中为最大者。比较结束，输出max的值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,j,p,q,s,a[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n&amp;nbsp;input&amp;nbsp;10&amp;nbsp;numbers:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	p=i;q=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=i+1;j&amp;amp;lt;10;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(q&amp;amp;lt;a[j])&amp;nbsp;{&amp;nbsp;p=j;q=a[j];&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(i!=p)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{s=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i]=a[p];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[p]=s;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d,a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	p=i;q=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=i+1;j&amp;amp;lt;10;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(q&amp;amp;lt;a[j])&amp;nbsp;{&amp;nbsp;p=j;q=a[j];&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(i!=p)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;s=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i]=a[p];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[p]=s;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d,a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例程序中用了两个并列的for循环语句，在第二个for&amp;nbsp;语句中又嵌套了一个循环语句。第一个for语句用于输入10个元素的初值。第二个for语句用于排序。本程序的排序采用逐个比较的方法进行。在i次循环时，把第一个元素的下标i赋于p，而把该下标变量值a[i]赋于q。然后进入小循环，从a[i+1]起到最后一个元素止逐个与a[i]作比较，有比a[i]大者则将其下标送p，元素值送q。&amp;nbsp;一次循环结束后，p即为最大元素的下标，q则为该元素值。若此时i≠p，说明p,q值均已不是进入小循环之前所赋之值，则交换a[i]和a[p]之值。&amp;nbsp;此时a[i]为已排序完毕的元素。输出该值之后转入下一次循环。对i+1以后各个元素排序。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二维数组
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	前面介绍的数组只有一个下标，称为一维数组，&amp;nbsp;其数组元素也称为单下标变量。在实际问题中有很多量是二维的或多维的，&amp;nbsp;因此Ｃ语言允许构造多维数组。多维数组元素有多个下标，&amp;nbsp;以标识它在数组中的位置，所以也称为多下标变量。&amp;nbsp;本小节只介绍二维数组，多维数组可由二维数组类推而得到。二维数组类型说明二维数组类型说明的一般形式是：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	类型说明符&amp;nbsp;数组名[常量表达式1][常量表达式2]…；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	其中常量表达式1表示第一维下标的长度，常量表达式2&amp;nbsp;表示第二维下标的长度。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;a[3][4];&amp;nbsp;说明了一个三行四列的数组，数组名为a，其下标变量的类型为整型。该数组的下标变量共有3×4个，即：&amp;nbsp;a[0][0],a[0][1],a[0][2],a[0][3]
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[1][0],a[1][1],a[1][2],a[1][3]
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[2][0],a[2][1],a[2][2],a[2][3]
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二维数组在概念上是二维的，即是说其下标在两个方向上变化，&amp;nbsp;下标变量在数组中的位置也处于一个平面之中，&amp;nbsp;而不是象一维数组只是一个向量。但是，实际的硬件存储器却是连续编址的，&amp;nbsp;也就是说存储器单元是按一维线性排列的。&amp;nbsp;如何在一维存储器中存放二维数组，可有两种方式：一种是按行排列，&amp;nbsp;即放完一行之后顺次放入第二行。另一种是按列排列，&amp;nbsp;即放完一列之后再顺次放入第二列。在Ｃ语言中，二维数组是按行排列的。&amp;nbsp;在图4.1中，按行顺次存放，先存放a[0]行，再存放a[1]行，最后存放a[2]行。每行中有四个元素也是依次存放。由于数组a说明为
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int类型，该类型占两个字节的内存空间，所以每个元素均占有两个&amp;nbsp;字节(图中每一格为一字节)。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二维数组元素的表示方法
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二维数组的元素也称为双下标变量，其表示的形式为：&amp;nbsp;数组名[下标][下标]&amp;nbsp;其中下标应为整型常量或整型表达式。例如：&amp;nbsp;a[3][4]&amp;nbsp;表示a数组三行四列的元素。下标变量和数组说明在形式中有些相似，但这两者具有完全不同的含义。&amp;nbsp;数组说明的方括号中给出的是某一维的长度，即可取下标的最大值；&amp;nbsp;而数组元素中的下标是该元素在数组中的位置标识。前者只能是常量，&amp;nbsp;后者可以是常量，变量或表达式。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一个学习小组有5个人，每个人有三门课的考试成绩。求全组分科的平均成绩和各科总平均成绩。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	课程&amp;nbsp;成绩姓名&amp;nbsp;Math　C　DBASE
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	张　　　　　　80　　75　92
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	王　　　　　　61　　65　71
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	李　　　　　　59　　63　70
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	赵　　　　　　85　　87　90
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	周　　　　　　76　　77　85
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	可设一个二维数组a[5][3]存放五个人三门课的成绩。再设一个一维数组v[3]存放所求得各分科平均成绩，设变量l为全组各科总平均成绩。编程如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,j,s=0,l,v[3],a[5][3];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;score\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;3;i++){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=0;j&amp;amp;lt;5;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;scanf(%d,&amp;amp;a[j][i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=s+a[j][i];}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	v[i]=s/5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=0;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	l=(v[0]+v[1]+v[2])/3;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(math:%d\nc&amp;nbsp;languag:%d\ndbase:%d\n,v[0],v[1],v[2]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(total:%d\n,l);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;for(i=0;j&amp;amp;lt;3;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=0;j&amp;amp;lt;5;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;scanf(%d,&amp;amp;a[j][i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=s+a[j][i];}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	v[i]=s/5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=0;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	l=(v[0]+v[1]+v[2])/3;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序中首先用了一个双重循环。&amp;nbsp;在内循环中依次读入某一门课程的各个学生的成绩，并把这些成绩累加起来，&amp;nbsp;退出内循环后再把该累加成绩除以5送入v[i]之中，这就是该门课程的平均成绩。外循环共循环三次，分别求出三门课各自的平均成绩并存放在v数组之中。退出外循环之后，把v[0],v[1],v[2]相加除以3即得到各科总平均成绩。最后按题意输出各个成绩。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二维数组的初始化
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二维数组初始化也是在类型说明时给各下标变量赋以初值。&amp;nbsp;二维数组可按行分段赋值，也可按行连续赋值。&amp;nbsp;例如对数组a[5][3]：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.按行分段赋值可写为static&amp;nbsp;int&amp;nbsp;a[5][3]={&amp;nbsp;{80,75,92},{61,65,71},{59,63,70},{85,87,90},{76,77,85}&amp;nbsp;};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.按行连续赋值可写为static&amp;nbsp;int&amp;nbsp;a[5][3]={&amp;nbsp;80,75,92,61,65,71,59,63,70,85,87,90,76,77,85&amp;nbsp;};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这两种赋初值的结果是完全相同的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,j,s=0,l,v[3];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;int&amp;nbsp;a[5][3]={&amp;nbsp;{80,75,92},{61,65,71},{59,63,70},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{85,87,90},{76,77,85}&amp;nbsp;};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;3;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;for(j=0;j&amp;amp;lt;5;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=s+a[j][i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	v[i]=s/5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=0;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	l=(v[0]+v[1]+v[2])/3;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(math:%d\nc&amp;nbsp;languag:%d\ndbase:%d\n,v[0],v[1],v[2]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(total:%d\n,l);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	对于二维数组初始化赋值还有以下说明：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.可以只对部分元素赋初值，未赋初值的元素自动取0值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[3][3]={{1},{2},{3}};&amp;nbsp;是对每一行的第一列元素赋值，未赋值的元素取0值。&amp;nbsp;赋值后各元素的值为：&amp;nbsp;1&amp;nbsp;0&amp;nbsp;02&amp;nbsp;0&amp;nbsp;03&amp;nbsp;0&amp;nbsp;0
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;int&amp;nbsp;a&amp;nbsp;[3][3]={{0,1},{0,0,2},{3}};&amp;nbsp;赋值后的元素值为&amp;nbsp;0&amp;nbsp;1&amp;nbsp;00&amp;nbsp;0&amp;nbsp;23&amp;nbsp;0&amp;nbsp;0
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.如对全部元素赋初值，则第一维的长度可以不给出。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：&amp;nbsp;static&amp;nbsp;int&amp;nbsp;a[3][3]={1,2,3,4,5,6,7,8,9};&amp;nbsp;可以写为：static&amp;nbsp;int&amp;nbsp;a[][3]={1,2,3,4,5,6,7,8,9};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	数组是一种构造类型的数据。&amp;nbsp;二维数组可以看作是由一维数组的嵌套而构成的。设一维数组的每个元素都又是一个数组，&amp;nbsp;就组成了二维数组。当然，前提是各元素类型必须相同。根据这样的分析，一个二维数组也可以分解为多个一维数组。&amp;nbsp;Ｃ语言允许这种分解有二维数组a[3][4]，可分解为三个一维数组，其数组名分别为a[0],a[1],a[2]。对这三个一维数组不需另作说明即可使用。这三个一维数组都有4个元素，例如：一维数组a[0]的元素为a[0][0],a[0][1],a[0][2],a[0][3]。必须强调的是，a[0],a[1],a[2]不能当作下标变量使用，它们是数组名，不是一个单纯的下标变量。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	字符数组
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	用来存放字符量的数组称为字符数组。&amp;nbsp;字符数组类型说明的形式与前面介绍的数值数组相同。例如：&amp;nbsp;char&amp;nbsp;c[10];&amp;nbsp;由于字符型和整型通用，也可以定义为int&amp;nbsp;c[10]但这时每个数组元素占2个字节的内存单元。字符数组也可以是二维或多维数组，例如：&amp;nbsp;char&amp;nbsp;c[5][10];即为二维字符数组。&amp;nbsp;字符数组也允许在类型说明时作初始化赋值。例如：&amp;nbsp;static&amp;nbsp;char&amp;nbsp;c[10]={`c`,`&amp;nbsp;`,`p`,`r`,o`,g`,r`,`a`,`m`};赋值后各元素的值为：&amp;nbsp;数组C&amp;nbsp;c[0]c[1]c[2]c[3]c[4]c&amp;nbsp;[5]c[6]c[7]c[8]c[9]其中c[9]未赋值，由系统自动赋予0值。&amp;nbsp;当对全体元素赋初值时也可以省去长度说明。例如：&amp;nbsp;static&amp;nbsp;char&amp;nbsp;c[]={`c`,`&amp;nbsp;`,`p`,`r`,`o`,`g`,`r`,`a`,`m`};这时C数组的长度自动定为9。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,j;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;a[][5]={{&amp;nbsp;B&amp;nbsp;,&amp;nbsp;A&amp;nbsp;,&amp;nbsp;S&amp;nbsp;,&amp;nbsp;I&amp;nbsp;,&amp;nbsp;C&amp;nbsp;,},{&amp;nbsp;d&amp;nbsp;,&amp;nbsp;B&amp;nbsp;,&amp;nbsp;A&amp;nbsp;,&amp;nbsp;S&amp;nbsp;,&amp;nbsp;E&amp;nbsp;}};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;=1;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=0;j&amp;amp;lt;=4;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%c,a[i][j]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例的二维字符数组由于在初始化时全部元素都赋以初值，&amp;nbsp;因此一维下标的长度可以不加以说明。字符串在Ｃ语言中没有专门的字符串变量，&amp;nbsp;通常用一个字符数组来存放一个字符串。在2.1.4节介绍字符串常量时，已说明字符串总是以&amp;nbsp;\0&amp;nbsp;作为串的结束符。因此当把一个字符串存入一个数组时，&amp;nbsp;也把结束符&amp;nbsp;\0&amp;nbsp;存入数组，并以此作为该字符串是否结束的标志。&amp;nbsp;有了&amp;nbsp;\0&amp;nbsp;标志后，就不必再用字符数组的长度来判断字符串的长度了。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	Ｃ语言允许用字符串的方式对数组作初始化赋值。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;c[]={&amp;nbsp;c&amp;nbsp;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;p&amp;nbsp;,&amp;nbsp;r&amp;nbsp;,&amp;nbsp;o&amp;nbsp;,&amp;nbsp;g&amp;nbsp;,&amp;nbsp;r&amp;nbsp;,&amp;nbsp;a&amp;nbsp;,&amp;nbsp;m&amp;nbsp;};&amp;nbsp;可写为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;c[]={C&amp;nbsp;program};&amp;nbsp;或去掉{}写为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	sratic&amp;nbsp;char&amp;nbsp;c[]=C&amp;nbsp;program;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	用字符串方式赋值比用字符逐个赋值要多占一个字节，&amp;nbsp;用于存放字符串结束标志&amp;nbsp;\0&amp;nbsp;。上面的数组c在内存中的实际存放情况为：&amp;nbsp;C&amp;nbsp;program\0`\0&amp;nbsp;是由C编译系统自动加上的。由于采用了`\0&amp;nbsp;标志，所以在用字符串赋初值时一般无须指定数组的长度，&amp;nbsp;而由系统自行处理。在采用字符串方式后，字符数组的输入输出将变得简单方便。&amp;nbsp;除了上述用字符串赋初值的办法外，还可用printf函数和scanf函数一次性输出输入一个字符数组中的字符串，&amp;nbsp;而不必使用循环语句逐个地输入输出每个字符。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;c[]=BASIC\ndBASE;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%s\n,c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;printf(%s\n,c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	注意在本例的printf函数中，使用的格式字符串为“%s”，&amp;nbsp;表示输出的是一个字符串。而在输出表列中给出数组名则可。&amp;nbsp;不能写为：&amp;nbsp;printf(%s,c[]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;st[15];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;string:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%s,st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%s\n,st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;char&amp;nbsp;st[15];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例中由于定义数组长度为15，&amp;nbsp;因此输入的字符串长度必须小于15，以留出一个字节用于存放字符串结束标志`\0`。&amp;nbsp;应该说明的是，对一个字符数组，如果不作初始化赋值，则必须说明数组长度。还应该特别注意的是，当用scanf函数输入字符串时，字符串中不能含有空格，否则将以空格作为串的结束符。例如运行例4.8，当输入的字符串中含有空格时，运行情况为：&amp;nbsp;input&amp;nbsp;string:this&amp;nbsp;is&amp;nbsp;a&amp;nbsp;book&amp;nbsp;this&amp;nbsp;从输出结果可以看出空格以后的字符都未能输出。&amp;nbsp;为了避免这种情况，&amp;nbsp;可多设几个字符数组分段存放含空格的串。程序可改写如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	Lesson
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;st1[6],st2[6],st3[6],st4[6];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;string:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%s%s%s%s,st1,st2,st3,st4);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%s&amp;nbsp;%s&amp;nbsp;%s&amp;nbsp;%s\n,st1,st2,st3,st4);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序分别设了四个数组，&amp;nbsp;输入的一行字符的空格分段分别装入四个数组。然后分别输出这四个数组中的字符串。在前面介绍过，scanf的各输入项必须以地址方式出现，如&amp;nbsp;&amp;amp;a,&amp;amp;b等。但在例4.8中却是以数组名方式出现的，这是为什么呢?这是由于在Ｃ语言中规定，数组名就代表了该数组的首地址。&amp;nbsp;整个数组是以首地址开头的一块连续的内存单元。如有字符数组char&amp;nbsp;c[10]，在内存可表示如图4.2。设数组c的首地址为2000，也就是说c[0]单元地址为2000。则数组名c就代表这个首地址。因此在c前面不能再加地址运算符&amp;amp;。如写作scanf(%s,&amp;amp;c);则是错误的。&amp;nbsp;在执行函数printf(%s,c)&amp;nbsp;时，按数组名c找到首地址，然后逐个输出数组中各个字符直到遇到字符串终止标志&amp;nbsp;\0&amp;nbsp;为止。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	字符串常用函数
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	Ｃ语言提供了丰富的字符串处理函数，&amp;nbsp;大致可分为字符串的输入、输出、合并、修改、比较、转换、复制、搜索几类。&amp;nbsp;使用这些函数可大大减轻编程的负担。用于输入输出的字符串函数，&amp;nbsp;在使用前应包含头文件stdio.h&amp;nbsp;；&amp;nbsp;使用其它字符串函数则应包含头文件string.h。&amp;nbsp;下面介绍几个最常用的字符串函数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.字符串输出函数&amp;nbsp;puts&amp;nbsp;格式：&amp;nbsp;puts&amp;nbsp;(字符数组名)&amp;nbsp;功能：把字符数组中的字符串输出到显示器。&amp;nbsp;即在屏幕上显示该字符串
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestdio.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;c[]=BASIC\ndBASE;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	puts(c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;c[]=BASIC\ndBASE;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	puts(c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	从程序中可以看出puts函数中可以使用转义字符，&amp;nbsp;因此输出结果成为两行。puts函数完全可以由printf函数取代。&amp;nbsp;当需要按一定格式输出时，通常使用printf函数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.字符串输入函数gets&amp;nbsp;格式：&amp;nbsp;gets&amp;nbsp;(字符数组名)&amp;nbsp;功能：从标准输入设备键盘上输入一个字符串。&amp;nbsp;本函数得到一个函数值，即为该字符数组的首地址。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestdio.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;st[15];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;string:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	puts(st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	可以看出当输入的字符串中含有空格时，输出仍为全部字符串。说明gets函数并不以空格作为字符串输入结束的标志，&amp;nbsp;而只以回车作为输入结束。这是与scanf函数不同的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.字符串连接函数strcat&amp;nbsp;格式：&amp;nbsp;strcat&amp;nbsp;(字符数组名1，字符数组名2)&amp;nbsp;功能：把字符数组2中的字符串连接到字符数组1&amp;nbsp;中字符串的后面，并删去字符串1后的串标志“\0”。本函数返回值是字符数组1的首地址。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestring.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st1[30]=My&amp;nbsp;name&amp;nbsp;is&amp;nbsp;;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;st2[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;your&amp;nbsp;name:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcat(st1,st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	puts(st1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st1[30]=My&amp;nbsp;name&amp;nbsp;is&amp;nbsp;;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;st2[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;your&amp;nbsp;name:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcat(st1,st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序把初始化赋值的字符数组与动态赋值的字符串连接起来。&amp;nbsp;要注意的是，字符数组1应定义足够的长度，否则不能全部装入被连接的字符串
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.字符串拷贝函数strcpy&amp;nbsp;格式：&amp;nbsp;strcpy&amp;nbsp;(字符数组名1，字符数组名2)&amp;nbsp;功能：把字符数组2中的字符串拷贝到字符数组1中。串结束标志“\0”也一同拷贝。字符数名2，&amp;nbsp;也可以是一个字符串常量。这时相当于把一个字符串赋予一个字符数组。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestring.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st1[15],st2[]=C&amp;nbsp;Language;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(st1,st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	puts(st1);printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st1[15],st2[]=C&amp;nbsp;Language;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(st1,st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本函数要求字符数组1应有足够的长度，否则不能全部装入所拷贝的字符串。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	5.字符串比较函数strcmp&amp;nbsp;格式：&amp;nbsp;strcmp(字符数组名1，字符数组名2)&amp;nbsp;功能：按照ASCII码顺序比较两个数组中的字符串，并由函数返回值返回比较结果。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	字符串1＝字符串2，返回值＝0；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	字符串2〉字符串2，返回值〉0；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	字符串1〈字符串2，返回值〈0。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本函数也可用于比较两个字符串常量，或比较数组和字符串常量。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestring.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;int&amp;nbsp;k;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st1[15],st2[]=C&amp;nbsp;Language;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;string:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(st1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	k=strcmp(st1,st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(k==0)&amp;nbsp;printf(st1=st2\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(k&amp;amp;gt;0)&amp;nbsp;printf(st1&amp;amp;gt;st2\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(k&amp;amp;lt;0)&amp;nbsp;printf(st1&amp;amp;lt;st2\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;int&amp;nbsp;k;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st1[15],st2[]=C&amp;nbsp;Language;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;a&amp;nbsp;string:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(st1);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	k=strcmp(st1,st2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(k==0)&amp;nbsp;printf(st1=st2\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(k&amp;amp;gt;0)&amp;nbsp;printf(st1&amp;amp;gt;st2\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(k&amp;amp;lt;0)&amp;nbsp;printf(st1&amp;amp;lt;st2\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序中把输入的字符串和数组st2中的串比较，比较结果返回到k中，根据k值再输出结果提示串。当输入为dbase时，由ASCII&amp;nbsp;码可知“dBASE”大于“C&amp;nbsp;Language”故k〉0,输出结果“st1&amp;amp;gt;st2”。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	6.测字符串长度函数strlen&amp;nbsp;格式：&amp;nbsp;strlen(字符数组名)&amp;nbsp;功能：测字符串的实际长度(不含字符串结束标志‘\0’)&amp;nbsp;并作为函数返回值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestring.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;int&amp;nbsp;k;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;char&amp;nbsp;st[]=C&amp;nbsp;language;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	k=strlen(st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(The&amp;nbsp;lenth&amp;nbsp;of&amp;nbsp;the&amp;nbsp;string&amp;nbsp;is&amp;nbsp;%d\n,k);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序举例
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	把一个整数按大小顺序插入已排好序的数组中。&amp;nbsp;为了把一个数按大小插入已排好序的数组中，&amp;nbsp;应首先确定排序是从大到小还是从小到大进行的。设排序是从大到小进序的，&amp;nbsp;则可把欲插入的数与数组中各数逐个比较，&amp;nbsp;当找到第一个比插入数小的元素i时，该元素之前即为插入位置。然后从数组最后一个元素开始到该元素为止，逐个后移一个单元。最后把插入数赋予元素i即可。如果被插入数比所有的元素值都小则插入最后位置。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,j,p,q,s,n,a[11]={127,3,6,28,54,68,87,105,162,18};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;p=i;q=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=i+1;j&amp;amp;lt;10;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(q&amp;amp;lt;a[j])&amp;nbsp;{p=j;q=a[j];}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(p!=i)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s=a[i];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i]=a[p];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[p]=s;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d&amp;nbsp;,a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\ninput&amp;nbsp;number:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(n&amp;amp;gt;a[i])
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{for(s=9;s&amp;amp;gt;=i;s--)&amp;nbsp;a[s+1]=a[s];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	break;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i]=n;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;=10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d&amp;nbsp;,a[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;10;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(n&amp;amp;gt;a[i])
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;for(s=9;s&amp;amp;gt;=i;s--)&amp;nbsp;a[s+1]=a[s];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	break;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	a[i]=n;&amp;nbsp;本程序首先对数组a中的10个数从大到小排序并输出排序结果。然后输入要插入的整数n。再用一个for语句把n和数组元素逐个比较，如果发现有n&amp;amp;gt;a[i]时，则由一个内循环把i以下各元素值顺次后移一个单元。后移应从后向前进行(从a[9]开始到a[i]为止)。&amp;nbsp;后移结束跳出外循环。插入点为i，把n赋予a[i]即可。&amp;nbsp;如所有的元素均大于被插入数，则并未进行过后移工作。此时i=10，结果是把n赋于a[10]。最后一个循环输出插入数后的数组各元素值。程序运行时，输入数47。从结果中可以看出47已插入到54和&amp;nbsp;28之间。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在二维数组a中选出各行最大的元素组成一个一维数组b。&amp;nbsp;a=3&amp;nbsp;16&amp;nbsp;87&amp;nbsp;65&amp;nbsp;4&amp;nbsp;32&amp;nbsp;11&amp;nbsp;108&amp;nbsp;10&amp;nbsp;25&amp;nbsp;12&amp;nbsp;37b=(87&amp;nbsp;108&amp;nbsp;37)&amp;nbsp;本题的编程思路是，在数组A的每一行中寻找最大的元素，找到之后把该值赋予数组B相应的元素即可。程序如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;int&amp;nbsp;a[][4]={3,16,87,65,4,32,11,108,10,25,12,27};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;b[3],i,j,l;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;=2;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;l=a[i][0];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=1;j&amp;amp;lt;=3;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(a[i][j]&amp;amp;gt;l)&amp;nbsp;l=a[i][j];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	b[i]=l;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\narray&amp;nbsp;a:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;=2;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;for(j=0;j&amp;amp;lt;=3;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%5d,a[i][j]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n);}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\narray&amp;nbsp;b:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;=2;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%5d,b[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;=2;i++){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	l=a[i][0];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=1;j&amp;amp;lt;=3;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(a[i][j]&amp;amp;gt;l)&amp;nbsp;l=a[i][j];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	b[i]=l;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	程序中第一个for语句中又嵌套了一个for语句组成了双重循环。外循环控制逐行处理，并把每行的第0列元素赋予l。进入内循环后，把l与后面各列元素比较，并把比l大者赋予l。内循环结束时l&amp;nbsp;即为该行最大的元素，然后把l值赋予b[i]。等外循环全部完成时，数组b中已装入了a各行中的最大值。后面的两个&amp;nbsp;for语句分别输出数组a和数组b。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	输入五个国家的名称按字母顺序排列输出。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本题编程思路如下：五个国家名应由一个二维字符数组来处理。然而Ｃ语言规定可以把一个二维数组当成多个一维数组处理。&amp;nbsp;因此本题又可以按五个一维数组处理，&amp;nbsp;而每一个一维数组就是一个国家名字符串。用字符串比较函数比较各一维数组的大小，并排序，&amp;nbsp;输出结果即可。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	编程如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;st[20],cs[5][20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,j,p;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;country&amp;nbsp;s&amp;nbsp;name:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;5;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(cs[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;5;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;p=i;strcpy(st,cs[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=i+1;j&amp;amp;lt;5;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(strcmp(cs[j],st)&amp;amp;lt;0)&amp;nbsp;{p=j;strcpy(st,cs[j]);}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(p!=i)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(st,cs[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(cs[i],cs[p]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(cs[p],st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	puts(cs[i]);}printf(\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;5;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;p=i;strcpy(st,cs[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(j=i+1;j&amp;amp;lt;5;j++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(strcmp(cs[j],st)&amp;amp;lt;0)&amp;nbsp;{&amp;nbsp;p=j;strcpy(st,cs[j]);}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(p!=i)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(st,cs[i]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(cs[i],cs[p]);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	strcpy(cs[p],st);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序的第一个for语句中，用gets函数输入五个国家名字符串。上面说过Ｃ语言允许把一个二维数组按多个一维数组处理，&amp;nbsp;本程序说明cs[5][20]为二维字符数组，可分为五个一维数组cs[0]，cs[1]，cs[2]，cs[3]，cs[4]。因此在gets函数中使用cs[i]是合法的。&amp;nbsp;在第二个for语句中又嵌套了一个for语句组成双重循环。&amp;nbsp;这个双重循环完成按字母顺序排序的工作。在外层循环中把字符数组cs[i]中的国名字符串拷贝到数组st中，并把下标i赋予P。&amp;nbsp;进入内层循环后，把st与cs[i]以后的各字符串作比较，若有比st小者则把该字符串拷贝到st中，并把其下标赋予p。内循环完成后如p不等于&amp;nbsp;i&amp;nbsp;说明有比cs[i]更小的字符串出现，因此交换cs[i]和st的内容。&amp;nbsp;至此已确定了数组cs的第i号元素的排序值。然后输出该字符串。在外循环全部完成之后即完成全部排序和输出。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本章小结
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.数组是程序设计中最常用的数据结构。数组可分为数值数组(整数组，实数组)，字符数组以及后面将要介绍的指针数组，结构数组等。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.数组可以是一维的，二维的或多维的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.数组类型说明由类型说明符、数组名、数组长度&amp;nbsp;(数组元素个数)三部分组成。数组元素又称为下标变量。&amp;nbsp;数组的类型是指下标变量取值的类型。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.对数组的赋值可以用数组初始化赋值，&amp;nbsp;输入函数动态赋值和赋值语句赋值三种方法实现。&amp;nbsp;对数值数组不能用赋值语句整体赋值、输入或输出，而必须用循环语句逐个对数组元素进行操作。
&amp;lt;/p&amp;gt;</content>
<json-link>./file/c/2012-06-26/1340713790.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
