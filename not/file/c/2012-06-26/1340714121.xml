<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>C语言教程：结构体与联合</title>
<content>&amp;lt;p&amp;gt;
	结构类型定义和结构变量说明
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在实际问题中，一组数据往往具有不同的数据类型。例如，&amp;nbsp;在学生登记表中，姓名应为字符型；学号可为整型或字符型；&amp;nbsp;年龄应为整型；性别应为字符型；成绩可为整型或实型。&amp;nbsp;显然不能用一个数组来存放这一组数据。&amp;nbsp;因为数组中各元素的类型和长度都必须一致，以便于编译系统处理。为了解决这个问题，Ｃ语言中给出了另一种构造数据类型——“结构”。&amp;nbsp;它相当于其它高级语言中的记录。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	“结构”是一种构造类型，它是由若干“成员”组成的。&amp;nbsp;每一个成员可以是一个基本数据类型或者又是一个构造类型。&amp;nbsp;结构既是一种“构造”而成的数据类型，&amp;nbsp;那么在说明和使用之前必须先定义它，也就是构造它。如同在说明和调用函数之前要先定义函数一样。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一、结构的定义
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	定义一个结构的一般形式为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;结构名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	成员表列
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	成员表由若干个成员组成，&amp;nbsp;每个成员都是该结构的一个组成部分。对每个成员也必须作类型说明，其形式为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	类型说明符&amp;nbsp;成员名;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	成员名的命名应符合标识符的书写规定。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在这个结构定义中，结构名为stu，该结构由4个成员组成。&amp;nbsp;第一个成员为num，整型变量；第二个成员为name，字符数组；第三个成员为sex，字符变量；第四个成员为score，实型变量。&amp;nbsp;应注意在括号后的分号是不可少的。结构定义之后，即可进行变量说明。&amp;nbsp;凡说明为结构stu的变量都由上述4个成员组成。由此可见，&amp;nbsp;结构是一种复杂的数据类型，是数目固定，类型不同的若干有序变量的集合。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二、结构类型变量的说明
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	说明结构变量有以下三种方法。以上面定义的stu为例来加以说明。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;先定义结构，再说明结构变量。如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	说明了两个变量boy1和boy2为stu结构类型。也可以用宏定义使一个符号常量来表示一个结构类型，例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;STU&amp;nbsp;struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	STU
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	STU&amp;nbsp;boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;在定义结构类型的同时说明结构变量。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;直接说明结构变量。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第三种方法与第二种方法的区别在于第三种方法中省去了结构名，而直接给出结构变量。三种方法中说明的boy1,boy2变量都具有图7.1所示的结构。说明了boy1,boy2变量为stu类型后，即可向这两个变量中的各个成员赋值。在上述stu结构定义中，所有的成员都是基本数据类型或数组类型。成员也可以又是一个结构，&amp;nbsp;即构成了嵌套的结构。例如，图7.2给出了另一个数据结构。&amp;nbsp;按图7.2可给出以下结构定义：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;date{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;month;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;day;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;year;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;date&amp;nbsp;birthday;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	首先定义一个结构date，由month(月)、day(日)、year(年)&amp;nbsp;三个成员组成。&amp;nbsp;在定义并说明变量&amp;nbsp;boy1&amp;nbsp;和&amp;nbsp;boy2&amp;nbsp;时，&amp;nbsp;其中的成员birthday被说明为data结构类型。成员名可与程序中其它变量同名，互不干扰。结构变量成员的表示方法在程序中使用结构变量时，&amp;nbsp;往往不把它作为一个整体来使用。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在ANSI&amp;nbsp;C中除了允许具有相同类型的结构变量相互赋值以外，&amp;nbsp;一般对结构变量的使用，包括赋值、输入、输出、&amp;nbsp;运算等都是通过结构变量的成员来实现的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	表示结构变量成员的一般形式是：&amp;nbsp;结构变量名.成员名&amp;nbsp;例如：boy1.num&amp;nbsp;即第一个人的学号　boy2.sex&amp;nbsp;即第二个人的性别&amp;nbsp;如果成员本身又是一个结构则必须逐级找到最低级的成员才能使用。例如：boy1.birthday.month&amp;nbsp;即第一个人出生的月份成员可以在程序中单独使用，与普通变量完全相同。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构变量的赋值
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	前面已经介绍，结构变量的赋值就是给各成员赋值。&amp;nbsp;可用输入语句或赋值语句来完成。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.1]给结构变量赋值并输出其值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main(){
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy1.num=102;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy1.name=Zhang&amp;nbsp;ping;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;sex&amp;nbsp;and&amp;nbsp;score\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%c&amp;nbsp;%f,&amp;amp;boy1.sex,&amp;amp;boy1.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy2=boy1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,boy2.num,boy2.name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n,boy2.sex,boy2.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy1,boy2;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy1.num=102;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy1.name=Zhang&amp;nbsp;ping;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;sex&amp;nbsp;and&amp;nbsp;score\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%c&amp;nbsp;%f,&amp;amp;boy1.sex,&amp;amp;boy1.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy2=boy1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,boy2.num,boy2.name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n,boy2.sex,boy2.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序中用赋值语句给num和name两个成员赋值，name是一个字符串指针变量。用scanf函数动态地输入sex和score成员值，然后把boy1的所有成员的值整体赋予boy2。最后分别输出boy2&amp;nbsp;的各个成员值。本例表示了结构变量的赋值、输入和输出的方法。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构变量的初始化
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	如果结构变量是全局变量或为静态变量，&amp;nbsp;则可对它作初始化赋值。对局部或自动结构变量不能作初始化赋值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.2]外部结构变量初始化。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;/*定义结构*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;boy2,boy1={102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,78.5};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy2=boy1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,boy2.num,boy2.name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n,boy2.sex,boy2.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy2,boy1={102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,78.5};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy2=boy1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	……
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例中，boy2,boy1均被定义为外部结构变量，并对boy1作了初始化赋值。在main函数中，把boy1的值整体赋予boy2，&amp;nbsp;然后用两个printf语句输出boy2各成员的值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.3]静态结构变量初始化。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;struct&amp;nbsp;stu&amp;nbsp;/*定义静态结构变量*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy2,boy1={102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,78.5};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	boy2=boy1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,boy2.num,boy2.name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n,boy2.sex,boy2.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	static&amp;nbsp;struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy2,boy1={102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,78.5};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例是把boy1，boy2都定义为静态局部的结构变量，&amp;nbsp;同样可以作初始化赋值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构数组
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	数组的元素也可以是结构类型的。&amp;nbsp;因此可以构成结构型数组。结构数组的每一个元素都是具有相同结构类型的下标结构变量。&amp;nbsp;在实际应用中，经常用结构数组来表示具有相同数据结构的一个群体。如一个班的学生档案，一个车间职工的工资表等。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构数组的定义方法和结构变量相似，只需说明它为数组类型即可。例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy[5];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	定义了一个结构数组boy1，共有5个元素，boy[0]～boy[4]。每个数组元素都具有struct&amp;nbsp;stu的结构形式。&amp;nbsp;对外部结构数组或静态结构数组可以作初始化赋值，例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy[5]={
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{101,Li&amp;nbsp;ping,M,45},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{102,Zhang&amp;nbsp;ping,M,62.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{103,He&amp;nbsp;fang,F,92.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{104,Cheng&amp;nbsp;ling,F,87},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{105,Wang&amp;nbsp;ming,M,58};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	当对全部元素作初始化赋值时，也可不给出数组长度。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.4]计算学生的平均成绩和不及格的人数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy[5]={
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{101,Li&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,45},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,62.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{103,He&amp;nbsp;fang,&amp;nbsp;F&amp;nbsp;,92.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{104,Cheng&amp;nbsp;ling,&amp;nbsp;F&amp;nbsp;,87},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{105,Wang&amp;nbsp;ming,&amp;nbsp;M&amp;nbsp;,58},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i,c=0;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;ave,s=0;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;5;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s+=boy[i].score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(boy[i].score&amp;amp;lt;60)&amp;nbsp;c+=1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(s=%f\n,s);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ave=s/5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(average=%f\ncount=%d\n,ave,c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例程序中定义了一个外部结构数组boy，共5个元素，&amp;nbsp;并作了初始化赋值。在main函数中用for语句逐个累加各元素的score&amp;nbsp;成员值存于s之中，如score的值小于60(不及格)即计数器C加1，&amp;nbsp;循环完毕后计算平均成绩，并输出全班总分，平均分及不及格人数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.5]建立同学通讯录
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#includestdio.h
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;NUM&amp;nbsp;3
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;mem
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[20];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;phone[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;mem&amp;nbsp;man[NUM];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;NUM;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;name:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(man[i].name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;phone:\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	gets(man[i].phone);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(name\t\t\tphone\n\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;NUM;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%s\t\t\t%s\n,man[i].name,man[i].phone);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序中定义了一个结构mem，它有两个成员name和phone&amp;nbsp;用来表示姓名和电话号码。在主函数中定义man为具有mem&amp;nbsp;类型的结构数组。在for语句中，用gets函数分别输入各个元素中两个成员的值。然后又在for语句中用printf语句输出各元素中两个成员值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构指针变量
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构指针变量的说明和使用一个指针变量当用来指向一个结构变量时，&amp;nbsp;称之为结构指针变量。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构指针变量中的值是所指向的结构变量的首地址。&amp;nbsp;通过结构指针即可访问该结构变量，&amp;nbsp;这与数组指针和函数指针的情况是相同的。结构指针变量说明的一般形式为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;结构名*结构指针变量名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如，在前面的例7.1中定义了stu这个结构，&amp;nbsp;如要说明一个指向stu的指针变量pstu，可写为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*pstu;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	当然也可在定义stu结构时同时说明pstu。与前面讨论的各类指针变量相同，结构指针变量也必须要先赋值后才能使用。赋值是把结构变量的首地址赋予该指针变量，&amp;nbsp;不能把结构名赋予该指针变量。如果boy是被说明为stu类型的结构变量，则：&amp;nbsp;pstu=&amp;amp;boy是正确的，而：&amp;nbsp;pstu=&amp;amp;stu是错误的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构名和结构变量是两个不同的概念，不能混淆。&amp;nbsp;结构名只能表示一个结构形式，编译系统并不对它分配内存空间。&amp;nbsp;只有当某变量被说明为这种类型的结构时，才对该变量分配存储空间。&amp;nbsp;因此上面&amp;amp;stu这种写法是错误的，不可能去取一个结构名的首地址。&amp;nbsp;有了结构指针变量，就能更方便地访问结构变量的各个成员。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	其访问的一般形式为：&amp;nbsp;(*结构指针变量).成员名&amp;nbsp;或为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构指针变量-&amp;amp;gt;成员名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：&amp;nbsp;(*pstu).num或者：&amp;nbsp;pstu-&amp;amp;gt;num
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	应该注意(*pstu)两侧的括号不可少，&amp;nbsp;因为成员符“.”的优先级高于“*”。如去掉括号写作*pstu.num则等效于*(pstu.num)，这样，意义就完全不对了。&amp;nbsp;下面通过例子来说明结构指针变量的具体说明和使用方法。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.6]
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;boy1={102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,78.5},*pstu;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pstu=&amp;amp;boy1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,boy1.num,boy1.name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n\n,boy1.sex,boy1.score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,(*pstu).num,(*pstu).name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n\n,(*pstu).sex,(*pstu).score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,pstu-&amp;amp;gt;num,pstu-&amp;amp;gt;name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n\n,pstu-&amp;amp;gt;sex,pstu-&amp;amp;gt;score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例程序定义了一个结构stu，定义了stu类型结构变量boy1&amp;nbsp;并作了初始化赋值，还定义了一个指向stu类型结构的指针变量pstu。在main函数中，pstu被赋予boy1的地址，因此pstu指向boy1&amp;nbsp;。然后在printf语句内用三种形式输出boy1的各个成员值。&amp;nbsp;从运行结果可以看出：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构变量.成员名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	(*结构指针变量).成员名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构指针变量-&amp;amp;gt;成员名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这三种用于表示结构成员的形式是完全等效的。结构数组指针变量结构指针变量可以指向一个结构数组，&amp;nbsp;这时结构指针变量的值是整个结构数组的首地址。&amp;nbsp;结构指针变量也可指向结构数组的一个元素，这时结构指针变量的值是该结构数组元素的首地址。设ps为指向结构数组的指针变量，则ps也指向该结构数组的0号元素，ps+1指向1号元素，ps+i则指向i号元素。&amp;nbsp;这与普通数组的情况是一致的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.7]用指针变量输出结构数组。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}boy[5]={
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{101,Zhou&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,45},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,62.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{103,Liou&amp;nbsp;fang,&amp;nbsp;F&amp;nbsp;,92.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{104,Cheng&amp;nbsp;ling,&amp;nbsp;F&amp;nbsp;,87},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{105,Wang&amp;nbsp;ming,&amp;nbsp;M&amp;nbsp;,58},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*ps;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(No\tName\t\t\tSex\tScore\t\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(ps=boy;ps&amp;amp;lt;boy+5;ps++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d\t%s\t\t%c\t%f\t\n,ps-&amp;amp;gt;num,ps-&amp;amp;gt;name,ps-&amp;amp;gt;sex,ps-&amp;amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在程序中，定义了stu结构类型的外部数组boy&amp;nbsp;并作了初始化赋值。在main函数内定义ps为指向stu类型的指针。在循环语句for的表达式1中，ps被赋予boy的首地址，然后循环5次，输出boy数组中各成员值。&amp;nbsp;应该注意的是，&amp;nbsp;一个结构指针变量虽然可以用来访问结构变量或结构数组元素的成员，但是，不能使它指向一个成员。&amp;nbsp;也就是说不允许取一个成员的地址来赋予它。因此，下面的赋值是错误的。&amp;nbsp;ps=&amp;amp;boy[1].sex;而只能是：ps=boy;(赋予数组首地址)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	或者是：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps=&amp;amp;boy[0];(赋予0号元素首地址)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	结构指针变量作函数参数
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在ANSI&amp;nbsp;C标准中允许用结构变量作函数参数进行整体传送。&amp;nbsp;但是这种传送要将全部成员逐个传送，&amp;nbsp;特别是成员为数组时将会使传送的时间和空间开销很大，严重地降低了程序的效率。&amp;nbsp;因此最好的办法就是使用指针，即用指针变量作函数参数进行传送。&amp;nbsp;这时由实参传向形参的只是地址，从而减少了时间和空间的开销。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.8]题目与例7.4相同，计算一组学生的平均成绩和不及格人数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	用结构指针变量作函数参数编程。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;}boy[5]={
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{101,Li&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,45},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{102,Zhang&amp;nbsp;ping,&amp;nbsp;M&amp;nbsp;,62.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{103,He&amp;nbsp;fang,&amp;nbsp;F&amp;nbsp;,92.5},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{104,Cheng&amp;nbsp;ling,&amp;nbsp;F&amp;nbsp;,87},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{105,Wang&amp;nbsp;ming,&amp;nbsp;M&amp;nbsp;,58},
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*ps;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;ave(struct&amp;nbsp;stu&amp;nbsp;*ps);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps=boy;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ave(ps);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;ave(struct&amp;nbsp;stu&amp;nbsp;*ps)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;c=0,i;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;ave,s=0;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;5;i++,ps++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	s+=ps-&amp;amp;gt;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(ps-&amp;amp;gt;score&amp;amp;lt;60)&amp;nbsp;c+=1;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(s=%f\n,s);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ave=s/5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(average=%f\ncount=%d\n,ave,c);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本程序中定义了函数ave，其形参为结构指针变量ps。boy&amp;nbsp;被定义为外部结构数组，因此在整个源程序中有效。在main&amp;nbsp;函数中定义说明了结构指针变量ps，并把boy的首地址赋予它，使ps指向boy&amp;nbsp;数组。然后以ps作实参调用函数ave。在函数ave&amp;nbsp;中完成计算平均成绩和统计不及格人数的工作并输出结果。与例7.4程序相比，由于本程序全部采用指针变量作运算和处理，故速度更快，程序效率更高。.
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	topoic=动态存储分配
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在数组一章中，曾介绍过数组的长度是预先定义好的，&amp;nbsp;在整个程序中固定不变。Ｃ语言中不允许动态数组类型。例如：&amp;nbsp;int&amp;nbsp;n;scanf(%d,&amp;amp;n);int&amp;nbsp;a[n];&amp;nbsp;用变量表示长度，想对数组的大小作动态说明，&amp;nbsp;这是错误的。但是在实际的编程中，往往会发生这种情况，&amp;nbsp;即所需的内存空间取决于实际输入的数据，而无法预先确定。对于这种问题，&amp;nbsp;用数组的办法很难解决。为了解决上述问题，Ｃ语言提供了一些内存管理函数，这些内存管理函数可以按需要动态地分配内存空间，&amp;nbsp;也可把不再使用的空间回收待用，为有效地利用内存资源提供了手段。&amp;nbsp;常用的内存管理函数有以下三个：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.分配内存空间函数malloc
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	调用形式：&amp;nbsp;(类型说明符*)&amp;nbsp;malloc&amp;nbsp;(size)&amp;nbsp;功能：在内存的动态存储区中分配一块长度为size&amp;nbsp;字节的连续区域。函数的返回值为该区域的首地址。&amp;nbsp;“类型说明符”表示把该区域用于何种数据类型。(类型说明符*)表示把返回值强制转换为该类型指针。“size”是一个无符号数。例如：&amp;nbsp;pc=(char&amp;nbsp;*)&amp;nbsp;malloc&amp;nbsp;(100);&amp;nbsp;表示分配100个字节的内存空间，并强制转换为字符数组类型，&amp;nbsp;函数的返回值为指向该字符数组的指针，&amp;nbsp;把该指针赋予指针变量pc。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.分配内存空间函数&amp;nbsp;calloc
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	calloc&amp;nbsp;也用于分配内存空间。调用形式：&amp;nbsp;(类型说明符*)calloc(n,size)&amp;nbsp;功能：在内存动态存储区中分配n块长度为“size”字节的连续区域。函数的返回值为该区域的首地址。(类型说明符*)用于强制类型转换。calloc函数与malloc&amp;nbsp;函数的区别仅在于一次可以分配n块区域。例如：&amp;nbsp;ps=(struet&amp;nbsp;stu*)&amp;nbsp;calloc(2,sizeof&amp;nbsp;(struct&amp;nbsp;stu));&amp;nbsp;其中的sizeof(struct&amp;nbsp;stu)是求stu的结构长度。因此该语句的意思是：按stu的长度分配2块连续区域，强制转换为stu类型，并把其首地址赋予指针变量ps。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.释放内存空间函数free
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	调用形式：&amp;nbsp;free(void*ptr);&amp;nbsp;功能：释放ptr所指向的一块内存空间，ptr&amp;nbsp;是一个任意类型的指针变量，它指向被释放区域的首地址。被释放区应是由malloc或calloc函数所分配的区域：[例7.9]分配一块区域，输入一个学生数据。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;*name;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;sex;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	float&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;*ps;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps=(struct&amp;nbsp;stu*)malloc(sizeof(struct&amp;nbsp;stu));
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;num=102;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;name=Zhang&amp;nbsp;ping;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;sex=&amp;nbsp;M&amp;nbsp;;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	ps-&amp;amp;gt;score=62.5;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number=%d\nName=%s\n,ps-&amp;amp;gt;num,ps-&amp;amp;gt;name);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Sex=%c\nScore=%f\n,ps-&amp;amp;gt;sex,ps-&amp;amp;gt;score);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	free(ps);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例中，定义了结构stu，定义了stu类型指针变量ps。&amp;nbsp;然后分配一块stu大内存区，并把首地址赋予ps，使ps指向该区域。再以ps为指向结构的指针变量对各成员赋值，并用printf&amp;nbsp;输出各成员值。最后用free函数释放ps指向的内存空间。&amp;nbsp;整个程序包含了申请内存空间、使用内存空间、释放内存空间三个步骤，&amp;nbsp;实现存储空间的动态分配。链表的概念在例7.9中采用了动态分配的办法为一个结构分配内存空间。每一次分配一块空间可用来存放一个学生的数据，&amp;nbsp;我们可称之为一个结点。有多少个学生就应该申请分配多少块内存空间，&amp;nbsp;也就是说要建立多少个结点。当然用结构数组也可以完成上述工作，&amp;nbsp;但如果预先不能准确把握学生人数，也就无法确定数组大小。&amp;nbsp;而且当学生留级、退学之后也不能把该元素占用的空间从数组中释放出来。&amp;nbsp;用动态存储的方法可以很好地解决这些问题。&amp;nbsp;有一个学生就分配一个结点，无须预先确定学生的准确人数，某学生退学，&amp;nbsp;可删去该结点，并释放该结点占用的存储空间。从而节约了宝贵的内存资源。&amp;nbsp;另一方面，用数组的方法必须占用一块连续的内存区域。&amp;nbsp;而使用动态分配时，每个结点之间可以是不连续的(结点内是连续的)。&amp;nbsp;结点之间的联系可以用指针实现。&amp;nbsp;即在结点结构中定义一个成员项用来存放下一结点的首地址，这个用于存放地址的成员，常把它称为指针域。可在第一个结点的指针域内存入第二个结点的首地址，&amp;nbsp;在第二个结点的指针域内又存放第三个结点的首地址，&amp;nbsp;如此串连下去直到最后一个结点。最后一个结点因无后续结点连接，其指针域可赋为0。这样一种连接方式，在数据结构中称为“链表”。图7.3为链表的示意图。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在图7.3中，第0个结点称为头结点，&amp;nbsp;它存放有第一个结点的首地址，它没有数据，只是一个指针变量。&amp;nbsp;以下的每个结点都分为两个域，一个是数据域，存放各种实际的数据，如学号num，姓名name，性别sex和成绩score等。另一个域为指针域，&amp;nbsp;存放下一结点的首地址。链表中的每一个结点都是同一种结构类型。例如，&amp;nbsp;一个存放学生学号和成绩的结点应为以下结构：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;score;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	前两个成员项组成数据域，后一个成员项next构成指针域，&amp;nbsp;它是一个指向stu类型结构的指针变量。链表的基本操作对链表的主要操作有以下几种：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.建立链表；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.结构的查找与输出；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.插入一个结点；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.删除一个结点；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	下面通过例题来说明这些操作。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.10]建立一个三个结点的链表，存放学生数据。&amp;nbsp;为简单起见，&amp;nbsp;我们假定学生数据结构中只有学号和年龄两项。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	可编写一个建立链表的函数creat。程序如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;NULL&amp;nbsp;0
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;TYPE&amp;nbsp;struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;LEN&amp;nbsp;sizeof&amp;nbsp;(struct&amp;nbsp;stu)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;age;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*creat(int&amp;nbsp;n)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*head,*pf,*pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;n;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=(TYPE*)&amp;nbsp;malloc(LEN);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;Number&amp;nbsp;and&amp;nbsp;Age\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d%d,&amp;amp;pb-&amp;amp;gt;num,&amp;amp;pb-&amp;amp;gt;age);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(i==0)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pf=head=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else&amp;nbsp;pf-&amp;amp;gt;next=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb-&amp;amp;gt;next=NULL;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pf=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return(head);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在函数外首先用宏定义对三个符号常量作了定义。这里用TYPE表示struct&amp;nbsp;stu，用LEN表示sizeof(struct&amp;nbsp;stu)主要的目的是为了在以下程序内减少书写并使阅读更加方便。结构stu定义为外部类型，程序中的各个函数均可使用该定义。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	creat函数用于建立一个有n个结点的链表，它是一个指针函数，它返回的指针指向stu结构。在creat函数内定义了三个stu结构的指针变量。head为头指针，pf&amp;nbsp;为指向两相邻结点的前一结点的指针变量。pb为后一结点的指针变量。在for语句内，用malloc函数建立长度与stu长度相等的空间作为一结点，首地址赋予pb。然后输入结点数据。如果当前结点为第一结点(i==0)，则把pb值&amp;nbsp;(该结点指针)赋予head和pf。如非第一结点，则把pb值赋予pf&amp;nbsp;所指结点的指针域成员next。而pb所指结点为当前的最后结点，其指针域赋NULL。&amp;nbsp;再把pb值赋予pf以作下一次循环准备。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	creat函数的形参n，表示所建链表的结点数，作为for语句的循环次数。图7.4表示了creat函数的执行过程。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.11]写一个函数，在链表中按学号查找该结点。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*&amp;nbsp;search&amp;nbsp;(TYPE&amp;nbsp;*head,int&amp;nbsp;n)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*p;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	p=head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while&amp;nbsp;(p-&amp;amp;gt;num!=n&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;p-&amp;amp;gt;next!=NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	p=p-&amp;amp;gt;next;&amp;nbsp;/*&amp;nbsp;不是要找的结点后移一步*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if&amp;nbsp;(p-&amp;amp;gt;num==n)&amp;nbsp;return&amp;nbsp;(p);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if&amp;nbsp;(p-&amp;amp;gt;num!=n&amp;amp;&amp;amp;&amp;nbsp;p-&amp;amp;gt;next==NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf&amp;nbsp;(Node&amp;nbsp;%d&amp;nbsp;has&amp;nbsp;not&amp;nbsp;been&amp;nbsp;found!\n,n
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本函数中使用的符号常量TYPE与例7.10的宏定义相同，等于struct　stu。函数有两个形参，head是指向链表的指针变量，n为要查找的学号。进入while语句，逐个检查结点的num成员是否等于n，如果不等于n且指针域不等于NULL(不是最后结点)则后移一个结点，继续循环。如找到该结点则返回结点指针。&amp;nbsp;如循环结束仍未找到该结点则输出“未找到”的提示信息。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.12]写一个函数，删除链表中的指定结点。删除一个结点有两种情况：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;被删除结点是第一个结点。这种情况只需使head指向第二个结点即可。即head=pb-&amp;amp;gt;next。其过程如图7.5所示。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;被删结点不是第一个结点，这种情况使被删结点的前一结点指向被删结点的后一结点即可。即pf-&amp;amp;gt;next=pb-&amp;amp;gt;next。其过程如图7.6所示。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	函数编程如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*&amp;nbsp;delete(TYPE&amp;nbsp;*&amp;nbsp;head,int&amp;nbsp;num)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*pf,*pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(head==NULL)&amp;nbsp;/*如为空表，&amp;nbsp;输出提示信息*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;printf(\nempty&amp;nbsp;list!\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	goto&amp;nbsp;end;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while&amp;nbsp;(pb-&amp;amp;gt;num!=num&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;pb-&amp;amp;gt;next!=NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	/*当不是要删除的结点，而且也不是最后一个结点时，继续循环*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{pf=pb;pb=pb-&amp;amp;gt;next;}/*pf指向当前结点，pb指向下一结点*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(pb-&amp;amp;gt;num==num)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{if(pb==head)&amp;nbsp;head=pb-&amp;amp;gt;next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	/*如找到被删结点，且为第一结点，则使head指向第二个结点，
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	否则使pf所指结点的指针指向下一结点*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else&amp;nbsp;pf-&amp;amp;gt;next=pb-&amp;amp;gt;next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	free(pb);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(The&amp;nbsp;node&amp;nbsp;is&amp;nbsp;deleted\n);}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(The&amp;nbsp;node&amp;nbsp;not&amp;nbsp;been&amp;nbsp;foud!\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	end:
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return&amp;nbsp;head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	函数有两个形参，head为指向链表第一结点的指针变量，num删结点的学号。&amp;nbsp;首先判断链表是否为空，为空则不可能有被删结点。若不为空，则使pb指针指向链表的第一个结点。进入while语句后逐个查找被删结点。找到被删结点之后再看是否为第一结点，若是则使head指向第二结点(即把第一结点从链中删去)，否则使被删结点的前一结点(pf所指)指向被删结点的后一结点(被删结点的指针域所指)。如若循环结束未找到要删的结点，&amp;nbsp;则输出“末找到”的提示信息。最后返回head值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.13]写一个函数，在链表中指定位置插入一个结点。在一个链表的指定位置插入结点，&amp;nbsp;要求链表本身必须是已按某种规律排好序的。例如，在学生数据链表中，&amp;nbsp;要求学号顺序插入一个结点。设被插结点的指针为pi。&amp;nbsp;可在三种不同情况下插入。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;原表是空表，只需使head指向被插结点即可。见图7.7(a)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.&amp;nbsp;被插结点值最小，应插入第一结点之前。这种情况下使head指向被插结点，被插结点的指针域指向原来的第一结点则可。即：pi-&amp;amp;gt;next=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	head=pi;&amp;nbsp;见图7.7(b)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;在其它位置插入，见图7.7(c)。这种情况下，使插入位置的前一结点的指针域指向被插结点，使被插结点的指针域指向插入位置的后一结点。即为：pi-&amp;amp;gt;next=pb;pf-&amp;amp;gt;next=pi；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.&amp;nbsp;在表末插入，见图7.7(d)。这种情况下使原表末结点指针域指向被插结点，被插结点指针域置为NULL。即：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb-&amp;amp;gt;next=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=NULL；&amp;nbsp;TYPE&amp;nbsp;*&amp;nbsp;insert(TYPE&amp;nbsp;*&amp;nbsp;head,TYPE&amp;nbsp;*pi)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*pf,*pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(head==NULL)&amp;nbsp;/*空表插入*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	(head=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=NULL;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while((pi-&amp;amp;gt;num&amp;amp;gt;pb-&amp;amp;gt;num)&amp;amp;&amp;amp;(pb-&amp;amp;gt;next!=NULL))
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{pf=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=pb-&amp;amp;gt;next;&amp;nbsp;}/*找插入位置*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(pi-&amp;amp;gt;num&amp;amp;lt;=pb-&amp;amp;gt;num)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{if(head==pb)head=pi;/*在第一结点之前插入*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else&amp;nbsp;pf-&amp;amp;gt;next=pi;/*在其它位置插入*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=pb;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{pb-&amp;amp;gt;next=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=NULL;}&amp;nbsp;/*在表末插入*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return&amp;nbsp;head;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本函数有两个形参均为指针变量，head指向链表，pi&amp;nbsp;指向被插结点。函数中首先判断链表是否为空，为空则使head指向被插结点。表若不空，则用while语句循环查找插入位置。找到之后再判断是否在第一结点之前插入，若是则使head&amp;nbsp;指向被插结点被插结点指针域指向原第一结点，否则在其它位置插入，&amp;nbsp;若插入的结点大于表中所有结点，则在表末插入。本函数返回一个指针，&amp;nbsp;是链表的头指针。&amp;nbsp;当插入的位置在第一个结点之前时，&amp;nbsp;插入的新结点成为链表的第一个结点，因此head的值也有了改变，&amp;nbsp;故需要把这个指针返回主调函数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.14]将以上建立链表，删除结点，插入结点的函数组织在一起，再建一个输出全部结点的函数，然后用main函数调用它们。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;NULL&amp;nbsp;0
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;TYPE&amp;nbsp;struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	#define&amp;nbsp;LEN&amp;nbsp;sizeof(struct&amp;nbsp;stu)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;age;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*&amp;nbsp;creat(int&amp;nbsp;n)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct&amp;nbsp;stu&amp;nbsp;*head,*pf,*pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;i;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;n;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=(TYPE&amp;nbsp;*)malloc(LEN);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;Number&amp;nbsp;and&amp;nbsp;Age\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d%d,&amp;amp;pb-&amp;amp;gt;num,&amp;amp;pb-&amp;amp;gt;age);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(i==0)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pf=head=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else&amp;nbsp;pf-&amp;amp;gt;next=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb-&amp;amp;gt;next=NULL;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pf=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return(head);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*&amp;nbsp;delete(TYPE&amp;nbsp;*&amp;nbsp;head,int&amp;nbsp;num)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*pf,*pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(head==NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;printf(\nempty&amp;nbsp;list!\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	goto&amp;nbsp;end;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while&amp;nbsp;(pb-&amp;amp;gt;num!=num&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;pb-&amp;amp;gt;next!=NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{pf=pb;pb=pb-&amp;amp;gt;next;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(pb-&amp;amp;gt;num==num)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;if(pb==head)&amp;nbsp;head=pb-&amp;amp;gt;next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else&amp;nbsp;pf-&amp;amp;gt;next=pb-&amp;amp;gt;next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(The&amp;nbsp;node&amp;nbsp;is&amp;nbsp;deleted\n);&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	free(pb);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(The&amp;nbsp;node&amp;nbsp;not&amp;nbsp;been&amp;nbsp;found!\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	end:
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return&amp;nbsp;head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*&amp;nbsp;insert(TYPE&amp;nbsp;*&amp;nbsp;head,TYPE&amp;nbsp;*&amp;nbsp;pi)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*pb&amp;nbsp;,*pf;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(head==NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;head=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=NULL;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while((pi-&amp;amp;gt;num&amp;amp;gt;pb-&amp;amp;gt;num)&amp;amp;&amp;amp;(pb-&amp;amp;gt;next!=NULL))
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;pf=pb;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pb=pb-&amp;amp;gt;next;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(pi-&amp;amp;gt;num&amp;amp;lt;=pb-&amp;amp;gt;num)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;if(head==pb)&amp;nbsp;head=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else&amp;nbsp;pf-&amp;amp;gt;next=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=pb;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;pb-&amp;amp;gt;next=pi;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pi-&amp;amp;gt;next=NULL;&amp;nbsp;}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	return&amp;nbsp;head;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;print(TYPE&amp;nbsp;*&amp;nbsp;head)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Number\t\tAge\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	while(head!=NULL)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%d\t\t%d\n,head-&amp;amp;gt;num,head-&amp;amp;gt;age);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	head=head-&amp;amp;gt;next;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	TYPE&amp;nbsp;*&amp;nbsp;head,*pnum;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;n,num;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;number&amp;nbsp;of&amp;nbsp;node:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	head=creat(n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	print(head);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Input&amp;nbsp;the&amp;nbsp;deleted&amp;nbsp;number:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;num);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	head=delete(head,num);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	print(head);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(Input&amp;nbsp;the&amp;nbsp;inserted&amp;nbsp;number&amp;nbsp;and&amp;nbsp;age:&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	pnum=(TYPE&amp;nbsp;*)malloc(LEN);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d%d,&amp;amp;pnum-&amp;amp;gt;num,&amp;amp;pnum-&amp;amp;gt;age);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	head=insert(head,pnum);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	print(head);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例中，print函数用于输出链表中各个结点数据域值。函数的形参head的初值指向链表第一个结点。在while语句中，输出结点值后，head值被改变，指向下一结点。若保留头指针head，&amp;nbsp;则应另设一个指针变量，把head值赋予它，再用它来替代head。在main函数中，n为建立结点的数目，&amp;nbsp;num为待删结点的数据域值；head为指向链表的头指针，pnum为指向待插结点的指针。&amp;nbsp;main函数中各行的意义是：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第六行输入所建链表的结点数；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第七行调creat函数建立链表并把头指针返回给head；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第八行调print函数输出链表；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十行输入待删结点的学号；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十一行调delete函数删除一个结点；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十二行调print函数输出链表；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十四行调malloc函数分配一个结点的内存空间，&amp;nbsp;并把其地址赋予pnum;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十五行输入待插入结点的数据域值；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十六行调insert函数插入pnum所指的结点；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	第十七行再次调print函数输出链表。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	从运行结果看，首先建立起3个结点的链表，并输出其值；再删103号结点，只剩下105，108号结点；又输入106号结点数据，&amp;nbsp;插入后链表中的结点为105，106，108。联合“联合”也是一种构造类型的数据结构。&amp;nbsp;在一个“联合”内可以定义多种不同的数据类型，&amp;nbsp;一个被说明为该“联合”类型的变量中，允许装入该“联合”所定义的任何一种数据。&amp;nbsp;这在前面的各种数据类型中都是办不到的。例如，&amp;nbsp;定义为整型的变量只能装入整型数据，定义为实型的变量只能赋予实型数据。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在实际问题中有很多这样的例子。&amp;nbsp;例如在学校的教师和学生中填写以下表格：&amp;nbsp;姓&amp;nbsp;名&amp;nbsp;年&amp;nbsp;龄&amp;nbsp;职&amp;nbsp;业&amp;nbsp;单位&amp;nbsp;“职业”一项可分为“教师”和“学生”两类。&amp;nbsp;对“单位”一项学生应填入班级编号，教师应填入某系某教研室。&amp;nbsp;班级可用整型量表示，教研室只能用字符类型。&amp;nbsp;要求把这两种类型不同的数据都填入“单位”这个变量中，&amp;nbsp;就必须把“单位”定义为包含整型和字符型数组这两种类型的“联合”。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	“联合”与“结构”有一些相似之处。但两者有本质上的不同。在结构中各成员有各自的内存空间，&amp;nbsp;一个结构变量的总长度是各成员长度之和。而在“联合”中，各成员共享一段内存空间，&amp;nbsp;一个联合变量的长度等于各成员中最长的长度。应该说明的是，&amp;nbsp;这里所谓的共享不是指把多个成员同时装入一个联合变量内，&amp;nbsp;而是指该联合变量可被赋予任一成员值，但每次只能赋一种值，&amp;nbsp;赋入新值则冲去旧值。如前面介绍的“单位”变量，&amp;nbsp;如定义为一个可装入“班级”或“教研室”的联合后，就允许赋予整型值（班级)或字符串（教研室)。要么赋予整型值，要么赋予字符串，不能把两者同时赋予它。联合类型的定义和联合变量的说明一个联合类型必须经过定义之后，&amp;nbsp;才能把变量说明为该联合类型。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	一、联合的定义
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	定义一个联合类型的一般形式为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	union&amp;nbsp;联合名
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	成员表
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	成员表中含有若干成员，成员的一般形式为：&amp;nbsp;类型说明符&amp;nbsp;成员名&amp;nbsp;成员名的命名应符合标识符的规定。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	union&amp;nbsp;perdata
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;class;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;office[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	定义了一个名为perdata的联合类型，它含有两个成员，一个为整型，成员名为class；另一个为字符数组，数组名为office。联合定义之后，即可进行联合变量说明，被说明为perdata类型的变量，可以存放整型量class或存放字符数组office。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	二、联合变量的说明
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	联合变量的说明和结构变量的说明方式相同，&amp;nbsp;也有三种形式。即先定义，再说明；定义同时说明和直接说明。以perdata类型为例，说明如下：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	union&amp;nbsp;perdata
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;class;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;officae[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	};
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	union&amp;nbsp;perdata&amp;nbsp;a,b;&amp;nbsp;/*说明a,b为perdata类型*/
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	或者可同时说明为：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	union&amp;nbsp;perdata
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;int&amp;nbsp;class;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;office[10];&amp;nbsp;}a,b;或直接说明为：&amp;nbsp;union
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{&amp;nbsp;int&amp;nbsp;class;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;office[10];&amp;nbsp;}a,b
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	经说明后的a,b变量均为perdata类型。&amp;nbsp;它们的内存分配示意图如图7—8所示。a,b变量的长度应等于&amp;nbsp;perdata&amp;nbsp;的成员中最长的长度，&amp;nbsp;即等于
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	office数组的长度，共10个字节。从图中可见，a,b变量如赋予整型值时，只使用了2个字节，而赋予字符数组时，可用10个字节。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	联合变量的赋值和使用
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	对联合变量的赋值，使用都只能是对变量的成员进行。&amp;nbsp;联合变量的成员表示为：&amp;nbsp;联合变量名.成员名&amp;nbsp;例如，a被说明为perdata类型的变量之后，可使用&amp;nbsp;a.class　a.office&amp;nbsp;不允许只用联合变量名作赋值或其它操作。&amp;nbsp;也不允许对联合变量作初始化赋值，赋值只能在程序中进行。还要再强调说明的是，一个联合变量，&amp;nbsp;每次只能赋予一个成员值。换句话说，一个联合变量的值就是联合变员的某一个成员值。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	[例7.15]设有一个教师与学生通用的表格，教师数据有姓名，年龄，职业，教研室四项。学生有姓名，年龄，职业，班级四项。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	编程输入人员数据，&amp;nbsp;再以表格输出。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	main()
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	struct
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;name[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;age;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;job;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	union
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;class;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	char&amp;nbsp;office[10];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}&amp;nbsp;depa;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}body[2];
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	int&amp;nbsp;n,i;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;2;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(input&amp;nbsp;name,age,job&amp;nbsp;and&amp;nbsp;department\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%s&amp;nbsp;%d&amp;nbsp;%c,body[i].name,&amp;amp;body[i].age,&amp;amp;body[i].job);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(body[i].job==&amp;nbsp;s&amp;nbsp;)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%d,&amp;amp;body[i].depa.class);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	scanf(%s,body[i].depa.office);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(name\tage&amp;nbsp;job&amp;nbsp;class/office\n);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	for(i=0;i&amp;amp;lt;2;i++)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	{
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	if(body[i].job==&amp;nbsp;s&amp;nbsp;)
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%s\t%3d&amp;nbsp;%3c&amp;nbsp;%d\n,body[i].name,body[i].age
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	,body[i].job,body[i].depa.class);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	else
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	printf(%s\t%3d&amp;nbsp;%3c&amp;nbsp;%s\n,body[i].name,body[i].age,
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	body[i].job,body[i].depa.office);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	}
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本例程序用一个结构数组body来存放人员数据，&amp;nbsp;该结构共有四个成员。其中成员项depa是一个联合类型，&amp;nbsp;这个联合又由两个成员组成，一个为整型量class，一个为字符数组office。在程序的第一个for语句中，输入人员的各项数据，先输入结构的前三个成员name,age和job，然后判别job成员项，如为s则对联合depa·class输入(对学生赋班级编号)否则对depa·office输入(对教师赋教研组名)。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在用scanf语句输入时要注意，凡为数组类型的成员，无论是结构成员还是联合成员，在该项前不能再加&amp;amp;运算符。如程序第18行中
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	body[i].name是一个数组类型，第22行中的body[i].depa.office也是数组类型，因此在这两项之间不能加&amp;amp;运算符。程序中的第二个for语句用于输出各成员项的值：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	本章小结
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	1.&amp;nbsp;结构和联合是两种构造类型数据，是用户定义新数据类型的重要手段。结构和联合有很多的相似之处，它们都由成员组成。成员可以具有不同的数据类型。成员的表示方法相同。都可用三种方式作变量说明。&amp;nbsp;2.&amp;nbsp;在结构中，各成员都占有自己的内存空间，它们是同时存在的。一个结构变量的总长度等于所有成员长度之和。在联合中，所有成员不能同时占用它的内存空间，它们不能同时存在。联合变量的长度等于最长的成员的长度。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	3.&amp;nbsp;“.”是成员运算符，可用它表示成员项，成员还可用“-&amp;amp;gt;”运算符来表示。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.&amp;nbsp;结构变量可以作为函数参数，函数也可返回指向结构的指针变量。而联合变量不能作为函数参数，函数也不能返回指向联合的指针变量。但可以使用指向联合变量的指针，也可使用联合数组。&amp;nbsp;5.&amp;nbsp;结构定义允许嵌套，结构中也可用联合作为成员，形成结构和联合的嵌套。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	6.&amp;nbsp;链表是一种重要的数据结构，它便于实现动态的存储分配。本章介绍是单向链表，还可组成双向链表，循环链表等
&amp;lt;/p&amp;gt;</content>
<json-link>./file/c/2012-06-26/1340714121.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
