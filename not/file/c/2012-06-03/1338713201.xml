<?xml version="1.0" encoding="UTF-8"?>
<root>
<title>void及void指针深层探索</title>
<content>&amp;lt;p&amp;gt;
	1.概述
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	许多初学者对C/C++语言中的void及void指针类型不甚理解，因此在使用上出现了一些错误。本文将对void关键字的深刻含义进行解说，并详述void及void指针类型的使用方法与技巧。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2.void的含义
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void的字面意思是“无类型”，void&amp;nbsp;*则为“无类型指针”，void&amp;nbsp;*可以指向任何类型的数据。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void几乎只有“注释”和限制程序的作用，因为从来没有人会定义一个void变量，让我们试着来定义：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;a;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这行语句编译时会出错，提示“illegal&amp;nbsp;use&amp;nbsp;of&amp;nbsp;type&amp;nbsp;&amp;nbsp;void&amp;nbsp;”。不过，即使void&amp;nbsp;a的编译不会出错，它也没有任何实际意义。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void真正发挥的作用在于：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	（1）&amp;nbsp;对函数返回的限定；
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	（2）&amp;nbsp;对函数参数的限定。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我们将在第三节对以上二点进行具体说明。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	众所周知，如果指针p1和p2的类型相同，那么我们可以直接在p1和p2间互相赋值；如果p1和p2指向不同的数据类型，则必须使用强制类型转换运算符把赋值运算符右边的指针类型转换为左边指针的类型。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	例如：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;float&amp;nbsp;*p1;
int&amp;nbsp;*p2;
p1&amp;nbsp;=&amp;nbsp;p2;
其中p1&amp;nbsp;=&amp;nbsp;p2语句会编译出错，提示“&amp;nbsp;=&amp;nbsp;&amp;nbsp;:&amp;nbsp;cannot&amp;nbsp;convert&amp;nbsp;from&amp;nbsp;&amp;nbsp;int&amp;nbsp;*&amp;nbsp;&amp;nbsp;to&amp;nbsp;&amp;nbsp;float&amp;nbsp;*&amp;nbsp;”，必须改为：
p1&amp;nbsp;=&amp;nbsp;(float&amp;nbsp;*)p2;
而void&amp;nbsp;*则不同，任何类型的指针都可以直接赋值给它，无需进行强制类型转换：
void&amp;nbsp;*p1;
int&amp;nbsp;*p2;
p1&amp;nbsp;=&amp;nbsp;p2;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	但这并不意味着，void&amp;nbsp;*也可以无需强制类型转换地赋给其它类型的指针。因为“无类型”可以包容“有类型”，而“有类型”则不能包容“无类型”。道理很简单，我们可以说“男人和女人都是人”，但不能说“人是男人”或者“人是女人”。下面的语句编译出错：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;void&amp;nbsp;*p1;
int&amp;nbsp;*p2;
p2&amp;nbsp;=&amp;nbsp;p1;
提示“&amp;nbsp;=&amp;nbsp;&amp;nbsp;:&amp;nbsp;cannot&amp;nbsp;convert&amp;nbsp;from&amp;nbsp;&amp;nbsp;void&amp;nbsp;*&amp;nbsp;&amp;nbsp;to&amp;nbsp;&amp;nbsp;int&amp;nbsp;*&amp;nbsp;”。&amp;lt;/pre&amp;gt;
3.void的使用
&amp;lt;p&amp;gt;
	下面给出void关键字的使用规则：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;nbsp;style=\"text-align:center;\"&amp;gt;
	&amp;lt;strong&amp;gt;规则一&amp;nbsp;如果函数没有返回值，那么应声明为void类型&amp;lt;/strong&amp;gt;&amp;nbsp;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;nbsp;style=\"text-align:center;\"&amp;gt;
	&amp;lt;strong&amp;gt;&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/strong&amp;gt;&amp;nbsp;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在C语言中，凡不加返回值类型限定的函数，就会被编译器作为返回整型值处理。但是许多程序员却误以为其为void类型。例如：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;add&amp;nbsp;(&amp;nbsp;int&amp;nbsp;a,&amp;nbsp;int&amp;nbsp;b&amp;nbsp;)
{
return&amp;nbsp;a&amp;nbsp;+&amp;nbsp;b;
}
int&amp;nbsp;main(int&amp;nbsp;argc,&amp;nbsp;char*&amp;nbsp;argv[])
{
printf&amp;nbsp;(&amp;nbsp;2&amp;nbsp;+&amp;nbsp;3&amp;nbsp;=&amp;nbsp;%d,&amp;nbsp;add&amp;nbsp;(&amp;nbsp;2,&amp;nbsp;3)&amp;nbsp;);
}&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	程序运行的结果为输出：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	2&amp;nbsp;+&amp;nbsp;3&amp;nbsp;=&amp;nbsp;5
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这说明不加返回值说明的函数的确为int函数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	林锐博士《高质量C/C++编程》中提到：“C++语言有很严格的类型安全检查，不允许上述情况（指函数不加类型声明）发生”。可是编译器并不一定这么认定，譬如在Visual&amp;nbsp;C++6.0中上述add函数的编译无错也无警告且运行正确，所以不能寄希望于编译器会做严格的类型检查。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	因此，为了避免混乱，我们在编写C/C++程序时，对于任何函数都必须一个不漏地指定其类型。如果函数没有返回值，一定要声明为void类型。这既是程序良好可读性的需要，也是编程规范性的要求。另外，加上void类型声明后，也可以发挥代码的“自注释”作用。代码的“自注释”即代码能自己注释自己。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;nbsp;style=\"text-align:center;\"&amp;gt;
	&amp;lt;strong&amp;gt;规则二&amp;nbsp;如果函数无参数，那么应声明其参数为void&amp;lt;/strong&amp;gt;&amp;nbsp;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	在C++语言中声明一个这样的函数：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;int&amp;nbsp;function(void){
return&amp;nbsp;1;
}&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	则进行下面的调用是不合法的：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	function(2);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	因为在C++中，函数参数为void的意思是这个函数不接受任何参数。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	我们在Turbo&amp;nbsp;C&amp;nbsp;2.0中编译：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;#include&amp;nbsp;stdio.h
fun(){
	return&amp;nbsp;1;
}
main(){
	printf(%d,fun(2));
	getchar();
}&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	编译正确且输出1，这说明，在C语言中，可以给无参数的函数传送任意类型的参数，但是在C++编译器中编译同样的代码则会出错。在C++中，不能向无参数的函数传送任何参数，出错提示“&amp;nbsp;fun&amp;nbsp;&amp;nbsp;:&amp;nbsp;function&amp;nbsp;does&amp;nbsp;not&amp;nbsp;take&amp;nbsp;1&amp;nbsp;parameters”。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	所以，无论在C还是C++中，若函数不接受任何参数，一定要指明参数为void。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;nbsp;style=\"text-align:center;\"&amp;gt;
	&amp;lt;strong&amp;gt;规则三&amp;nbsp;小心使用void指针类型&amp;lt;/strong&amp;gt;&amp;nbsp;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	按照ANSI(American&amp;nbsp;National&amp;nbsp;Standards&amp;nbsp;Institute)标准，不能对void指针进行算法操作，即下列操作都是不合法的：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;void&amp;nbsp;*&amp;nbsp;pvoid;
pvoid++;&amp;nbsp;//ANSI：错误
pvoid&amp;nbsp;+=&amp;nbsp;1;&amp;nbsp;//ANSI：错误&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	//ANSI标准之所以这样认定，是因为它坚持：进行算法操作的指针必须是确定知道其指向数据类型大小的。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	//例如：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;int&amp;nbsp;*pint;
pint++;&amp;nbsp;//ANSI：正确
pint++的结果是使其增大sizeof(int)。
但是大名鼎鼎的GNU(GNU&amp;nbsp;s&amp;nbsp;Not&amp;nbsp;Unix的缩写)则不这么认定，它指定void&amp;nbsp;*的算法操作与char&amp;nbsp;*一致。
因此下列语句在GNU编译器中皆正确：
pvoid++;&amp;nbsp;//GNU：正确
pvoid&amp;nbsp;+=&amp;nbsp;1;&amp;nbsp;//GNU：正确
pvoid++的执行结果是其增大了1。
在实际的程序设计中，为迎合ANSI标准，并提高程序的可移植性，我们可以这样编写实现同样功能的代码：
void&amp;nbsp;*&amp;nbsp;pvoid;
(char&amp;nbsp;*)pvoid++;&amp;nbsp;//ANSI：正确；GNU：正确
(char&amp;nbsp;*)pvoid&amp;nbsp;+=&amp;nbsp;1;&amp;nbsp;//ANSI：错误；GNU：正确
&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	GNU和ANSI还有一些区别，总体而言，GNU较ANSI更“开放”，提供了对更多语法的支持。但是我们在真实设计时，还是应该尽可能地迎合ANSI标准。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;nbsp;style=\"text-align:center;\"&amp;gt;
	&amp;lt;strong&amp;gt;规则四&amp;nbsp;如果函数的参数可以是任意类型指针，那么应声明其参数为void&amp;nbsp;*&amp;lt;/strong&amp;gt;&amp;nbsp;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	典型的如内存操作函数memcpy和memset的函数原型分别为：
void&amp;nbsp;*&amp;nbsp;memcpy(void&amp;nbsp;*dest,&amp;nbsp;const&amp;nbsp;void&amp;nbsp;*src,&amp;nbsp;size_t&amp;nbsp;len);
void&amp;nbsp;*&amp;nbsp;memset&amp;nbsp;(&amp;nbsp;void&amp;nbsp;*&amp;nbsp;buffer,&amp;nbsp;int&amp;nbsp;c,&amp;nbsp;size_t&amp;nbsp;num&amp;nbsp;);
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	这样，任何类型的指针都可以传入memcpy和memset中，这也真实地体现了内存操作函数的意义，因为它操作的对象仅仅是一片内存，而不论这片内存是什么类型。如果memcpy和memset的参数类型不是void&amp;nbsp;*，而是char&amp;nbsp;*，那才叫真的奇怪了！这样的memcpy和memset明显不是一个“纯粹的，脱离低级趣味的”函数！
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	下面的代码执行正确：
&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;nbsp;name=\"code\"&amp;nbsp;id=\"prettyprint\"&amp;nbsp;class=\"cpp\"&amp;gt;//示例：memset接受任意类型指针
int&amp;nbsp;intarray[100];
memset&amp;nbsp;(&amp;nbsp;intarray,&amp;nbsp;0,&amp;nbsp;100*sizeof(int)&amp;nbsp;);&amp;nbsp;//将intarray清0
//示例：memcpy接受任意类型指针
int&amp;nbsp;intarray1[100],&amp;nbsp;intarray2[100];
memcpy&amp;nbsp;(&amp;nbsp;intarray1,&amp;nbsp;intarray2,&amp;nbsp;100*sizeof(int)&amp;nbsp;);&amp;nbsp;//将intarray2拷贝给intarray1&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;
	有趣的是，memcpy和memset函数返回的也是void&amp;nbsp;*类型，标准库函数的编写者是多么地富有学问啊！
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	&amp;lt;br&amp;nbsp;/&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;nbsp;style=\"text-align:center;\"&amp;gt;
	&amp;lt;strong&amp;gt;规则五&amp;nbsp;void不能代表一个真实的变量&amp;lt;/strong&amp;gt;&amp;nbsp;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	下面代码都企图让void代表一个真实的变量，因此都是错误的代码：
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void&amp;nbsp;a;&amp;nbsp;//错误
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	function(void&amp;nbsp;a);&amp;nbsp;//错误
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void体现了一种抽象，这个世界上的变量都是“有类型”的，譬如一个人不是男人就是女人（还有人妖？）。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	void的出现只是为了一种抽象的需要，如果你正确地理解了面向对象中“抽象基类”的概念，也很容易理解void数据类型。正如不能给抽象基类定义一个实例，我们也不能定义一个void（让我们类比的称void为“抽象数据类型”）变量。
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	4.总结
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
	小小的void蕴藏着很丰富的设计哲学，作为一名程序设计人员，对问题进行深一个层次的思考必然使我们受益匪浅。
&amp;lt;/p&amp;gt;</content>
<json-link>./file/c/2012-06-03/1338713201.json</json-link>
<comment-link>4</comment-link>
<tags>5</tags>
<imghref/>
<comment-list>
 <c>
  <author-c>1</author-c>
  <uid-c>2</uid-c>
  <date-c>2</date-c>
  <conf-c>3</conf-c>
  <locked>true</locked>
 </c>
</comment-list>
</root>
