<?xml version="1.0" encoding="UTF-8"?>
<root>
  <title>编程人生：15位软件先驱访谈录</title>
  <author>Peter Seibel</author>
  <submiter-uid>2</submiter-uid>
  <submit-date-time>2012-10-07 12:29:11</submit-date-time>
  <img-link>a22f479feba329a703f2e05d88948c99.big</img-link>
  <book-area>other</book-area>
  <book-intro>&lt;p&gt;
	本书按照文学期刊《巴黎评论》（The Paris Review）的传统，采取了一种不同的方法来讲述什么是编程。这家期刊曾派了两位教授去采访小说家E. M. Forster，这次采访和随后的一系列问答式的采访后来辑录为Writers at Work一书。
&lt;/p&gt;
&lt;p&gt;
	我采访了15位成就斐然、经验丰富的程序员，其中有些人是系统黑客，如Ken Thompson（Unix的发明者）和Bernie Cosell（ARPANET早期实现者之一）；有些人既有强大学术实力本身，又是著名黑客，如Donald Knuth、Guy Steele和Simon Peyton Jones；有些人是业界的研究员，如IBM的Fran Allen，爱立信的Joe Armstrong，Google的Peter Norvig，以及曾在施乐帕克研究中心工作过的Dan Ingalls和L Peter Deutsch；有些人是Netscape的早期实现者，如Jamie Zawinski和Brendan Eich；有些人参与设计和实现了现在的万维网，如刚才提到的Eich，以及Douglas Crockford和Joshua Bloch；还有Live Journal的发明人Brad Fitzpatrick（在伴随Web成长起来的一代程序员当中，他是一个当之无愧的典型）。
&lt;/p&gt;
&lt;p&gt;
	在采访中，我问他们有关编程的问题，问他们是怎么学习编程的，在编程过程中发现了什么，以及他们对未来的看法。而且我很用心地请他们多谈谈长久以来程序员一直在苦苦思索的那些问题：我们应该如何设计软件？编程语言在帮助我们提高生产力和避免错误方面扮演了什么角色？有什么办法可以更容易地查出难以发现的bug？
&lt;/p&gt;
&lt;p&gt;
	这些问题远远还没有解决，所以我的采访对象持有非常不同的观点也就不那么奇怪了。Jamie Zawinski和Dan Ingalls强调尽早让代码跑起来的重要性，而Joshua Bloch则描述了在实现之前，他如何设计API并测试它们能否支持要写的代码。Donald Knuth讲述了他在编写排版软件TeX的时候，怎样在敲代码之前先用铅笔在纸上完整地实现整个系统。Fran Allen大力批判近几十年来人们躺在C语言的脚下对计算机科学的兴趣越来越低，Bernie Cosell称之为“现代计算机最严重的安全问题”，Ken Thompson却认为安全问题是程序员而不是编程语言造成的，Donald Knuth也说C的指针是他所看到过的“最令人赞叹的记法改进之一”。一些受访者对“形式化证明可能有助于改善软件质量”这一观点嗤之以鼻，而Guy Steele则漂亮地展示了这种做法的优点和限制。
&lt;/p&gt;
&lt;p&gt;
	然而，仍然有一些主题是大家都认同的。几乎所有人都强调保持代码可读性是很重要的。大部分受访者都认为最难查找的bug出现在并发代码中。没有人认为编程问题已经完全解决了，他们大多数人仍然在寻找编写软件的更好办法，比如怎样自动分析代码，如何让程序员更好地协作，或者寻找（或设计）更好的编程语言。同时几乎所有人都认为多核CPU的大量采用将会给软件开发带来重大改变。
&lt;/p&gt;
&lt;p&gt;
	这些谈话发生在计算机发展史的一个特定时刻。因此，本书中讨论的一些话题在当前是紧迫问题，今后将不再是问题而变成了历史。但即使是像编程这种新兴领域，历史也能为我们提供很多教训。除此之外，我觉得我的受访者们可能有一些共识，包括什么是编程，如何更好地编程，等等，不仅现在的程序员会从中受益，将来几代程序员也将从中受益。
&lt;/p&gt;</book-intro>
</root>
