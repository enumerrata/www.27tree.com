<?xml version="1.0" encoding="UTF-8"?>
<root>
  <title><![CDATA[架构之美]]></title>
  <author>斯宾耐立思 , 郭西奥斯</author>
  <submiter-uid>2</submiter-uid>
  <submit-date-time>2013-01-07 00:46:08</submit-date-time>
  <img-link>c08d5bd90eaf372bedaeec5f7c7a356e.png</img-link>
  <book-area>other</book-area>
  <book-intro><![CDATA[<p>
	本书围绕5个主题领域来组织本书的内容：概述、企业应用、系统、最终用户应用和编程语言。本书让最优秀的设计师和架构师来描述他们选择的软件架构，剥开架构的各层，展示他们如何让软件做到实现功能、可靠、易用、高效率、可维护、可移植和优雅。
</p>
<p>
	<p>
		本书的作者们在介绍软件架构的基本实践和最佳实践方面干得很漂亮，他们也同样漂亮地介绍了各式各样的现代系统。我特别喜欢他们谈及的架构的广泛性，从Emacs到Facebook，从非常正式的系统到非常有灵气的系统。
	</p>
	<p>
		简而言之，这是一本非常及时的书，对于软件架构的艺术、科学和实践是非常有益的贡献。
	</p>
	<p>
		——Grady Booch，IBM院士
	</p>
	<p>
		<br />
	</p>
</p>
<p>
	作者简介
</p>
<p>
	王海鹏，1994年毕业于华东师范大学。拥有理学士（物理）和文学士（英国语言文学）学位。独立的咨询顾问、培训讲师、译者和软件开发者。已翻译十余本软件开发书籍，主题涵盖敏捷方法学、需求工程、 UML 建模和测试。拥有15年软件开发经验，目前主要的研究领域是软件架构和方法
</p>
<p>
	<br />
</p>
<p>
	目录
</p>
<p>
	<p>
		序
	</p>
	<p>
		前言
	</p>
	<p>
		第一部分 论架构
	</p>
	<p>
		第1章　什么是架构
	</p>
	<p>
		1.1　简介
	</p>
	<p>
		1.2　创建软件架构
	</p>
	<p>
		1.3　架构结构
	</p>
	<p>
		1.4　好的架构
	</p>
	<p>
		1.5　美丽的架构
	</p>
	<p>
		1.6　致谢
	</p>
	<p>
		1.7　参考文献
	</p>
	<p>
		第2章　两个系统的故事：现代软件神话
	</p>
	<p>
		2.1　混乱大都市
	</p>
	<p>
		2.2　设计之城
	</p>
	<p>
		2.3　说明什么问题
	</p>
	<p>
		2.4　轮到您了
	</p>
	<p>
		2.5　参考文献
	</p>
	<p>
		第二部分　企业级应用架构
	</p>
	<p>
		第3章　伸缩性架构设计
	</p>
	<p>
		3.1　简介
	</p>
	<p>
		3.2　背景
	</p>
	<p>
		3.3　架构
	</p>
	<p>
		3.4　关于架构的思考
	</p>
	<p>
		第4章　记忆留存
	</p>
	<p>
		4.1　功能和约束
	</p>
	<p>
		4.2　工作流
	</p>
	<p>
		4.3　架构关注点
	</p>
	<p>
		4.4　用户反应
	</p>
	<p>
		4.5　结论
	</p>
	<p>
		第5章　面向资源的架构：在Web中
	</p>
	<p>
		5.1　简介
	</p>
	<p>
		5.2　传统的Web服务
	</p>
	<p>
		5.3　Web
	</p>
	<p>
		5.4　面向资源的架构
	</p>
	<p>
		5.5　数据驱动的应用
	</p>
	<p>
		5.6　应用面向资源的架构
	</p>
	<p>
		5.7　结论
	</p>
	<p>
		第6章　数据增长：Facebook平台的架构
	</p>
	<p>
		6.1　简介
	</p>
	<p>
		6.2　创建一个社会关系Web服务
	</p>
	<p>
		6.3　创建社会关系数据查询服务
	</p>
	<p>
		6.4　创建一个社会关系Web门户：FBML
	</p>
	<p>
		6.5　系统的支持功能
	</p>
	<p>
		6.6　总结
	</p>
	<p>
		第三部分　系统架构
	</p>
	<p>
		第7章　Xen 和虚拟化之美
	</p>
	<p>
		7.1　简介
	</p>
	<p>
		7.2　Xenoservers
	</p>
	<p>
		7.3　虚拟化的挑战
	</p>
	<p>
		7.4　半虚拟化
	</p>
	<p>
		7.5　Xen 的变换形式
	</p>
	<p>
		7.6　改变的硬件，改变的Xen
	</p>
	<p>
		7.7　经验教训
	</p>
	<p>
		7.8　延伸阅读
	</p>
	<p>
		第8章　Guardian：一个容错操作系统环境
	</p>
	<p>
		8.1　Tandem/16，将来所有的计算机都会像这样构建
	</p>
	<p>
		8.2　硬件
	</p>
	<p>
		8.3　机械布局
	</p>
	<p>
		8.4　处理器架构
	</p>
	<p>
		8.5　处理器间总线
	</p>
	<p>
		8.6　输入/输出
	</p>
	<p>
		8.7　进程结构
	</p>
	<p>
		8.8　消息系统
	</p>
	<p>
		8.9　文件系统
	</p>
	<p>
		8.10　民间传说
	</p>
	<p>
		8.11　弊端
	</p>
	<p>
		8.12　后继者
	</p>
	<p>
		8.13　延伸阅读
	</p>
	<p>
		第9章　JPC：一个纯Java的x86PC模拟程序
	</p>
	<p>
		9.1　简介
	</p>
	<p>
		9.2　概念验证
	</p>
	<p>
		9.3　PC架构
	</p>
	<p>
		9.4　Java性能技巧
	</p>
	<p>
		9.5　把4GB放入4GB：这不起作用
	</p>
	<p>
		9.6　保护模式的危险
	</p>
	<p>
		9.7　从事一项毫无成功希望的斗争
	</p>
	<p>
		9.8　劫持JVM
	</p>
	<p>
		9.9　最终灵活性
	</p>
	<p>
		9.10　最佳安全性
	</p>
	<p>
		9.11　第二次做会更好
	</p>
	<p>
		第10章　元循环虚拟机的力量：Jikes RVM
	</p>
	<p>
		10.1　背景
	</p>
	<p>
		10.2　与运行时环境相关的传言
	</p>
	<p>
		10.3　Jikes RVM简史
	</p>
	<p>
		10.4　一个自足执行的运行时自举
	</p>
	<p>
		10.5　运行时组件
	</p>
	<p>
		10.6　经验教训
	</p>
	<p>
		参考文献
	</p>
	<p>
		第四部分　最终用户应用架构
	</p>
	<p>
		第11章　GNU Emacs：滋长的特性是其优势
	</p>
	<p>
		11.1　使用中的Emacs
	</p>
	<p>
		11.2　Emacs的架构
	</p>
	<p>
		11.3　滋长的特性
	</p>
	<p>
		11.4　另外两个架构
	</p>
	<p>
		第12章　当集市开始构建教堂
	</p>
	<p>
		12.1　简介
	</p>
	<p>
		12.2　KDE 项目的历史和组织结构
	</p>
	<p>
		12.3　Akonadi
	</p>
	<p>
		12.4　ThreadWeaver
	</p>
	<p>
		第五部分　语言与架构
	</p>
	<p>
		第13章　软件架构：面向对象与面向功能
	</p>
	<p>
		13.1　概述
	</p>
	<p>
		13.2　示例
	</p>
	<p>
		13.3　面向功能解决方案的模块性评价
	</p>
	<p>
		13.4　面向对象视图
	</p>
	<p>
		13.5　面向对象模块性的评价和改进
	</p>
	<p>
		13.6　代理：将操作封装到对象中
	</p>
	<p>
		致谢
	</p>
	<p>
		参考文献
	</p>
	<p>
		第14章　重读经典
	</p>
	<p>
		14.1　所有东西都是对象
	</p>
	<p>
		14.2　类型是隐式定义的
	</p>
	<p>
		14.3　问题
	</p>
	<p>
		14.4　砖块和灰浆建筑架构
	</p>
	<p>
		参考文献
	</p>
</p>]]></book-intro>
  <parseVersion>1.1</parseVersion>
</root>
