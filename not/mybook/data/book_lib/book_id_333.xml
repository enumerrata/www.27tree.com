<?xml version="1.0" encoding="UTF-8"?>
<root>
  <title><![CDATA[Python高级编程]]></title>
  <author>莱德</author>
  <submiter-uid>442</submiter-uid>
  <submit-date-time>2013-04-23 15:54:37</submit-date-time>
  <img-link>85bec3d1b364e90fa5b47b66554ed15e.png</img-link>
  <book-area>py</book-area>
  <book-intro><![CDATA[<p>
	本书通过大量的实例，介绍了Python语言的最佳实践和敏捷开发方法，并涉及整个软件生命周期的高级主题，诸如持续集成、版本控制系统、包的发行和分发、开发模式、文档编写等。本书首先介绍如何设置最优的开发环境，然后以Python敏捷开发方法为线索，阐述如何将已被验证的面向对象原则应用到设计中。这些内容为开发人员和项目管理人员提供了整个软件工程中的许多高级概念以及专家级的建议，其中有些内容的意义甚至超出了Python语言本身。
</p>
<p>
	<br />
</p>
<p>
	本书针对具备一定Python基础并希望通过在项目中应用最佳实践和新的开发技术来提升自己的Python开发人员。
</p>
<p>
	<br />
</p>
<p>
	<p>
		第1章　准备工作
	</p>
	<p>
		1.1　安装Python
	</p>
	<p>
		1.1.1　Python实现版本
	</p>
	<p>
		1.1.2　在Linux环境下安装
	</p>
	<p>
		1.1.3　在Windows环境下安装
	</p>
	<p>
		1.1.4　在Mac OS X环境下安装
	</p>
	<p>
		1.2　Python命令行
	</p>
	<p>
		1.2.1　定制交互式命令行
	</p>
	<p>
		1.2.2　iPython：增强型命令行
	</p>
	<p>
		1.3　安装setuptools
	</p>
	<p>
		1.3.1　工作原理
	</p>
	<p>
		1.3.2　使用EasyInstall安装setuptools
	</p>
	<p>
		1.3.3　将MinGW整合到distutils中
	</p>
	<p>
		1.4　工作环境
	</p>
	<p>
		1.4.1　使用文本编辑器与辅助工具的组合
	</p>
	<p>
		1.4.2　使用集成开发环境
	</p>
	<p>
		1.5　小结
	</p>
	<p>
		第2章　语法最佳实践——低于类级
	</p>
	<p>
		2.1　列表推导
	</p>
	<p>
		2.2　迭代器和生成器
	</p>
	<p>
		2.2.1　生成器
	</p>
	<p>
		2.2.2　协同程序
	</p>
	<p>
		2.2.3　生成器表达式
	</p>
	<p>
		2.2.4　itertools模块
	</p>
	<p>
		2.3　装饰器
	</p>
	<p>
		2.3.1　如何编写装饰器
	</p>
	<p>
		2.3.2　参数检查
	</p>
	<p>
		2.3.3　缓存
	</p>
	<p>
		2.3.4　代理
	</p>
	<p>
		2.3.5　上下文提供者
	</p>
	<p>
		2.4　with和contextlib
	</p>
	<p>
		2.4.1　contextlib模块
	</p>
	<p>
		2.4.2　上下文实例
	</p>
	<p>
		2.5　小结
	</p>
	<p>
		第3章　语法最佳实践——类级
	</p>
	<p>
		3.1　子类化内建类型
	</p>
	<p>
		3.2　访问超类中的方法
	</p>
	<p>
		3.2.1　理解Python的方法解析顺序
	</p>
	<p>
		3.2.2　super的缺陷
	</p>
	<p>
		3.3　最佳实践
	</p>
	<p>
		3.4　描述符和属性
	</p>
	<p>
		3.4.1　描述符
	</p>
	<p>
		3.4.2　属性
	</p>
	<p>
		3.5　槽
	</p>
	<p>
		3.6　元编程
	</p>
	<p>
		3.6.1　__new__方法
	</p>
	<p>
		3.6.2　__metaclass__方法
	</p>
	<p>
		3.7　小结
	</p>
	<p>
		第4章　选择好的名称
	</p>
	<p>
		4.1　PEP 8和命名最佳实践
	</p>
	<p>
		4.2　命名风格
	</p>
	<p>
		4.2.1　变量
	</p>
	<p>
		4.2.2　函数和方法
	</p>
	<p>
		4.2.3　属性
	</p>
	<p>
		4.2.4　类
	</p>
	<p>
		4.2.5　模块和包
	</p>
	<p>
		4.3　命名指南
	</p>
	<p>
		4.3.1　使用“has”或“is”前缀命名布尔元素
	</p>
	<p>
		4.3.2　用复数形式命名序列元素
	</p>
	<p>
		4.3.3　用显式的名称命名字典
	</p>
	<p>
		4.3.4　避免通用名称
	</p>
	<p>
		4.3.5　避免现有名称
	</p>
	<p>
		4.4　参数最佳实践
	</p>
	<p>
		4.4.1　根据迭代设计构建参数
	</p>
	<p>
		4.4.2　信任参数和测试
	</p>
	<p>
		4.4.3　小心使用*args和**kw魔法参数
	</p>
	<p>
		4.5　类名
	</p>
	<p>
		4.6　模块和包名称
	</p>
	<p>
		4.7　使用API
	</p>
	<p>
		4.7.1　跟踪冗长
	</p>
	<p>
		4.7.2　构建命名空间树
	</p>
	<p>
		4.7.3　分解代码
	</p>
	<p>
		4.7.4　使用Egg
	</p>
	<p>
		4.7.5　使用deprecation过程
	</p>
	<p>
		4.8　有用的工具
	</p>
	<p>
		4.8.1　Pylint
	</p>
	<p>
		4.8.2　CloneDigger
	</p>
	<p>
		4.9　小结
	</p>
	<p>
		第5章　编写一个包
	</p>
	<p>
		第6章　编写一个应用程序
	</p>
	<p>
		第7章　使用zc.buildout
	</p>
	<p>
		第8章　代码管理
	</p>
	<p>
		第9章　生命周期管理
	</p>
	<p>
		第10章　编写项目文档
	</p>
	<p>
		第11章　测试驱动开发
	</p>
	<p>
		第12章　优化：通用原则和剖析技术
	</p>
	<p>
		第13章　优化：解决方案
	</p>
	<p>
		第14章　有用的设计模式
	</p>
</p>]]></book-intro>
  <parseVersion>1.1</parseVersion>
</root>
