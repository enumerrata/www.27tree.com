<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>37</uid>
  <datetime>2012-08-11 09:39:34</datetime>
  <title>eclipse.ini/myeclipse.ini文件中参数配置</title>
  <content>&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	今天下午查了一些关于优化MyEclipse速度的文章，受益匪浅。不过知其然也要知其所以然。比如说在提到通过修改myeclipse.ini文件中参数-Xms,-Xmx，-PerSize的值时，这几个参数具体是指什么？在网上搜集了一些资料，现整理如下：
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	这涉及到JVM的内存管理机制。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	1.堆(Heap)和非堆(Non-heap)内存
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	按照官方的说法：“Java&amp;nbsp;虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在&amp;nbsp;Java&amp;nbsp;虚拟机启动时创建的。”“在JVM中堆之外的内存称为非堆内存(Non-heap&amp;nbsp;memory)”。可以看出JVM主要管理两种类型的内存：堆和非堆。简单来说堆就是Java代码可及的内存，是留给开发人员使用的；非堆就是JVM留给自己用的，所以方法区、JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法的代码都在非堆内存中。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	2.堆内存分配
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	JVM初始分配的内存由-Xms指定，默认是物理内存的1/64；JVM最大分配的内存由-Xmx指定，默认是物理内存的1/4。默认空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制；空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。因此服务器一般设置-Xms、-Xmx相等以避免在每次GC&amp;nbsp;后调整堆的大小。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	3.非堆内存分配
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	JVM使用-XX:PermSize设置非堆内存初始值，默认是物理内存的1/64；由XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	4.JVM内存限制(最大值)
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	首先JVM内存限制于实际的最大物理内存，假设物理内存无限大的话，JVM内存的最大值跟操作系统有很大的关系。简单的说就32位处理器虽然可控内存空间有4GB,但是具体的操作系统会给一个限制，这个限制一般是2GB-3GB（一般来说Windows系统下为1.5G-2G，Linux系统下为2G-3G），而64bit以上的处理器就不会有限制了。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	举例说明含义：
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	-Xms128m&amp;nbsp;表示JVM&amp;nbsp;Heap(堆内存)最小尺寸128MB，初始分配
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	-Xmx512m&amp;nbsp;表示JVM&amp;nbsp;Heap(堆内存)最大允许的尺寸256MB，按需分配。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	说明：如果-Xmx不指定或者指定偏小，应用可能会导致java.lang.OutOfMemory错误，此错误来自JVM不是Throwable的，无法用try...catch捕捉。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	PermSize和MaxPermSize指明虚拟机为java永久生成对象（Permanate&amp;nbsp;generation）如，class对象、方法对象这些可反射（reflective）对象分配内存限制，这些内存不包括在Heap（堆内存）区之中。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	-XX:PermSize=64MB&amp;nbsp;最小尺寸，初始分配
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	-XX:MaxPermSize=256MB&amp;nbsp;最大允许分配尺寸，按需分配过小会导致：java.lang.OutOfMemoryError:&amp;nbsp;PermGen&amp;nbsp;space&amp;nbsp;MaxPermSize缺省值和-server&amp;nbsp;-client选项相关。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	-server选项下默认MaxPermSize为64m
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	-client选项下默认MaxPermSize为32m
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	PS:不同厂家的jdk垃圾回收算法不一样。在sun的jdk下，Xms和Xmx设置一样，可以减轻伸缩堆大小带来的压力，但在ibm的jdk下面，设置为一样会增大堆碎片产生的几率。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	下面再简单的整理一下优化MyEclipse速度的主要方法：
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	1.修改myeclipse.ini。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	2.取消自动validation
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	3.勾掉无用插件。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	4.修改启动加载模块
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	&lt;br&amp;nbsp;/&gt;
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	&lt;br&amp;nbsp;/&gt;
&lt;/p&gt;</content>
  <contentx>今天下午查了一些关于优化MyEclipse速度的文章，受益匪浅。不过知其然也要知其所以然。比如说在提到通过修改myeclipse.ini文件中参数-Xms,-Xmx，-PerSize的值时，这几个参数具体是指什么？在网上搜集了一些资料，现整理如下：


	这涉及到JVM的内存管理机制。


	1.堆(Heap)和非堆(Non-heap)内存


	按照官方的</contentx>
  <tags>_null_</tags>
</root>
