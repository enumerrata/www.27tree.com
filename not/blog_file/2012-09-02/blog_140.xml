<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>2</uid>
  <datetime>2012-09-02 15:40:45</datetime>
  <title>php 接口类和抽象类的用法</title>
  <content>&lt;p&gt;
	很多人搞不清楚接口和抽象类的区别！
&lt;/p&gt;
&lt;p&gt;
	&lt;strong&gt;1.&lt;a&amp;nbsp;href=\"http://www.itsrcs.com/art/php/\"&amp;nbsp;target=\"_blank\"&gt;php&amp;nbsp;&lt;/a&gt;接口类:interface&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
	其实他们的作用很简单，当有很多人一起开发一个项目时，可能都会去调用别人写的一些类，那你就会问，我怎么知道他的某个功能的实现方法是怎么命名的呢，这个时候php接口类就起到作用了，接口就是某种约定，继承接口的类必须实现接口定义的所有方法。比如&amp;nbsp;:
&lt;/p&gt;
&lt;p&gt;
	Codeinterface&amp;nbsp;Shop{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
	public&amp;nbsp;function&amp;nbsp;buy($gid);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
	public&amp;nbsp;function&amp;nbsp;sell($gid);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
	public&amp;nbsp;function&amp;nbsp;view($gid);
&lt;/p&gt;
&lt;p&gt;
	}
&lt;/p&gt;
&lt;p&gt;
	我声明一个shop接口类，定义了三个方法：买(buy),卖(sell),看(view),那么继承此类的所有子类都必须实现这3个方法少一个都不行，如果子类没有实现这些话，就无法运行。实际上接口类说白了，就是一个类的模板，一个类的规定，如果你属于这类，你就必须遵循我的规定，少一个都不行，但是具体你怎么去做，我不管，那是你的事，如：
&lt;/p&gt;
&lt;p&gt;
	&lt;p&gt;
		class&amp;nbsp;BaseShop&amp;nbsp;implements&amp;nbsp;Shop
	&lt;/p&gt;
	&lt;p&gt;
		{
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;buy($gid)
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;{
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo(&amp;nbsp;你购买了ID为&amp;nbsp;:&amp;nbsp;.$gid.&amp;nbsp;的商品&amp;nbsp;);
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;}
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;sell($gid)
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;{
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo(&amp;nbsp;你卖了ID为&amp;nbsp;:&amp;nbsp;.$gid.&amp;nbsp;的商品&amp;nbsp;);
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;}
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;view($gid)
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;{
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo(&amp;nbsp;你查看了ID为&amp;nbsp;:&amp;nbsp;.$gid.&amp;nbsp;的商品&amp;nbsp;);
	&lt;/p&gt;
	&lt;p&gt;
		&amp;nbsp;&amp;nbsp;&amp;nbsp;}
	&lt;/p&gt;
	&lt;p&gt;
		}
	&lt;/p&gt;
	&lt;p&gt;
		你想想，在一个多人合作的大项目里面，有了接口类是多么的方便，这样你就不用去问别人，你的某某功能的方法名是什么了，当然如果你们喜欢这样我也没有办法。
	&lt;/p&gt;
	&lt;p&gt;
		结论&amp;nbsp;：&amp;nbsp;接口类就是一个类的领导者，指明方向，子类必须完成它指定方法。
	&lt;/p&gt;
	&lt;p&gt;
		&lt;strong&gt;2.&lt;a&amp;nbsp;href=\"http://www.itsrcs.com/art/php/\"&amp;nbsp;target=\"_blank\"&gt;php&lt;/a&gt;&amp;nbsp;抽象类&amp;nbsp;:&amp;nbsp;abstract&lt;/strong&gt;
	&lt;/p&gt;
	&lt;p&gt;
		其实抽象类和接口类有一部分很像，记得在哪里看见这样一句话，抽象类就把类像的部分抽出来，这句看上去很搞笑，其实它说出了抽象类的真理，抽象类的作用是，当你发现你的很多类里面用很多方法你不断的在重复写，那你就可以考虑使用抽象类了，你可能会说“我不是可以重写一个类每个公共类我个实例化一个这个公共类，调用相同的方法就可以了”，这里是可以，实际上抽象类做的工作也就是这个，不过他省去了你实例化的这个步骤，让你就像直接调用本类方法一样方便，而且你还可以重载这个方法。如：
	&lt;/p&gt;
	&lt;p&gt;
		&lt;p&gt;
			abstract&amp;nbsp;class&amp;nbsp;BaseShop
		&lt;/p&gt;
		&lt;p&gt;
			{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;buy($gid)
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo(&amp;nbsp;你购买了ID为&amp;nbsp;:&amp;nbsp;.$gid.&amp;nbsp;的商品&amp;nbsp;);
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;}
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;sell($gid)
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo(&amp;nbsp;你卖了ID为&amp;nbsp;:&amp;nbsp;.$gid.&amp;nbsp;的商品&amp;nbsp;);
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;}
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;view($gid)
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo(&amp;nbsp;你查看了ID为&amp;nbsp;:&amp;nbsp;.$gid.&amp;nbsp;的商品&amp;nbsp;);
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;}
		&lt;/p&gt;
		&lt;p&gt;
			}
		&lt;/p&gt;
		&lt;p&gt;
			class&amp;nbsp;BallShop&amp;nbsp;extends&amp;nbsp;BaseShop
		&lt;/p&gt;
		&lt;p&gt;
			{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;$itme_id&amp;nbsp;=&amp;nbsp;null;
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;__construct()
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$this-&amp;gt;itme_id&amp;nbsp;=&amp;nbsp;2314;
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;}
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;function&amp;nbsp;open()
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;{
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$this-&amp;gt;sell($this-&amp;gt;itme_id);
		&lt;/p&gt;
		&lt;p&gt;
			&amp;nbsp;&amp;nbsp;&amp;nbsp;}
		&lt;/p&gt;
		&lt;p&gt;
			}
		&lt;/p&gt;
		&lt;p&gt;
			这里是一个例子，想上面一样我定义了一个商店类，抽出了它所有像的部分，买(buy),卖(sell),看(view),并且抽象类里都实现了这些方法，那么继承它的子类就自动获得了这些方法，子类就做它自己独特的东西，介绍代码的重复，提高复用性。
		&lt;/p&gt;
	&lt;/p&gt;
&lt;/p&gt;</content>
  <contentx>很多人搞不清楚接口和抽象类的区别！


	1.php 接口类:interface


	其实他们的作用很简单，当有很多人一起开发一个项目时，可能都会去调用别人写的一些类，那你就会问，我怎么知道他的某个功能的实现方法是怎么命名的呢，这个时候php接口类就起到作用了，接口就是某种约定，继承接口的类必须实现接口定义的所有方法。比如 :


	Codeinterfa</contentx>
  <tags>_null_</tags>
</root>
