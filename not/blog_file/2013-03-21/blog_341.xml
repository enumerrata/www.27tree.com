<?xml version="1.0" encoding="UTF-8"?>
<root>
  <title><![CDATA[本站使用的一个缓存类]]></title>
  <content><![CDATA[<p>
	我自己开发的，支持gzip
</p>
<p>
	CacheM.php
</p>
<p>
<pre name=\"code\" id=\"prettyprint\" class=\"javascript\">&lt;?php

class Cache_M {
    /*
     * 设置缓存目录
     * @var string $_cache_dir
     */

    private $_cache_dir = \'./cache/\';

    /**
     * 保存缓存key
     * @var string $_c_key
     */
    private $_c_key;

    /**
     * 设置缓存生命周期
     * @var int $_cache_time
     * @default = 3600
     */
    private $_cache_time = 3600;

    /**
     * 缓存头验证正则表达式
     * @var preg $_cache_header_preg
     */
    private $_cache_header_preg = \'/&lt;__cache@(\\d{10})-@(\\d{10})@(\\w{0,255})__&gt;/\';
    private $_cache_header;
    private $_gzip = false;

    const ZIP_GZIP = true;

    public function __construct($gzip = false) {
        if ($gzip)
            $this-&gt;_gzip = $gzip;
    }

    public function setCacheLifeTime($time) {
        $this-&gt;_cache_time = $time;
    }
    
    public function setCacheDir($_dir){
        $this-&gt;_cache_dir = $_dir;
    }
    
    public function setCacheKey($_key){
        $this-&gt;_c_key = $_key;
    }

    public function is_cached($_c_key) {
        $file_name = $this-&gt;get_cache_filename($_c_key);
        if (is_file($file_name)) {
            $handle = @fopen($file_name, \"r\");
            if ($handle) {
                while (!feof($handle)) {
                    $buffer = fgets($handle);
                    if (preg_match($this-&gt;_cache_header_preg, $buffer)) {
                        return true;
                        // cache_header check pass
                    } else {
                        // cache_header check falid
                        return false;
                    }
                }
                fclose($handle);
            }
            return true;
        } else {
            return false;
        }
    }

    public function cache_start($_c_key) {
        $this-&gt;_c_key = $_c_key;
        if ($this-&gt;_gzip) {
            if (Extension_Loaded(\'zlib\')) {
                Ob_Start(\'ob_gzhandler\');
            }
            else
                ob_start();
        } else {
            ob_start();
        }
        header(\"Content-type: text/html\");
        return true;
    }

    public function cache_end() {
        $data = ob_get_contents();
        // 保存操作
        $this-&gt;write_cache_file($data, $this-&gt;_c_key);
        ob_end_flush();
    }

    public function read_cache_file($_c_key,$_exit = false) {
        if ($this-&gt;_gzip) {
            if (Extension_Loaded(\'zlib\')) {
                Ob_Start(\'ob_gzhandler\');
            }
            else
                ob_start();
        } else {
            ob_start();
        }
        $fn = $this-&gt;get_cache_filename($_c_key);
        if (is_file($fn)) {
            $handle = @fopen($fn, \"r\");
            if ($handle) {
                $_ch_check = false;
                while (!feof($handle)) {
                    if (!$_ch_check) {
                        $_ch_check = true;
                        $_t = fgets($handle, strlen($this-&gt;generate_cache_header($_c_key)) + 1);
                        unset($_t);
                        continue;
                    } else {
                        echo fgets($handle);
                    }
                }
                ob_end_flush();
            }
            fclose($handle);
            $_exit &amp;&amp; exit(0);
            return true;
        } else {
            return false;
        }
    }

    public function write_cache_file($data, $_c_key) {

        $fn = $this-&gt;get_cache_filename($_c_key);

        $fp = fopen($fn, \"w+\");

        if (flock($fp, LOCK_EX)) { // 进行排它型锁定
            fwrite($fp, $this-&gt;generate_cache_header($_c_key));
            fwrite($fp, $data);
            flock($fp, LOCK_UN); // 释放锁定
        } else {
            echo \"Couldn\'t lock the file !\";
        }

        fclose($fp);
    }

    private function get_cache_filename($_c_key) {
        // $key . hash . cache
        substr($this-&gt;_cache_dir, -1) != DIRECTORY_SEPARATOR &amp;&amp; $this-&gt;_cache_dir .= DIRECTORY_SEPARATOR;
        return $this-&gt;_cache_dir . $_c_key . \'^\' . md5($_c_key) . \'.cache.html\';
    }

    private function generate_cache_header($_c_key) {
        if (null === $this-&gt;_cache_header) {
            $t = time();
            $this-&gt;_cache_header = sprintf(\'&lt;__cache@%s-@%s@%s__&gt;\', $t, $t + $this-&gt;_cache_time, $_c_key);
        }
        return $this-&gt;_cache_header;
    }

}

?&gt;
</pre>
下面是demo:
</p>
<p>
<pre name=\"code\" id=\"prettyprint\" class=\"javascript\">&lt;?php
$ROOT = $_SERVER[\'DOCUMENT_ROOT\'];
include $ROOT . \'/inc/mCache/CacheM.php\';
$Cache = new Cache_M(\'./cache\',Cache_M::ZIP_GZIP);
$ckey = \'clks\';
if(!$Cache-&gt;is_cached($ckey)){
    $Cache-&gt;cache_start($ckey);
} else {
    $Cache-&gt;read_cache_file($ckey);
    exit(0);
}
?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;
        &lt;title&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        gziped
    &lt;/body&gt;
&lt;/html&gt;
&lt;?php
$Cache-&gt;cache_end();
?&gt;
</pre>
如果要开启gzip缓存，请检查你的服务器环境有没有安装zlib拓展
</p>]]></content>
  <contentx><![CDATA[
	我自己开发的，支持gzip


	CacheM.php


&lt;?php

class Cache_M {
    /*
     * 设置缓存目录
     * @var string $_cache_dir
     */

 ]]></contentx>
  <tags>_null_</tags>
  <parseVersion>1.1</parseVersion>
</root>
