<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>2</uid>
  <datetime>2012-11-16 18:19:16</datetime>
  <title><![CDATA[PHP ServerPush 数据推送技术 即反向Ajax]]></title>
  <content><![CDATA[<p>
	随着人们对即时性应用需求的不断上升，服务推送技术在聊天、消息提醒尤其是社交网络服务技术开始兴起，成为实时应用的数据流核心。这篇文章试图探讨的便是各种适合于PHP的数据推送的实现方式以及其优劣。
</p>
<p>
	1. 什么是Server Push
</p>
<p>
	想象在聊天应用中，如果使用传统的ajax来承担消息的传入，那么一般是通过每隔一定时间拉取一次信息的方式实现，但是其实这种方式有大量查询是浪费的。聊天等Web应用更需要服务器在特定时间来主动告知前端有新的消息即Push，而不是前端每时每刻问服务器：“来消息了吗？”即Pull。这也正是为什么这个技术常被叫做反向ajax。
</p>
<p>
	其他别名：Comet，反向Ajax
</p>
<p>
	2. 如何实现Push
</p>
<p>
	其实所谓的推送技术也没有多么复杂，目前从大类上有3种，一种仍然建立在ajax基础上，还有一种建立在框架基础上，最后一种抛弃了传统的HTTP协议，使用Flash或者HTML5的WebSockets技术。接下来将对这三种类别产生的不同的方式进行探讨。
</p>
<p>
	1) Ajax 长轮询
</p>
<p>
	Ajax长轮询从本质上来说仍然是一种pull，但是实时性较高，无用请求减少很多，是一种不错的Push实现方案。不过它只减少了网络上的无谓消耗。
</p>
<p>
	核心: 客户端发起一个ajax请求，服务端将请求搁置(pending)或者说挂起，直到到了超时时间(timeout)或需要推送时返回；客户端则等待ajax返回后处理数据，再发起下一个ajax请求。即一个持续时间比常规请求要长很多的ajax请求。
</p>
<p>
	优点: 兼容性较高，实现简单
</p>
<p>
	缺点: 对于php这种语言来说，如果要做到实时，那么服务端就要承受大得多的压力，因为搁置到什么时候往往是不确定的，这就要php脚本每次搁置都进行一个while无限循环。
</p>
<p>
	当然，如果服务器刷新每秒级，那尚可接受，只是实时性上退化了。
</p>
<p>
	注意: 浏览器有连接数限制。我得出的结论是如果当前页面上有一个ajax请求处于等待返回状态，那么其他ajax请求都会被搁置(Chrome, Firefox已测)。如果页面有一般ajax需求怎么办？解决方法是开个iframe框架，框架中使在另一个域名下进行Comet长轮询，需要注意跨域问题。
</p>
<p>
	PHP实现: Jquery+php实现comet
</p>
<p>
	相关:Ajax跨域和js跨域解决方案
</p>
<p>
	2) Frame 长连接
</p>
<p>
	受到ajax启发，出现了框架下的长连接。
</p>
<p>
	核心: Frame中发起一个普通请求，服务器将其搁置；需要推送时输出直接执行
</p>
<p>
	脚本，然后继续保持连接。如果担心超时问题可以改成框架论询。
</p>
<p>
	优点: 与1一样具有高兼容特性
</p>
<p>
	缺点: 最大的问题是如果框架在载入，那么浏览器就好一直显示“载入中”，这就弱爆了(解决方法参见文末的相关阅读资源)。同样服务器也要能hold住大量循环……另外，是否有同域连接限制没测试。
</p>
<p>
	3) Flash/HTML5 WebSockets
</p>
<p>
	用flash来发起WebSockets，秒杀前面一切问题。
</p>
<p>
	优点: 标准化, RealTime, Push
</p>
<p>
	缺点: 服务器需要能应对WebSockets；还有如果既没有Flash又不支持HTML5的怎么办？
</p>
<p>
	PHP实现: Start Using HTML5 WebSockets Today
</p>
<p>
	6) 使用兼容封装层(socket.io)
</p>
<p>
	以上每种方法都有优劣，那么终极解决方案便是合在一起！能WebSockets时候就WebSockets，不支持HTML5特性就退化到Flash，没有Flash则退化到Ajax长轮询。
</p>
<p>
	优点: 高度封装，编写非常容易，几乎不需要关心如何去实现的。实时，超低负载，高并发。
</p>
<p>
	缺点: 其实算不上缺点，socket.io的服务器端要求是node.js，而不是php。
</p>
<p>
	个人看法: 如果你是独立主机，能运行程序，那么socket.io配合node.js是个非常高效的选择。为什么呢？因为它还可以避免php的服务端高负载。
</p>]]></content>
  <contentx><![CDATA[随着人们对即时性应用需求的不断上升，服务推送技术在聊天、消息提醒尤其是社交网络服务技术开始兴起，成为实时应用的数据流核心。这篇文章试图探讨的便是各种适合于PHP的数据推送的实现方式以及其优劣。


	1. 什么是Server Push


	想象在聊天应用中，如果使用传统的ajax来承担消息的传入，那么一般是通过每隔一定时间拉取一次信息的方式实现，但是其实这]]></contentx>
  <tags>_null_</tags>
  <parseVersion>1.1</parseVersion>
</root>
