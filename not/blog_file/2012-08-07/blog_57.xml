<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>19</uid>
  <datetime>2012-08-07 13:48:59</datetime>
  <title>Java新手入门的30个基本概念</title>
  <content>&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	前言:
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	在我们学习Java的过程中,掌握其中的基本概念对我们的学习无论是J2SE,J2EE,J2ME都是很重要的,J2SE是Java的基础,所以有必要对其中的基本概念做以归纳,以便大家在以后的学习过程中更好的理解java的精髓,在此我总结了30条基本的概念。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	Java概述:
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	目前Java主要应用于中间件的开发(middleware)---处理客户机于服务器之间的通信技术,早期的实践证明,Java不适合pc应用程序的开发,其发展逐渐变成在开发手持设备,互联网信息站,及车载计算机的开发.Java于其他语言所不同的是程序运行时提供了平台的独立性,称许可以在windows,solaris,linux其他操作系统上使用完全相同的代码.Java的语法与C++语法类似,C++/C程序员很容易掌握,而且Java是完全的彻底的面向对象的,其中提出了很好的GC(Garbage
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	Collector)垃圾处理机制,防止内存溢出。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	Java的白皮书为我们提出了Java语言的11个关键特性。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(1)Easy:Java的语法比C++的相对简单,另一个方面就是Java能使软件在很小的机器上运行,基础解释其和类库的支持的大小约为40kb,增加基本的标准库和线程支持的内存需要增加125kb。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(2)分布式:Java带有很强大的TCP/IP协议宓睦炭?Java应用程序能够通过URL来穿过网络来访问远程对象,由于servlet机制的出现,使Java编程非常的高效,现在许多的大的web
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	server都支持servlet。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(3)OO:面向对象设计是把重点放在对象及对象的接口上的一个编程技术.其面向对象和C++有很多不同,在与多重继承的处理及Java的原类模型。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(4)健壮特性:Java采取了一个安全指针模型,能减小重写内存和数据崩溃的可能型。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(5)安全:Java用来设计网路和分布系统,这带来了新的安全问题,Java可以用来构建防病毒和防攻击的System.事实证明Java在防毒这一方面做的比较好。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(6)中立体系结构:Java编译其生成体系结构中立的目标文件格式可以在很多处理器上执行,编译器产生的指令字节码(Javabytecode)实现此特性,此字节码可以在任何机器上解释执行。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(7)可移植性:Java中对基本数据结构类型的大小和算法都有严格的规定所以可移植性很好。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(8)多线程:Java处理多线程的过程很简单,Java把多线程实现交给底下操作系统或线程程序完成.所以多线程是Java作为服务器端开发语言的流行原因之一。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	(9)Applet和servlet:能够在网页上执行的程序叫Applet,需要支持Java的浏览器很多,而applet支持动态的网页,这是很多其他语言所不能做到的。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	基本概念:
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	1.OOP中唯一关系的是对象的接口是什么,就像计算机的销售商她不管电源内部结构是怎样的,他只关系能否给你提供电就行了,也就是只要知道can&amp;nbsp;or
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	not而不是how&amp;nbsp;and
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	why.所有的程序是由一定的属性和行为对象组成的,不同的对象的访问通过函数调用来完成,对象间所有的交流都是通过方法调用,通过对封装对象数据,很大限度上提高复用率。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	2.OOP中最重要的思想是类,类是模板是蓝图,从类中构造一个对象,即创建了这个类的一个实例(instance)。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	3.封装:就是把数据和行为结合起在一个包中)并对对象使用者隐藏数据的实现过程,一个对象中的数据叫他的实例字段(instance&amp;nbsp;field)。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	4.通过扩展一个类来获得一个新类叫继承(inheritance),而所有的类都是由Object根超类扩展而得,根超类下文会做介绍。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	5.对象的3个主要特性
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	behavior---说明这个对象能做什么.
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	state---当对象施加方法时对象的反映.
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	identity---与其他相似行为对象的区分标志.
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	每个对象有唯一的indentity
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	而这3者之间相互影响.
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	6.类之间的关系:
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	use-a&amp;nbsp;:依赖关系
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	has-a&amp;nbsp;:聚合关系
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	is-a
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	:继承关系--例:A类继承了B类,此时A类不仅有了B类的方法,还有其自己的方法.(个性存在于共性中)
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	7.构造对象使用构造器:构造器的提出,构造器是一种特殊的方法,构造对象并对其初始化。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	例:Data类的构造器叫Data
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	new&amp;nbsp;Data()---构造一个新对象,且初始化当前时间.
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	Data&amp;nbsp;happyday=new
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	Data()---把一个对象赋值给一个变量happyday,从而使该对象能够多次使用,此处要声明的使变量与对象变量二者是不同的.new返回的值是一个引用。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	构造器特点:构造器可以有0个,一个或多个参数
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	构造器和类有相同的名字
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	一个类可以有多个构造器
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	构造器没有返回值
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	构造器总是和new运算符一起使用.
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	8.重载:当多个方法具有相同的名字而含有不同的参数时,便发生重载.编译器必须挑选出调用哪个方法。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	9.包(package)Java允许把一个或多个类收集在一起成为一组,称作包,以便于组织任务,标准Java库分为许多包.java.lang
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	java.util&amp;nbsp;java,net等,包是分层次的所有的java包都在java和javax包层次内。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	10.继承思想:允许在已经存在的类的基础上构建新的类,当你继承一个已经存在的类时,那么你就复用了这个类的方法和字段,同时你可以在新类中添加新的方法和字段。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	11.扩展类:扩展类充分体现了is-a的继承关系.&amp;nbsp;形式为:class&amp;nbsp;(子类)&amp;nbsp;extends&amp;nbsp;(基类)。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	12.多态:在java中,对象变量是多态的.而java中不支持多重继承。
&lt;/p&gt;
&lt;p&amp;nbsp;style=\"text-indent:2em;\"&gt;
	&lt;p&gt;
		13.动态绑定:调用对象方法的机制。
	&lt;/p&gt;
	&lt;p&gt;
		(1)编译器检查对象声明的类型和方法名。
	&lt;/p&gt;
	&lt;p&gt;
		(2)编译器检查方法调用的参数类型。
	&lt;/p&gt;
	&lt;p&gt;
		(3)静态绑定:若方法类型为priavte&amp;nbsp;static&amp;nbsp;final&amp;nbsp;编译器会准确知道该调用哪个方法。
	&lt;/p&gt;
	&lt;p&gt;
		(4)当程序运行并且使用动态绑定来调用一个方法时,那么虚拟机必须调用x所指向的对象的实际类型相匹配的方法版本。
	&lt;/p&gt;
	&lt;p&gt;
		(5)动态绑定:是很重要的特性,它能使程序变得可扩展而不需要重编译已存代码。
	&lt;/p&gt;
	&lt;p&gt;
		14.final类:为防止他人从你的类上派生新类,此类是不可扩展的。
	&lt;/p&gt;
	&lt;p&gt;
		15.动态调用比静态调用花费的时间要长。
	&lt;/p&gt;
	&lt;p&gt;
		16.抽象类:规定一个或多个抽象方法的类本身必须定义为abstract。
	&lt;/p&gt;
	&lt;p&gt;
		例:&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;string&amp;nbsp;getDescripition
	&lt;/p&gt;
	&lt;p&gt;
		17.Java中的每一个类都是从Object类扩展而来的。
	&lt;/p&gt;
	&lt;p&gt;
		18.object类中的equal和toString方法。
	&lt;/p&gt;
	&lt;p&gt;
		equal用于测试一个对象是否同另一个对象相等。
	&lt;/p&gt;
	&lt;p&gt;
		toString返回一个代表该对象的字符串,几乎每一个类都会重载该方法,以便返回当前状态的正确表示.
	&lt;/p&gt;
	&lt;p&gt;
		(toString
	&lt;/p&gt;
	&lt;p&gt;
		方法是一个很重要的方法)
	&lt;/p&gt;
	&lt;p&gt;
		19.通用编程:任何类类型的所有值都可以同object类性的变量来代替。
	&lt;/p&gt;
	&lt;p&gt;
		20.数组列表:ArrayList动态数组列表,是一个类库,定义在java.uitl包中,可自动调节数组的大小。
	&lt;/p&gt;
	&lt;p&gt;
		21.class类
	&lt;/p&gt;
	&lt;p&gt;
		object类中的getclass方法返回ckass类型的一个实例,程序启动时包含在main方法的类会被加载,虚拟机要加载他需要的所有类,每一个加载的类都要加载它需要的类。
	&lt;/p&gt;
	&lt;p&gt;
		22.class类为编写可动态操纵java代码的程序提供了强大的功能反射,这项功能为JavaBeans特别有用,使用反射Java能支持VB程序员习惯使用的工具。
	&lt;/p&gt;
	&lt;p&gt;
		能够分析类能力的程序叫反射器,Java中提供此功能的包叫Java.lang.reflect反射机制十分强大.
	&lt;/p&gt;
	&lt;p&gt;
		1.在运行时分析类的能力。
	&lt;/p&gt;
	&lt;p&gt;
		2.在运行时探察类的对象。
	&lt;/p&gt;
	&lt;p&gt;
		3.实现通用数组操纵代码。
	&lt;/p&gt;
	&lt;p&gt;
		4.提供方法对象。
	&lt;/p&gt;
	&lt;p&gt;
		而此机制主要针对是工具者而不是应用及程序。
	&lt;/p&gt;
	&lt;p&gt;
		反射机制中的最重要的部分是允许你检查类的结构.用到的API有:
	&lt;/p&gt;
	&lt;p&gt;
		java.lang.reflect.Field&amp;nbsp;返回字段.
	&lt;/p&gt;
	&lt;p&gt;
		java.reflect.Method
	&lt;/p&gt;
	&lt;p&gt;
		返回方法.
	&lt;/p&gt;
	&lt;p&gt;
		java.lang.reflect.Constructor&amp;nbsp;返回参数.
	&lt;/p&gt;
	&lt;p&gt;
		方法指针:java没有方法指针,把一个方法的地址传给另一个方法,可以在后面调用它,而接口是更好的解决方案。
	&lt;/p&gt;
	&lt;p&gt;
		23.接口(Interface)说明类该做什么而不指定如何去做,一个类可以实现一个或多个interface。
	&lt;/p&gt;
	&lt;p&gt;
		24.接口不是一个类,而是对符合接口要求的类的一套规范。
	&lt;/p&gt;
	&lt;p&gt;
		若实现一个接口需要2个步骤:
	&lt;/p&gt;
	&lt;p&gt;
		1.声明类需要实现的指定接口。
	&lt;/p&gt;
	&lt;p&gt;
		2.提供接口中的所有方法的定义。
	&lt;/p&gt;
	&lt;p&gt;
		声明一个类实现一个接口需要使用implements&amp;nbsp;关键字
	&lt;/p&gt;
	&lt;p&gt;
		class&amp;nbsp;actionB&amp;nbsp;implements&amp;nbsp;Comparable
	&lt;/p&gt;
	&lt;p&gt;
		其actionb需要提供CompareTo方法,接口不是类,不能用new实例化一个接口.
	&lt;/p&gt;
	&lt;p&gt;
		25.一个类只有一个超类,但一个类能实现多个接口。Java中的一个重要接口：Cloneable
	&lt;/p&gt;
	&lt;p&gt;
		26.接口和回调.编程一个常用的模式是回调模式,在这种模式中你可以指定当一个特定时间发生时回调对象上的方法。
	&lt;/p&gt;
	&lt;p&gt;
		例:ActionListener&amp;nbsp;接口监听.
	&lt;/p&gt;
	&lt;p&gt;
		类似的API有:java.swing.JOptionPane
	&lt;/p&gt;
	&lt;p&gt;
		java.swing.Timer
	&lt;/p&gt;
	&lt;p&gt;
		java.awt.Tookit
	&lt;/p&gt;
	&lt;p&gt;
		27.对象clone:clone方法是object一个保护方法,这意味着你的代码不能简单的调用它。
	&lt;/p&gt;
	&lt;p&gt;
		28.内部类:一个内部类的定义是定义在另一个内部的类。
	&lt;/p&gt;
	&lt;p&gt;
		原因是:
	&lt;/p&gt;
	&lt;p&gt;
		1.一个内部类的对象能够访问创建它的对象的实现,包括私有数据。
	&lt;/p&gt;
	&lt;p&gt;
		2.对于同一个包中的其他类来说,内部类能够隐藏起来。
	&lt;/p&gt;
	&lt;p&gt;
		3.匿名内部类可以很方便的定义回调。
	&lt;/p&gt;
	&lt;p&gt;
		4.使用内部类可以非常方便的编写事件驱动程序。
	&lt;/p&gt;
	&lt;p&gt;
		29.代理类(proxy):
	&lt;/p&gt;
	&lt;p&gt;
		1.指定接口要求所有代码
	&lt;/p&gt;
	&lt;p&gt;
		2.object类定义的所有的方法(toString&amp;nbsp;equals)
	&lt;/p&gt;
	&lt;p&gt;
		30.数据类型:Java是强调类型的语言,每个变量都必须先申明它都类型,java中总共有8个基本类型.4种是整型,2种是浮点型,一种是字符型,被用于Unicode编码中的字符,布尔型。
	&lt;/p&gt;
&lt;/p&gt;</content>
  <contentx>前言:


	在我们学习Java的过程中,掌握其中的基本概念对我们的学习无论是J2SE,J2EE,J2ME都是很重要的,J2SE是Java的基础,所以有必要对其中的基本概念做以归纳,以便大家在以后的学习过程中更好的理解java的精髓,在此我总结了30条基本的概念。


	Java概述:


	目前Java主要应用于中间件的开发(middleware)---处</contentx>
  <tags>_null_</tags>
</root>
