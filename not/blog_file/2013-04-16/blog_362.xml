<?xml version="1.0" encoding="UTF-8"?>
<root>
  <title><![CDATA[如何学会600多种编程语言]]></title>
  <content><![CDATA[<p>
	<img src=\"http://upload.chinaz.com/2013/0320/1363761654932.jpg\" alt=\"\" />
</p>
<p>
	几周前，做为8th Light公司的实习生，我从CEO那里拿到了我的工作成绩报告。在与CEO的会见期间，我发现了一个对如何做一个程序员的认识上的盲区。起初我以为，想扩展自己的软件职业道路，那就要学很多各种的语言。我现在就要告诉你，事情不是这样的。
</p>
<br>
<br>
<p>
	我们一共有多少种编程语言？你只需看一下维基百科上的清单，600多种！说实话，就我个人的情况，我不相信我能学会数百种语言。因为有太多的文档需要看，它们之间有太多的差异需要注意。它们很多都是相似的，例如那些面向对象的语言：C++，Java，Ruby，Python等。然而，我们却有一种更高效的方法学习它们，那就是对它们归纳分类。
</p>
<br>
<p>
	在美国德锐大学，每个毕业生要接受的一门必修课程教育就是如何有效的学习。我很幸运遇到一位非常好的教授，Sugarman先生，我才有机会学到学习方法。尽管这个方法非常的基础，但它几乎能应用到任何事情上——不论它们的数量看起来是多么不可思议。
</p>
<br>
<p>
	面向对象编程语言的基础理论要点：
</p>
<p>
	学习基础理论要点，例如设计模式/范式，这样你就知道了在所有面向对象的编程语言中共同的知识，而不是只提高了一种语言水平。这是学习编程语言最有效的方法。
</p>
<br>
<p>
	编程语言的类型有很多种，例如函数式语言，面向对象语言，面向数据语言（更多）。通过把各种语言归纳分类，这600种语言大概可以分成50类。通过学习每种分类的基础理论要点，再学习分类中的不同语言就变得容易多了。这里我给出一个例子。
</p>
<br>
<p>
	对于面向对象编程语言，有5个基本原则能帮助你写出整洁优秀的代码。这些原则由Bob Martin总结，叫做SOLID原则。这里有一篇文章用图片形式很好的对这些原则进行了解释说明。这些原则是：
</p>
<br>
<p>
	一个对象只承担一种责任，所有服务接口只通过它来执行这种任务。
</p>
<p>
	程序实体，比如类和对象，向扩展行为开放，向修改行为关闭。
</p>
<p>
	子类应该可以用来替代它所继承的类。
</p>
<p>
	一个类对另一个类的依赖应该限制在最小化的接口上。
</p>
<p>
	依赖抽象层（接口），而不是具体类。
</p>
<p>
	通过学习这些原则，你可以在所有面向对象语言里更有效的进行编程。当然，你需要学会一门这种类型的语言来练习这些原则，但这是完全值得的。
</p>
<br>
<p>
	各种面向对象语言间的不同之处：
</p>
<p>
	同属于面向对象语言，它们之间存在大量不同之处：
</p>
<p>
	语法：了解各种语言在语法句式上的差异有很多好处，其中之一能帮助优化你的编码。通过让一个方法或类跟它的行为在特征是保持相似，这能让程序更容易懂。
</p>
<br>
<p>
	独特性：每种编程语言跟其它种比起来都有自己的独特之处。Java有私有方法和数据自定义上的特点，Ruby在Web应用上有很强的优势。
</p>
<p>
	<strong>总之，学习各种语言之间的区别很重要。这种语言可能比那种语言中某些方面更容易使用或更强大。</strong>
</p>
<br>
<p>
	学习编程语言最有效的方法是学习它们的基础性的模式/范式，这比单独学习每种语言更高效。通过学习这些基础原理，你可以把它们应用到很多其它类似的语言里。学习各种语言之间的差异，这能帮助我们在面对各种情况时选择更合适的语言。
</p>
<br>
<p>
	［英文原文：What it means to know Programming Languages ］
</p>
<br>]]></content>
  <contentx><![CDATA[
	


	几周前，做为8th Light公司的实习生，我从CEO那里拿到了我的工作成绩报告。在与CEO的会见期间，我发现了一个对如何做一个程序员的认识上的盲区。起初我以为，想扩展自己的软件职业道路，那就要学很多各种的语言。我现在就要告诉你]]></contentx>
  <tags>_null_</tags>
  <parseVersion>1.1</parseVersion>
</root>
