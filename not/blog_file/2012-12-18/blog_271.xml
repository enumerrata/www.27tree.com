<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>201</uid>
  <datetime>2012-12-18 22:16:25</datetime>
  <title><![CDATA[php.ini的中文版本]]></title>
  <content><![CDATA[<p>
	php.ini是一个很重要的文件，尤其是在个人开发环境中，正确理解ini文件中每一个属性的取值将有利于你明白自己的php开发运行环境。当你的php脚本出现了你不能理解的错误时，有时有可能就是因为某个属性值的设置而引起的。
</p>
<p>
	下面提供一个中文版本的php.ini文件的内容，认真读一遍，你会有很多收益的。
</p>
<p>
	<p>
		[PHP]
	</p>
	<p>
		; PHP还是一个不断发展的工具，其功能还在不断地删减
	</p>
	<p>
		; 而php.ini的设置更改可以反映出相当的变化，
	</p>
	<p>
		; 在使用新的PHP版本前，研究一下php.ini会有好处的;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 关于这个文件 ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 这个文件控制了PHP许多方面的观点。为了让PHP读取这个文件，它必须被命名为
	</p>
	<p>
		; \'php.ini\'。PHP 将在这些地方依次查找该文件：当前工作目录；环境变量PHPRC
	</p>
	<p>
		; 指明的路径；编译时指定的路径。
	</p>
	<p>
		; 在windows下，编译时的路径是Windows安装目录。
	</p>
	<p>
		; 在命令行模式下，php.ini的查找路径可以用 -c 参数替代。
	</p>
	<p>
		; 该文件的语法非常简单。空白字符和用分号\';\'开始的行被简单地忽略（就象你可能
	</p>
	<p>
		; 猜到的一样）。 章节标题（例如 : [Foo]）也被简单地忽略，即使将来它们可能
	</p>
	<p>
		; 有某种的意义。
	</p>
	<p>
		;
	</p>
	<p>
		; 指示被指定使用如下语法：
	</p>
	<p>
		; 指示标识符 = 值
	</p>
	<p>
		; directive = value
	</p>
	<p>
		; 指示标识符 是 *大小写敏感的* - foo=bar 不同于 FOO = bar。
	</p>
	<p>
		;
	</p>
	<p>
		; 值可以是一个字符串，一个数字，一个 PHP 常量 (如： E_ALL or M_PI), INI 常量中的
	</p>
	<p>
		; 一个 (On, Off, True, False, Yes, No and None) ，或是一个表达式
	</p>
	<p>
		; (如: E_ALL &amp; ~E_NOTICE), 或是用引号括起来的字符串(\"foo\").
	</p>
	<p>
		;
	</p>
	<p>
		; INI 文件的表达式被限制于位运算符和括号。
	</p>
	<p>
		; | bitwise OR
	</p>
	<p>
		; &amp; bitwise AND
	</p>
	<p>
		; ~ bitwise NOT
	</p>
	<p>
		; ! boolean NOT
	</p>
	<p>
		;
	</p>
	<p>
		; 布尔标志可用 1, On, True or Yes 这些值置于开的状态。
	</p>
	<p>
		; 它们可用 0, Off, False or No 这些值置于关的状态。
	</p>
	<p>
		;
	</p>
	<p>
		; 一个空字符串可以用在等号后不写任何东西表示，或者用 None 关键字:
	</p>
	<p>
		;
	</p>
	<p>
		; foo = ; 将foo置为空字符串
	</p>
	<p>
		; foo = none ; 将foo置为空字符串
	</p>
	<p>
		; foo = \"none\" ; 将foo置为字符串\'none\'
	</p>
	<p>
		;
	</p>
	<p>
		; 如果你值设置中使用常量，而这些常量属于动态调入的扩展库（不是 PHP 的扩展，就是
	</p>
	<p>
		; Zend 的扩展），你仅可以调入这些扩展的行*之后*使用这些常量。
	</p>
	<p>
		;
	</p>
	<p>
		; 所有在 php.ini-dist 文件里设定的值与内建的默认值相同（这是说，如果 php.ini
	</p>
	<p>
		; 没被使用或者你删掉了这些行，默认值与之相同）。
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 语言选项 ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		engine = On
	</p>
	<p>
		; 使 PHP scripting language engine（PHP 脚本语言引擎）在 Apache下有效。
	</p>
	<p>
		short_open_tag = On
	</p>
	<p>
		; 允许 &lt;? 标识（这种简单表示）。否则 仅有 &lt;?php and &lt;script&gt; tags 将被识别。
	</p>
	<p>
		asp_tags = Off
	</p>
	<p>
		; 允许ASP-style &lt;% %&gt; tags
	</p>
	<p>
		precision = 14
	</p>
	<p>
		; 浮点类型数显示时的有效位数
	</p>
	<p>
		y2k_compliance = Off
	</p>
	<p>
		; 是否打开 2000年适应 (可能在非Y2K适应的浏览器中导致问题)
	</p>
	<p>
		output_buffering = Off
	</p>
	<p>
		; 输出缓存允许你甚至在输出正文内容之后发送 header（标头，包括cookies）行
	</p>
	<p>
		; 其代价是输出层减慢一点点速度。你可以使用输出缓存在运行时打开输出缓存，
	</p>
	<p>
		; 或者在这里将指示设为 On 而使得所有文件的输出缓存打开。
	</p>
	<p>
		output_handler = ; 你可以重定向你的脚本的所有输出到一个函数，
	</p>
	<p>
		; 那样做可能对处理或以日志记录它有用。
	</p>
	<p>
		; 例如若你将这个output_handler 设为\"ob_gzhandler\",
	</p>
	<p>
		; 则输出会被透明地为支持gzip或deflate编码的浏览器压缩。
	</p>
	<p>
		; 设一个输出处理器自动地打开输出缓冲。
	</p>
	<p>
		implicit_flush = Off
	</p>
	<p>
		; 强制flush（刷新）让PHP 告诉输出层在每个输出块之后自动刷新自身数据。
	</p>
	<p>
		; 这等效于在每个 print() 或 echo() 调用和每个 HTML 块后调用flush()函数。
	</p>
	<p>
		; 打开这项设置会导致严重的运行时冲突，建议仅在debug过程中打开。
	</p>
	<p>
		allow_call_time_pass_reference = On
	</p>
	<p>
		; 是否让强迫函数调用时按引用传递参数。这一方法遭到抗议，
	</p>
	<p>
		; 并可能在将来版本的PHP/Zend里不再支持。
	</p>
	<p>
		; 受到鼓励的指定哪些参数按引用传递的方法是在函数声明里。
	</p>
	<p>
		; 你被鼓励尝试关闭这一选项并确认你的脚本仍能正常工作，以保证在将来版本的语言里
	</p>
	<p>
		; 它们仍能工作。（你将在每次使用该特点时得到一个警告，而参数将按值而不是按引用
	</p>
	<p>
		; 传递）。
	</p>
	<p>
		; Safe Mode 安全模式
	</p>
	<p>
		safe_mode = Off
	</p>
	<p>
		safe_mode_exec_dir =
	</p>
	<p>
		safe_mode_allowed_env_vars = PHP_
	</p>
	<p>
		; ？Setting certain environment variables
	</p>
	<p>
		; ？may be a potential security breach.
	</p>
	<p>
		; 该指示包含用逗号分隔的前缀列表。安全模式中，用户仅可以替换
	</p>
	<p>
		; 以在此列出的前缀开头的环境变量的值。
	</p>
	<p>
		; 默认地，用户将仅能 设定以PHP_开头的环境变量，（如: PHP_FOO=BAR）。
	</p>
	<p>
		; 注意: 如果这一指示为空，PHP 将让用户更改任意环境变量!
	</p>
	<p>
		safe_mode_protected_env_vars = LD_LIBRARY_PATH
	</p>
	<p>
		; 这条指示包含一个用逗号分隔的环境变量列表，那是最终用户将不能用putenv () 更改的。
	</p>
	<p>
		; 这些变量甚至在safe_mode_allowed_env_vars 设置为允许的情况下得到保护。
	</p>
	<p>
		disable_functions =
	</p>
	<p>
		; 这条指示让你可以为了安全的原因让特定函数失效。
	</p>
	<p>
		; 它接受一个用逗号分隔的函数名列表。
	</p>
	<p>
		; 这条指示 *不受* 安全模式是否打开的影响。
	</p>
	<p>
		; 语法高亮模式的色彩。
	</p>
	<p>
		; 只要能被&lt;font color=???&gt;接受的东西就能工作。
	</p>
	<p>
		highlight.string = #DD0000
	</p>
	<p>
		highlight.comment = #FF8000
	</p>
	<p>
		highlight.keyword = #007700
	</p>
	<p>
		highlight.bg = #FFFFFF
	</p>
	<p>
		highlight.default = #0000BB
	</p>
	<p>
		highlight.html = #000000
	</p>
	<p>
		; Misc 杂项
	</p>
	<p>
		expose_php = Off
	</p>
	<p>
		; 决定 PHP 是否标示它装在服务器上的事实（例如：加在它 —PHP—给Web服务
	</p>
	<p>
		; 发送的信号上）。
	</p>
	<p>
		; （我个人的意见，在出现什么power-by的header的时候，把这关掉。）
	</p>
	<p>
		; 它不会有安全上的威胁, 但它使检查你的服务器上是否安装了PHP成为了可能。
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; Resource Limits ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		max_execution_time = 30 ; 每个脚本的最大执行时间, 按秒计
	</p>
	<p>
		memory_limit = 8388608 ; 一个脚本最大可使用的内存总量 (这里是8MB)
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; Error handling and logging ;
	</p>
	<p>
		; 出错控制和登记 ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 错误报告是按位的。或者将数字加起来得到想要的错误报告等级。
	</p>
	<p>
		; E_ALL - 所有的错误和警告
	</p>
	<p>
		; E_ERROR - 致命性运行时错
	</p>
	<p>
		; E_WARNING - 运行时警告（非致命性错）
	</p>
	<p>
		; E_PARSE - 编译时解析错误
	</p>
	<p>
		; E_NOTICE - 运行时提醒(这些经常是是你的代码的bug引起的，
	</p>
	<p>
		;也可能是有意的行为造成的。(如：基于未初始化的变量自动初始化为一个
	</p>
	<p>
		;空字符串的事实而使用一个未初始化的变量)
	</p>
	<p>
		; E_CORE_ERROR - 发生于PHP启动时初始化过程中的致命错误
	</p>
	<p>
		; E_CORE_WARNING - 发生于PHP启动时初始化过程中的警告(非致命性错)
	</p>
	<p>
		; E_COMPILE_ERROR - 编译时致命性错
	</p>
	<p>
		; E_COMPILE_WARNING - 编译时警告(非致命性错)
	</p>
	<p>
		; E_USER_ERROR - 用户产生的出错消息
	</p>
	<p>
		; E_USER_WARNING - 用户产生的警告消息
	</p>
	<p>
		; E_USER_NOTICE - 用户产生的提醒消息
	</p>
	<p>
		; 例子:
	</p>
	<p>
		; error_reporting = E_ALL &amp; ~E_NOTICE ; 显示所有的错误，除了提醒
	</p>
	<p>
		; error_reporting = E_COMPILE_ERROR|E_ERROR|E_CORE_ERROR ; 仅显示错误
	</p>
	<p>
		error_reporting = E_ALL &amp; ~E_NOTICE ; 显示所有的错误，除了提醒
	</p>
	<p>
		display_errors = On ; 显示出错误信息(作为输出的一部分)
	</p>
	<p>
		; 在最终发布的web站点上，强烈建议你关掉这个特性，并使用
	</p>
	<p>
		; 错误日志代替（参看下面）。
	</p>
	<p>
		; 在最终发布的web站点继续让 display_errors 有效可能
	</p>
	<p>
		; 暴露一些有关安全的信息，例如你的web服务上的文件路径、
	</p>
	<p>
		; 你的数据库规划或别的信息。
	</p>
	<p>
		display_startup_errors = Off ; 甚至当display_erroes打开了，发生于PHP的启动的步骤中
	</p>
	<p>
		; 的错误也不会被显示。
	</p>
	<p>
		; 强烈建议保持使 display_startup_errors 关闭，
	</p>
	<p>
		; 除了在改错过程中。
	</p>
	<p>
		log_errors = Off ; 在日志文件里记录错误（服务器指定的日志，stderr标准错误输出，或error_log(下面的））
	</p>
	<p>
		; 正如上面说明的那样，强烈建议你在最终发布的web站点以日志记录错误
	</p>
	<p>
		; 取代直接错误输出。
	</p>
	<p>
		track_errors = Off ; 保存最近一个 错误/警告 消息于变量 $php_errormsg (boolean)
	</p>
	<p>
		;error_prepend_string = \"&lt;font color=ff0000&gt;\" ; 于错误信息前输出的字符串
	</p>
	<p>
		;error_append_string = \"&lt;/font&gt;\" ; 于错误信息后输出的字符串
	</p>
	<p>
		;error_log = filename ; 记录错误日志于指定文件
	</p>
	<p>
		;error_log = syslog ; 记录错误日志于系统日志 syslog (NT 下的事件日志, Windows 95下无效)
	</p>
	<p>
		warn_plus_overloading = Off ; 当将‘+’用于字符串时警告
	</p>
	<p>
		;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; Data Handling ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;
	</p>
	<p>
		variables_order = \"EGPCS\" ; 这条指示描述了PHP 记录
	</p>
	<p>
		; GET, POST, Cookie, Environment and Built-in 这些变量的顺序。
	</p>
	<p>
		; （以 G, P, C, E &amp; S 代表，通常以 EGPCS 或 GPC 的方式引用）。
	</p>
	<p>
		; 按从左到右记录，新值取代旧值。
	</p>
	<p>
		register_globals = On ; 是否将这些 EGPCS 变量注册为全局变量。
	</p>
	<p>
		; 若你不想让用户数据不在全局范围内混乱的话，你可能想关闭它。
	</p>
	<p>
		; 这和 track_vars 连起来用更有意义 — 这样你可以通过
	</p>
	<p>
		; $HTTP_*_VARS[] 数组访问所有的GPC变量。 ; 过去这个变量默认是On，所以很多脚本习惯了使用$xxx的变量名而不是$HTTP_*_VARS[] ; 或者$_*[]，php5之后为了确保兼容以前的脚本，也许你需要打开这个
	</p>
	<p>
		register_argc_argv = On ; 这条指示告诉 PHP 是否声明 argv和argc 变量
	</p>
	<p>
		; （注：这里argv为数组,argc为变量数）
	</p>
	<p>
		; （其中包含用GET方法传来的数据）。
	</p>
	<p>
		; 若你不想用这些变量，你应当关掉它以提高性能。
	</p>
	<p>
		track_vars = On ; 使$HTTP_*_VARS[]数组有效，这里*在使用时用
	</p>
	<p>
		; ENV, POST, GET, COOKIE or SERVER替换
	</p>
	<p>
		post_max_size = 8M ; PHP将接受的POST数据最大大小。
	</p>
	<p>
		gpc_order = \"GPC\" ; 这条指示被人反对。用 variables_order 代替。
	</p>
	<p>
		; Magic quotes
	</p>
	<p>
		magic_quotes_gpc = On ; 在输入的GET/POST/Cookie数据里使用魔术引用
	</p>
	<p>
		; （原文就这样，呵呵，所谓magic quotes 应该是指用转义符加在引用性的控制字符上，如 \'....）
	</p>
	<p>
		magic_quotes_runtime= Off ; 对运行时产生的数据使用魔术引用，
	</p>
	<p>
		; 例如：用SQL查询得到的数据，用exec()函数得到的数据，等等
	</p>
	<p>
		magic_quotes_sybase = Off ; 采用 Sybase形式的魔术引用（用 \'\' 脱出 \' 而不用\\\'）
	</p>
	<p>
		; 自动在 PHP 文档之前和之后添加文件
	</p>
	<p>
		auto_prepend_file =
	</p>
	<p>
		auto_append_file =
	</p>
	<p>
		; 象4.04b4一样，PHP 默认地总是在 “Content-type:” 头标输出一个字符的编码方式。
	</p>
	<p>
		; 让输出字符集失效，只要设置为空。
	</p>
	<p>
		; PHP 的内建默认值是 text/html
	</p>
	<p>
		default_mimetype = \"text/html\"
	</p>
	<p>
		;default_charset = \"iso-8859-1\"
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; Paths and Directories ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		include_path = ; include 路径设置，UNIX: \"/path1:/path2\" Windows: \"\\path1;\\path2\"
	</p>
	<p>
		doc_root = ; php 页面的根路径，仅在非空时有效
	</p>
	<p>
		user_dir = ; 告知 php 在使用 /~username 打开脚本时到哪个目录下去找，仅在非空时有效
	</p>
	<p>
		;upload_tmp_dir = ; 存放用HTTP协议上载的文件的临时目录（在没指定时使用系统默认的）
	</p>
	<p>
		upload_max_filesize = 2097152 ; 文件上载默认地限制为2 Meg
	</p>
	<p>
		extension_dir = c:\\php\\ ; 存放可加载的扩充库（模块）的目录
	</p>
	<p>
		enable_dl = On ; 是否使dl()有效。
	</p>
	<p>
		; 在多线程的服务器上 dl()函数*不能*很好地工作，
	</p>
	<p>
		; 例如IIS or Zeus，并在其上默认为禁止
	</p>
	<p>
		;;;;;;;;;;;;;;;;
	</p>
	<p>
		; File Uploads ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;
	</p>
	<p>
		file_uploads = On ; 是否允许HTTP方式文件上载
	</p>
	<p>
		;upload_tmp_dir = ; 用于HTTP上载的文件的临时目录（未指定则使用系统默认）
	</p>
	<p>
		upload_max_filesize = 2M ; 上载文件的最大许可大小
	</p>
	<p>
		; Fopen wrappers ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		allow_url_fopen = On ; 是否允许把URLs当作http:.. 或把文件当作ftp:...
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 动态扩展 ;
	</p>
	<p>
		; Dynamic Extensions ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 若你希望一个扩展库自动加载，用下面的语法：
	</p>
	<p>
		; extension=modulename.extension
	</p>
	<p>
		; 例如，在windows上，
	</p>
	<p>
		; extension=msql.dll
	</p>
	<p>
		; or 在UNIX下,
	</p>
	<p>
		; extension=msql.so
	</p>
	<p>
		; 注意，这只应当是模块的名字，不需要目录信息放在里面。
	</p>
	<p>
		; 用上面的 extension_dir 指示指定扩展库的位置。
	</p>
	<p>
		;Windows 扩展
	</p>
	<p>
		;extension=php_nsmail.dll
	</p>
	<p>
		extension=php_calendar.dll
	</p>
	<p>
		;extension=php_dbase.dll
	</p>
	<p>
		;extension=php_filepro.dll
	</p>
	<p>
		extension=php_gd.dll
	</p>
	<p>
		;extension=php_dbm.dll
	</p>
	<p>
		;extension=php_mssql.dll
	</p>
	<p>
		;extension=php_zlib.dll
	</p>
	<p>
		;extension=php_filepro.dll
	</p>
	<p>
		;extension=php_imap4r2.dll
	</p>
	<p>
		;extension=php_ldap.dll
	</p>
	<p>
		;extension=php_crypt.dll
	</p>
	<p>
		;extension=php_msql2.dll
	</p>
	<p>
		;extension=php_odbc.dll
	</p>
	<p>
		extension=php_mysql.dll extension=php_mysqli.dll ;php5对mysql不再内建支持，所以如果发现有上面这两行，需要加载它们
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		; 模块设定 ;
	</p>
	<p>
		; Module Settings ;
	</p>
	<p>
		;;;;;;;;;;;;;;;;;;;
	</p>
	<p>
		[Syslog]
	</p>
	<p>
		define_syslog_variables = Off ; 是否定义各种的系统日志变量
	</p>
	<p>
		; 如：$LOG_PID, $LOG_CRON, 等等。
	</p>
	<p>
		; 关掉它是个提高效率的好主意。
	</p>
	<p>
		; 运行时，你可以调用函数define_syslog_variables()，来定义这些变量
	</p>
	<p>
		[mail function]
	</p>
	<p>
		SMTP = localhost ;仅用于win32系统
	</p>
	<p>
		sendmail_from = me@localhost.com ;仅用于win32系统
	</p>
	<p>
		;sendmail_path = ;仅用于unix, 也可支持参数（默认的是\'sendmail -t -i\'）
	</p>
	<p>
		[Debugger]
	</p>
	<p>
		debugger.host = localhost
	</p>
	<p>
		debugger.port = 7869
	</p>
	<p>
		debugger.enabled = False
	</p>
	<p>
		[Logging]
	</p>
	<p>
		; 这些配置指示用于示例的日志记录机制。
	</p>
	<p>
		; 看 examples/README.logging 以得到更多的解释
	</p>
	<p>
		;logging.method = db
	</p>
	<p>
		;logging.directory = /path/to/log/directory
	</p>
	<p>
		[Java]
	</p>
	<p>
		;java.class.path = .\\php_java.jar
	</p>
	<p>
		;java.home = c:\\jdk
	</p>
	<p>
		;java.library = c:\\jdk\\jre\\bin\\hotspot\\jvm.dll
	</p>
	<p>
		;java.library.path = .\\
	</p>
	<p>
		[SQL]
	</p>
	<p>
		sql.safe_mode = Off
	</p>
	<p>
		[ODBC]
	</p>
	<p>
		;uodbc.default_db = Not yet implemented
	</p>
	<p>
		;uodbc.default_user = Not yet implemented
	</p>
	<p>
		;uodbc.default_pw = Not yet implemented
	</p>
	<p>
		uodbc.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		uodbc.check_persistent = On ; 在重用前检查连接是否还可用
	</p>
	<p>
		uodbc.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		uodbc.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		uodbc.defaultlrl = 4096 ; 控制 LONG 类型的字段。返回变量的字节数，0 代表通过（？）0 means passthru
	</p>
	<p>
		uodbc.defaultbinmode = 1 ; 控制 二进制数据。0 代表?????Handling of binary data. 0 means passthru, 1 return as is, 2 convert to char
	</p>
	<p>
		; 见有关 odbc_binmode 和 odbc_longreadlen 的文档以得到 uodbc.defaultlrl 和 uodbc.defaultbinmode 的解释。
	</p>
	<p>
		[MySQL]
	</p>
	<p>
		mysql.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		mysql.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		mysql.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		mysql.default_port = ; mysql_connect() 使用的默认端口，如不设置，mysql_connect()
	</p>
	<p>
		; 将使用变量 $MYSQL_TCP_PORT，或在/etc/services 下的mysql-tcp 条目(unix)，
	</p>
	<p>
		; 或在编译是定义的 MYSQL_PORT(按这样的顺序)
	</p>
	<p>
		; Win32环境，将仅检查MYSQL_PORT。
	</p>
	<p>
		mysql.default_socket = ; 用于本地 MySql 连接的默认的套接字名。为空，使用 MYSQL 内建值
	</p>
	<p>
		mysql.default_host = ; mysql_connect() 默认使用的主机（安全模式下无效）
	</p>
	<p>
		mysql.default_user = ; mysql_connect() 默认使用的用户名（安全模式下无效）
	</p>
	<p>
		mysql.default_password = ; mysql_connect() 默认使用的密码（安全模式下无效）
	</p>
	<p>
		; 注意，在这个文件下保存密码通常是一个*坏*主意
	</p>
	<p>
		; *任何*可以使用PHP访问的用户可以运行
	</p>
	<p>
		; \'echo cfg_get_var(\"mysql.default_password\")\'来显示那个密码!
	</p>
	<p>
		; 而且当然地，任何有读该文件权力的用户也能看到那个密码。
	</p>
	<p>
		[mSQL]
	</p>
	<p>
		msql.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		msql.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		msql.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		[PostgresSQL]
	</p>
	<p>
		pgsql.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		pgsql.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		pgsql.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		[Sybase]
	</p>
	<p>
		sybase.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		sybase.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		sybase.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		;sybase.interface_file = \"/usr/sybase/interfaces\"
	</p>
	<p>
		sybase.min_error_severity = 10 ; 显示的错误的最低严重性
	</p>
	<p>
		sybase.min_message_severity = 10 ; 显示的消息的最低重要性
	</p>
	<p>
		sybase.compatability_mode = Off ; 与旧版的PHP 3.0 兼容的模式。若打开，这将导致 PHP 自动地
	</p>
	<p>
		; 把根据结果的 Sybase 类型赋予它们，
	</p>
	<p>
		; 而不是把它们全当成字符串。
	</p>
	<p>
		; 这个兼容模式不会永远留着，
	</p>
	<p>
		; 因此，将你的代码进行需要的修改，
	</p>
	<p>
		; 并将该项关闭。
	</p>
	<p>
		[Sybase-CT]
	</p>
	<p>
		sybct.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		sybct.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		sybct.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		sybct.min_server_severity = 10 ; 显示的错误的最低严重性
	</p>
	<p>
		sybct.min_client_severity = 10 ; 显示的消息的最低重要性
	</p>
	<p>
		[bcmath]
	</p>
	<p>
		bcmath.scale = 0 ; 用于所有bcmath函数的10十进制数数字的个数number of decimal digits for all bcmath functions
	</p>
	<p>
		[browscap]
	</p>
	<p>
		;browscap = extra/browscap.ini
	</p>
	<p>
		browscap = C:\\WIN\\SYSTEM\\inetsrv\\browscap.ini
	</p>
	<p>
		[Informix]
	</p>
	<p>
		ifx.default_host = ; ifx_connect() 默认使用的主机（安全模式下无效）
	</p>
	<p>
		ifx.default_user = ; ifx_connect() 默认使用的用户名（安全模式下无效）
	</p>
	<p>
		ifx.default_password = ; ifx_connect() 默认使用的密码（安全模式下无效）
	</p>
	<p>
		ifx.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		ifx.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		ifx.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		ifx.textasvarchar = 0 ; 若打开，select 状态符返回一个 ‘text blob’字段的内容，而不是它的id
	</p>
	<p>
		ifx.byteasvarchar = 0 ; 若打开，select 状态符返回一个 ‘byte blob’字段的内容，而不是它的id
	</p>
	<p>
		ifx.charasvarchar = 0 ; 追踪从固定长度的字符列里剥离的空格。
	</p>
	<p>
		; 可能对 Informix SE 用户有效。
	</p>
	<p>
		ifx.blobinfile = 0 ; 若打开，text和byte blobs 的内容被导出到一个文件
	</p>
	<p>
		; 而不是保存到内存。
	</p>
	<p>
		ifx.nullformat = 0 ; NULL（空）被作为空字段返回，除非，这里被设为1。
	</p>
	<p>
		; 这种情况下（为1），NULL作为字串NULL返回。
	</p>
	<p>
		[Session]
	</p>
	<p>
		session.save_handler = files ; 用于保存/取回数据的控制方式
	</p>
	<p>
		session.save_path = C:\\win\\temp ; 在 save_handler 设为文件时传给控制器的参数，
	</p>
	<p>
		; 这是数据文件将保存的路径。
	</p>
	<p>
		session.use_cookies = 1 ; 是否使用cookies
	</p>
	<p>
		session.name = PHPSESSID
	</p>
	<p>
		; 用在cookie里的session的名字
	</p>
	<p>
		session.auto_start = 0 ; 在请求启动时初始化session
	</p>
	<p>
		session.cookie_lifetime = 0 ; 为按秒记的cookie的保存时间，
	</p>
	<p>
		; 或为0时，直到浏览器被重启
	</p>
	<p>
		session.cookie_path = / ; cookie的有效路径
	</p>
	<p>
		session.cookie_domain = ; cookie的有效域
	</p>
	<p>
		session.serialize_handler = php ; 用于连接数据的控制器
	</p>
	<p>
		; php是 PHP 的标准控制器。
	</p>
	<p>
		session.gc_probability = 1 ; 按百分比的\'garbage collection（碎片整理）\'进程
	</p>
	<p>
		; 在每次 session 初始化的时候开始的可能性。
	</p>
	<p>
		session.gc_maxlifetime = 1440 ; 在这里数字所指的秒数后，保存的数据将被视为
	</p>
	<p>
		; \'碎片(garbage)\'并由gc 进程清理掉。
	</p>
	<p>
		session.referer_check = ; 检查 HTTP引用以使额外包含于URLs中的ids无效
	</p>
	<p>
		session.entropy_length = 0 ; 从文件中读取多少字节
	</p>
	<p>
		session.entropy_file = ; 指定这里建立 session id
	</p>
	<p>
		; session.entropy_length = 16
	</p>
	<p>
		; session.entropy_file = /dev/urandom
	</p>
	<p>
		session.cache_limiter = nocache ; 设为{nocache,private,public},以决定 HTTP 的
	</p>
	<p>
		; 缓存问题
	</p>
	<p>
		session.cache_expire = 180 ; 文档在 n 分钟后过时
	</p>
	<p>
		session.use_trans_sid = 1 ; 使用过渡性的 sid 支持，若编译时许可了
	</p>
	<p>
		; --enable-trans-sid
	</p>
	<p>
		url_rewriter.tags = \"a=href,area=href,frame=src,input=src,form=fakeentry\"
	</p>
	<p>
		[MSSQL]
	</p>
	<p>
		;extension=php_mssql.dll
	</p>
	<p>
		mssql.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		mssql.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		mssql.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		mssql.min_error_severity = 10 ; 显示的错误的最低严重性
	</p>
	<p>
		mssql.min_message_severity = 10 ; 显示的消息的最低重要性
	</p>
	<p>
		mssql.compatability_mode = Off ; 与旧版的PHP 3.0 兼容的模式。
	</p>
	<p>
		[Ingres II]
	</p>
	<p>
		ii.allow_persistent = On ; 允许或禁止 持久连接
	</p>
	<p>
		ii.max_persistent = -1 ; 持久连接的最大数。-1 代表无限制
	</p>
	<p>
		ii.max_links = -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制
	</p>
	<p>
		ii.default_database = ; 默认 database (format : [node_id::]dbname[/srv_class]
	</p>
	<p>
		ii.default_user = ; 默认 user
	</p>
	<p>
		ii.default_password = ; 默认 password
	</p>
	<p>
		[Verisign Payflow Pro]
	</p>
	<p>
		pfpro.defaulthost = \"test.signio.com\" ; 默认的 Signio 服务器
	</p>
	<p>
		pfpro.defaultport = 443 ; 连接的默认端口
	</p>
	<p>
		pfpro.defaulttimeout = 30 ; 按秒计的默认超时时间
	</p>
	<p>
		; pfpro.proxyaddress = ; 默认的代理的 IP 地址（如果需要）
	</p>
	<p>
		; pfpro.proxyport = ; 默认的代理的端口
	</p>
	<p>
		; pfpro.proxylogon = ; 默认的代理的登录（logon 用户名）
	</p>
	<p>
		; pfpro.proxypassword = ; 默认的代理的密码
	</p>
	<p>
		[Sockets]
	</p>
	<p>
		sockets.use_system_read = On ; 使用系统的read() 函数替代 php_read()封装
	</p>
	<p>
		; Local Variables: （局部变量）
	</p>
	<p>
		; tab-width: 4
	</p>
	<p>
		; End:
	</p>
</p>]]></content>
  <contentx><![CDATA[php.ini是一个很重要的文件，尤其是在个人开发环境中，正确理解ini文件中每一个属性的取值将有利于你明白自己的php开发运行环境。当你的php脚本出现了你不能理解的错误时，有时有可能就是因为某个属性值的设置而引起的。


	下面提供一个中文版本的php.ini文件的内容，认真读一遍，你会有很多收益的。


	
		[PHP]
	
	
		; PHP还是一]]></contentx>
  <tags>_null_</tags>
  <parseVersion>1.1</parseVersion>
</root>
