<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>73</uid>
  <datetime>2012-11-10 00:00:16</datetime>
  <title><![CDATA[关于我所理解的java中的堆和栈]]></title>
  <content><![CDATA[<p style=\"text-indent:2em;\">
	<strong><span style=\"font-size:16px;\">简单的说：</span></strong>
</p>
<p style=\"text-align:left;text-indent:2em;\">
	<span style=\"font-size:14px;\">Java把内存划分成两种：一种是栈内存，一种是堆内存。 </span>
</p>
<p style=\"text-align:left;text-indent:2em;\">
	<span style=\"font-size:14px;\">在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。</span><span style=\"font-size:14px;\">当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。</span><span style=\"font-size:14px;\">堆内存用来存放由new创建的对象和数组。</span>
</p>
<p style=\"text-align:left;text-indent:2em;\">
	<span style=\"font-size:14px;\">在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。 </span>
</p>
<p style=\"text-align:left;text-indent:2em;\">
	<span style=\"font-size:14px;\">在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。</span><span style=\"font-size:14px;\">引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。</span>
</p>
<p style=\"text-indent:2em;\">
	<br />
</p>
<p style=\"text-indent:2em;\">
	<br />
</p>
<p style=\"text-indent:2em;\">
	<strong><span style=\"font-size:16px;\">具体的说：</span></strong>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;栈与堆都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。</span><span style=\"font-size:14px;\">Java的堆是一个运行时数据区,类的(对象从中分配空间。这些对象通过new、newarray、anewarray和multianewarray等 指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时</span><span style=\"font-size:14px;\">动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp; &nbsp;栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本</span><span style=\"font-size:14px;\">类型的变量（,int, short, long, byte, float, double, boolean, char）和对象句柄。</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">int a = 3; </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">int b = 3； </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp; &nbsp;编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理int b = 3；在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。这时，如果再令a=4；那么编译器 会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。要注意这 种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a的修改并不会影响到b, 它是由编译器完成的，它有利于节省空间。而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量。</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String是一个特殊的包装类数据。可以用： </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String str = new String(\"abc\"); </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String str = \"abc\"; </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp; &nbsp;两种的形式来创建，第一种是用new()来新建对象的，它会在存放于堆中。每调用一次就会创建一个新的对象。</span><span style=\"font-size:14px;\">而第二种是先在栈中创建一个对String类的对象引用变量str，然后查找栈中有没有存放\"abc\"，如果没有，则将\"abc\"存放进栈，并令str指向”abc”，如果已经有”abc” 则直接令str指向“abc”。</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">比较类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==，下面用例子说明上面的理论。</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String str1 = \"abc\"; </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String str2 = \"abc\"; </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">System.out.println(str1==str2); //true </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">可以看出str1和str2是指向同一个对象的。</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String str1 =new String (\"abc\"); </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">String str2 =new String (\"abc\"); </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">System.out.println(str1==str2); // false </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">用new的方式是生成不同的对象。每一次生成一个。 </span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;因此用第二种方式创建多个”abc”字符串,在内存中其实只存在一个对象而已. 这种写法有利与节省内存空间. 同时它可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(\"abc\")；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。</span><span style=\"font-size:14px;\">另一方面, 要注意: 我们在使用诸如String</span>
</p>
<p style=\"text-indent:2em;\">
	<span style=\"font-size:14px;\">str = \"abc\"；的格式定义类时，总是想当然地认为，创建了String类的对象str。担心陷阱！对象可能并没有被创建！而可能只是指向一个先前已经创建的 对象。只有通过new()方法才能保证每次都创建一个新的对象。 由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。</span>
</p>]]></content>
  <contentx><![CDATA[简单的说：


	Java把内存划分成两种：一种是栈内存，一种是堆内存。 


	在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。堆内存用来存放由new创建的对象和数组]]></contentx>
  <tags>_null_</tags>
  <parseVersion>1.1</parseVersion>
</root>
