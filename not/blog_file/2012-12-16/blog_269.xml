<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>2</uid>
  <datetime>2012-12-16 23:23:27</datetime>
  <title><![CDATA[一堆高效率的精妙SQL语句]]></title>
  <content><![CDATA[<p>
	下列语句部分是Mssql语句，不可以在access中使用。
</p>
<p>
	SQL分类：
</p>
<p>
	DDL—数据定义语言(CREATE，ALTER，DROP，DECLARE)
</p>
<p>
	DML—数据操纵语言(SELECT，DELETE，UPDATE，INSERT)
</p>
<p>
	DCL—数据控制语言(GRANT，REVOKE，COMMIT，ROLLBACK)
</p>
<p>
	首先,简要介绍基础语句：
</p>
<p>
	1、说明：创建数据库
</p>
<p>
	CREATE DATABASE database-name
</p>
<p>
	2、说明：删除数据库
</p>
<p>
	drop database dbname
</p>
<p>
	3、说明：备份sql server
</p>
<p>
	— 创建 备份数据的 device
</p>
<p>
	USE master
</p>
<p>
	EXEC sp_addumpdevice ‘disk’, ‘testBack’,\'c:\\mssql7backup\\MyNwind_1.dat’
</p>
<p>
	— 开始 备份
</p>
<p>
	BACKUP DATABASE pubs TO testBack
</p>
<p>
	4、说明：创建新表
</p>
<p>
	create table tabname(col1 type1 [not null] [primary key],col2 type2[not null],..)
</p>
<p>
	根据已有的表创建新表：
</p>
<p>
	A：create table tab_new like tab_old (使用旧表创建新表)
</p>
<p>
	B：create table tab_new as select col1,col2… from tab_olddefinition only
</p>
<p>
	5、说明：删除新表drop table tabname
</p>
<p>
	6、说明：增加一个列
</p>
<p>
	Alter table tabname add column col type
</p>
<p>
	注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。
</p>
<p>
	7、说明：添加主键： Alter table tabname add primary key(col)
</p>
<p>
	说明：删除主键： Alter table tabname drop primary key(col)
</p>
<p>
	8、说明：创建索引：create [unique] index idxname ontabname(col….)
</p>
<p>
	删除索引：drop index idxname
</p>
<p>
	注：索引是不可更改的，想更改必须删除重新建。
</p>
<p>
	9、说明：创建视图：create view viewname as select statement
</p>
<p>
	删除视图：drop view viewname
</p>
<p>
	10、说明：几个简单的基本的sql语句
</p>
<p>
	选择：select * from table1 where 范围
</p>
<p>
	插入：insert into table1(field1,field2) values(value1,value2)
</p>
<p>
	删除：delete from table1 where 范围
</p>
<p>
	更新：update table1 set field1=value1 where 范围
</p>
<p>
	查找：select * from table1 where field1 like ’%value1%’—like的语法很精妙，查资料!
</p>
<p>
	排序：select * from table1 order by field1,field2 [desc]
</p>
<p>
	总数：select count * astotalcount from table1
</p>
<p>
	求和：select sum(field1) as sumvalue from table1
</p>
<p>
	平均：select avg(field1) as avgvalue from table1
</p>
<p>
	最大：select max(field1) as maxvalue from table1
</p>
<p>
	最小：select min(field1) as minvalue from table1
</p>
<p>
	11、说明：几个高级查询运算词
</p>
<p>
	A： UNION 运算符
</p>
<p>
	UNION 运算符通过组合其他两个结果表（例如 TABLE1 和TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION一起使用时（即 UNIONALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1就是来自 TABLE2。
</p>
<p>
	B： EXCEPT 运算符
</p>
<p>
	EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT一起使用时 (EXCEPT ALL)，不消除重复行。
</p>
<p>
	C： INTERSECT 运算符
</p>
<p>
	INTERSECT 运算符通过只包括 TABLE1 和 TABLE2中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT一起使用时 (INTERSECT ALL)，不消除重复行。
</p>
<p>
	注：使用运算词的几个查询结果行必须是一致的。
</p>
<p>
	12、说明：使用外连接
</p>
<p>
	A、left outer join：
</p>
<p>
	左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。
</p>
<p>
	SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ONa.a = b.c
</p>
<p>
	B：right outer join:
</p>
<p>
	右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。
</p>
<p>
	C：full outer join：
</p>
<p>
	全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。
</p>
<p>
	其次，大家来看一些不错的sql语句
</p>
<p>
	1、说明：复制表(只复制结构,源表名：a 新表名：b) (Access可用)
</p>
<p>
	法一：select * into b from a where 1&lt;&gt;1
</p>
<p>
	法二：select top 0 * into b from a
</p>
<p>
	2、说明：拷贝表(拷贝数据,源表名：a 目标表名：b) (Access可用)
</p>
<p>
	insert into b(a, b, c) select d,e,f from b;
</p>
<p>
	3、说明：跨数据库之间表的拷贝(具体数据使用绝对路径)(Access可用)
</p>
<p>
	insert into b(a, b, c) select d,e,f from b in ‘具体数据库’ where条件
</p>
<p>
	例子：..from b in ‘”&amp;Server.MapPath(“.”)&amp;”\\data.mdb”&amp;”‘ where..
</p>
<p>
	4、说明：子查询(表名1：a 表名2：b)
</p>
<p>
	select a,b,c from a where a IN (select d from b ) 或者: selecta,b,c from a where a IN (1,2,3)
</p>
<p>
	5、说明：显示文章、提交人和最后回复时间
</p>
<p>
	select a.title,a.username,b.adddate from table a,(selectmax(adddate) adddate from table where table.title=a.title) b
</p>
<p>
	6、说明：外连接查询(表名1：a 表名2：b)
</p>
<p>
	select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a =b.c
</p>
<p>
	7、说明：在线视图查询(表名1：a )
</p>
<p>
	select * from (SELECT a,b,c FROM a) T where t.a &gt; 1;
</p>
<p>
	8、说明：between的用法,between限制查询数据范围时包括了边界值,notbetween不包括
</p>
<p>
	select * from table1 where time between time1 and time2
</p>
<p>
	select a,b,c, from table1 where a not between 数值1 and 数值2
</p>
<p>
	9、说明：in 的使用方法
</p>
<p>
	select * from table1 where a [not] in(‘值1’,’值2’,’值4’,’值6’)
</p>
<p>
	10、说明：两张关联表，删除主表中已经在副表中没有的信息
</p>
<p>
	delete from table1 where not exists ( select * from table2 wheretable1.field1=table2.field1 )
</p>
<p>
	11、说明：四表联查问题：
</p>
<p>
	select * from a left inner join b on a.a=b.b right inner join c ona.a=c.c inner join d on a.a=d.d where …..
</p>
<p>
	12、说明：日程安排提前五分钟提醒
</p>
<p>
	SQL: select * from 日程安排 wheredatediff(‘minute’,f开始时间,getdate())&gt;5
</p>
<p>
	13、说明：一条sql 语句搞定数据库分页
</p>
<p>
	select top 10 b.* from (select top 20 主键字段,排序字段 from 表名order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段order by a.排序字段
</p>
<p>
	14、说明：前10条记录
</p>
<p>
	select top 10 * form table1 where 范围
</p>
<p>
	15、说明：选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)
</p>
<p>
	select a,b,c from tablename ta where a=(select max(a) fromtablename tb where tb.b=ta.b)
</p>
<p>
	16、说明：包括所有在 TableA 中但不在 TableB和TableC中的行并消除所有重复行而派生出一个结果表
</p>
<p>
	(select a from tableA ) except (select a from tableB) except(select a from tableC)
</p>
<p>
	17、说明：随机取出10条数据
</p>
<p>
	select top 10 * from tablename order by newid()
</p>
<p>
	18、说明：随机选择记录
</p>
<p>
	select newid()
</p>
<p>
	19、说明：删除重复记录
</p>
<p>
	Delete from tablename where id not in (select max(id) fromtablename group by col1,col2,…)
</p>
<p>
	20、说明：列出数据库里所有的表名
</p>
<p>
	select name from sysobjects where type=’U’
</p>
<p>
	21、说明：列出表里的所有的
</p>
<p>
	select name from syscolumns where id=object_id(‘TableName’)
</p>
<p>
	22、说明：列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select中的case。
</p>
<p>
	select type,sum(case vender when ‘A’ then pcs else 0 end),sum(casevender when ‘C’ then pcs else 0 end),sum(case vender when ‘B’ thenpcs else 0 end) FROM tablename group by type
</p>
<p>
	显示结果：
</p>
<p>
	type vender pcs
</p>
<p>
	电脑 A 1
</p>
<p>
	电脑 A 1
</p>
<p>
	光盘 B 2
</p>
<p>
	光盘 A 2
</p>
<p>
	手机 B 3
</p>
<p>
	手机 C 3
</p>
<p>
	23、说明：初始化表table1
</p>
<p>
	TRUNCATE TABLE table1
</p>
<p>
	24、说明：选择从10到15的记录
</p>
<p>
	select top 5 * from (select top 15 * from table order by id asc)table_别名 order by id desc
</p>
<p>
	随机选择数据库记录的方法（使用Randomize函数，通过SQL语句实现）
</p>
<p>
	对存储在数据库中的数据来说，随机数特性能给出上面的效果，但它们可能太慢了些。你不能要求ASP“找个随机数”然后打印出来。实际上常见的解决方案是建立如下所示的循环：
</p>
<p>
	Randomize
</p>
<p>
	RNumber = Int(Rnd*499) +1
</p>
<p>
	While Not objRec.EOF
</p>
<p>
	If objRec(“ID”) = RNumber THEN
</p>
<p>
	… 这里是执行脚本 …
</p>
<p>
	end if
</p>
<p>
	objRec.MoveNext
</p>
<p>
	Wend
</p>
<p>
	这很容易理解。首先，你取出1到500范围之内的一个随机数（假设500就是数据库内记录的总数）。然后，你遍历每一记录来测试ID的值、检查其是否匹配RNumber。满足条件的话就执行由THEN关键字开始的那一块代码。假如你的RNumber等于495，那么要循环一遍数据库花的时间可就长了。虽然500这个数字看起来大了些，但相比更为稳固的企业解决方案这还是个小型数据库了，后者通常在一个数据库内就包含了成千上万条记录。这时候不就死定了？
</p>
<p>
	采用SQL，你就可以很快地找出准确的记录并且打开一个只包含该记录的recordset，如下所示：
</p>
<p>
	Randomize
</p>
<p>
	RNumber = Int(Rnd*499) + 1
</p>
<p>
	SQL = “SELECT * FROM Customers WHERE ID = ” &amp; RNumber
</p>
<p>
	set objRec = ObjConn.Execute(SQL)
</p>
<p>
	Response.WriteRNumber &amp; ” = ” &amp; objRec(“ID”) &amp; ” “&amp; objRec(“c_email”)
</p>
<p>
	不必写出RNumber和ID，你只需要检查匹配情况即可。只要你对以上代码的工作满意，你自可按需操作“随机”记录。Recordset没有包含其他内容，因此你很快就能找到你需要的记录这样就大大降低了处理时间。
</p>
<p>
	再谈随机数
</p>
<p>
	现在你下定决心要榨干Random函数的最后一滴油，那么你可能会一次取出多条随机记录或者想采用一定随机范围内的记录。把上面的标准Random示例扩展一下就可以用SQL应对上面两种情况了。
</p>
<p>
	为了取出几条随机选择的记录并存放在同一recordset内，你可以存储三个随机数，然后查询数据库获得匹配这些数字的记录：
</p>
<p>
	SQL = “SELECT * FROM Customers WHERE ID = ” &amp; RNumber &amp; “OR ID = ” &amp; RNumber2 &amp; ” OR ID = ” &amp; RNumber3
</p>
<p>
	假如你想选出10条记录（也许是每次页面装载时的10条链接的列表），你可以用BETWEEN或者数学等式选出第一条记录和适当数量的递增记录。这一操作可以通过好几种方式来完成，但是SELECT 语句只显示一种可能（这里的ID 是自动生成的号码）：
</p>
<p>
	SQL = “SELECT * FROM Customers WHERE ID BETWEEN ” &amp; RNumber&amp; ” AND ” &amp; RNumber &amp; “+ 9″
</p>
<p>
	注意：以上代码的执行目的不是检查数据库内是否有9条并发记录。
</p>
<p>
	随机读取若干条记录，测试过
</p>
<p>
	Access语法：SELECT top 10 * From 表名 ORDER BY Rnd(id)
</p>
<p>
	Sql server:select top n * from 表名 order by newid()
</p>
<p>
	mysqlelect* From 表名 Order By rand() Limit n
</p>
<p>
	Access左连接语法(最近开发要用左连接,Access帮助什么都没有,网上没有Access的SQL说明,只有自己测试,现在记下以备后查)
</p>
<p>
	语法electtable1.fd1,table1,fd2,table2.fd2 From table1 left join table2 ontable1.fd1,table2.fd1 where …
</p>
<p>
	使用SQL语句 用…代替过长的字符串显示
</p>
<p>
	语法：
</p>
<p>
	SQL数据库：select case when len(field)&gt;10 thenleft(field,10)+’…’ else field end as news_name,news_id fromtablename
</p>
<p>
	Access数据库：SELECT iif(len(field)&gt;2,left(field,2)+’…’,field)FROM tablename;
</p>
<p>
	Conn.Execute说明
</p>
<p>
	Execute方法
</p>
<p>
	该方法用于执行SQL语句。根据SQL语句执行后是否返回记录集，该方法的使用格式分为以下两种：
</p>
<p>
	1．执行SQL查询语句时，将返回查询得到的记录集。用法为：
</p>
<p>
	Set 对象变量名=连接对象.Execute(“SQL 查询语言”)
</p>
<p>
	Execute方法调用后，会自动创建记录集对象，并将查询结果存储在该记录对象中，通过Set方法，将记录集赋给指定的对象保存，以后对象变量就代表了该记录集对象。
</p>
<p>
	2．执行SQL的操作性语言时，没有记录集的返回。此时用法为：
</p>
<p>
	连接对象.Execute “SQL 操作性语句” [, RecordAffected][,Option]
</p>
<p>
	·RecordAffected为可选项，此出可放置一个变量，SQL语句执行后，所生效的记录数会自动保存到该变量中。通过访问该变量，就可知道SQL语句队多少条记录进行了操作。
</p>
<p>
	·Option可选项，该参数的取值通常为adCMDText，它用于告诉ADO，应该将Execute方法之后的第一个字符解释为命令文本。通过指定该参数，可使执行更高效。
</p>
<p>
	·BeginTrans、RollbackTrans、CommitTrans方法
</p>
<p>
	这三个方法是连接对象提供的用于事务处理的方法。BeginTrans用于开始一个事物；RollbackTrans用于回滚事务；CommitTrans用于提交所有的事务处理结果，即确认事务的处理。
</p>
<p>
	事务处理可以将一组操作视为一个整体，只有全部语句都成功执行后，事务处理才算成功；若其中有一个语句执行失败，则整个处理就算失败，并恢复到处里前的状态。
</p>
<p>
	BeginTrans和CommitTrans用于标记事务的开始和结束，在这两个之间的语句，就是作为事务处理的语句。判断事务处理是否成功，可通过连接对象的Error集合来实现，若Error集合的成员个数不为0，则说明有错误发生，事务处理失败。Error集合中的每一个Error对象，代表一个错误信息。
</p>]]></content>
  <contentx><![CDATA[下列语句部分是Mssql语句，不可以在access中使用。


	SQL分类：


	DDL—数据定义语言(CREATE，ALTER，DROP，DECLARE)


	DML—数据操纵语言(SELECT，DELETE，UPDATE，INSERT)


	DCL—数据控制语言(GRANT，REVOKE，COMMIT，ROLLBACK)


	首先,简要介绍基础]]></contentx>
  <tags>_null_</tags>
  <parseVersion>1.1</parseVersion>
</root>
