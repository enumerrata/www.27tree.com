<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>73</uid>
  <datetime>2012-11-12 23:36:02</datetime>
  <title><![CDATA[浅谈Java中的几种随机数 ]]></title>
  <content><![CDATA[<p style=\"text-indent:2em;\">
	众所周知，随机数是任何一种编程语言最基本的特征之一。而生成随机数的基本方式也是相同的：产生一个0到1之间的随机数。看似简单，但有时我们也会忽略了一些有趣的功能。
</p>
<p style=\"text-indent:2em;\">
	<strong><span style=\"font-size:14px;\">我们从书本上学到什么？</span></strong>
</p>
<p style=\"text-indent:2em;\">
	最明显的，也是直观的方式，在Java中生成随机数只要简单的调用：
</p>
<p style=\"text-indent:2em;\">
	java.lang.Math.random()
</p>
<p style=\"text-indent:2em;\">
	在所有其他语言中，生成随机数就像是使用Math工具类，如abs, pow, floor,
</p>
<p style=\"text-indent:2em;\">
	sqrt和其他数学函数。大多数人通过书籍、教程和课程来了解这个类。一个简单的例子：从0.0到1.0之间可以生成一个双精度浮点数。那么通过上面的信息，开发人员要产生0.0和10.0之间的双精度浮点数会这样来写：
</p>
<p style=\"text-indent:2em;\">
	Math.random() * 10
</p>
<p style=\"text-indent:2em;\">
	而产生0和10之间的整数，则会写成：
</p>
<p style=\"text-indent:2em;\">
	Math.round(Math.random() * 10)
</p>
<p style=\"text-indent:2em;\">
	<strong><span style=\"font-size:14px;\">进阶</span></strong>
</p>
<p style=\"text-indent:2em;\">
	通过阅读Math.random()的源码，或者干脆利用IDE的自动完成功能，开发人员可以很容易发现，java.lang.Math.random()使用一个内部的随机生成对象<span style=\"text-indent:2em;\">- 一个很强大的对象可以灵活的随机产生：布尔值、所有数字类型，甚至是高斯分布。例如：</span>
</p>
<p style=\"text-indent:2em;\">
	new java.util.Random().nextInt(10)
</p>
<p style=\"text-indent:2em;\">
	它有一个缺点，就是它是一个对象。它的方法必须是通过一个实例来调用，这意味着必须先调用它的构造函数。如果在内存充足的情况下，像上面的表达式是可以接受的；但内存不足时，就会带来问题。<span style=\"text-indent:2em;\">一个简单的解决方案，可以避免每次需要生成一个随机数时创建一个新实例，那就是使用一个静态类。猜你可能想到了java.lang.Math，很好，我们就是改良java.lang.Math的初始化。虽然这个工程量低，但你也要做一些简单的单元测试来确保其不会出错。</span><span style=\"text-indent:2em;\">假设程序需要生成一个随机数来存储，问题就又来了。比如有时需要操作或保护种子(seed)，一个内部数用来存储状态和计算下一个随机数。在这些特殊情况下，共用随机生成对象是不合适的。</span>
</p>
<p style=\"text-indent:2em;\">
	<strong><span style=\"font-size:14px;\">并发</span></strong>
</p>
<p style=\"text-indent:2em;\">
	在Java&nbsp;<span style=\"text-indent:2em;\">EE多线程应用程序的环境中，随机生成实例对象仍然可以被存储在类或其他实现类，作为一个静态属性。幸运的是，java.util.Random是线程安全的，所以不存在多个线程调用会破坏种子(seed)的风险。</span>
</p>
<p style=\"text-indent:2em;\">
	另一个值得考虑的是多线程java.lang.ThreadLocal的实例。偷懒的做法是通过Java本身API实现单一实例，当然你也可以确保每一个线程都有自己的一个实例对象。<span style=\"text-indent:2em;\">虽然Java没有提供一个很好的方法来管理java.util.Random的单一实例。但是，期待已久的Java 7提供了一种新的方式来产生随机数：</span>
</p>
<p style=\"text-indent:2em;\">
	java.util.concurrent.ThreadLocalRandom.current().nextInt(10)
</p>
<p style=\"text-indent:2em;\">
	这个新的API综合了其他两种方法的优点：单一实例/静态访问，就像Math.random()一样灵活。ThreadLocalRandom也比其他任何处理高并发的方法要更快。
</p>
<p style=\"text-indent:2em;\">
	<strong><span style=\"font-size:14px;\">经验</span></strong>
</p>
<p style=\"text-indent:2em;\">
	Chris Marasti-Georg 指出:
</p>
<p style=\"text-indent:2em;\">
	Math.round(Math.random() * 10)
</p>
<p style=\"text-indent:2em;\">
	使分布不平衡，例如：0.0 -
</p>
<p style=\"text-indent:2em;\">
	0.499999将四舍五入为0，而0.5至1.499999将四舍五入为1。那么如何使用旧式语法来实现正确的均衡分布，如下：
</p>
<p style=\"text-indent:2em;\">
	Math.floor(Math.random() * 11）
</p>
<p style=\"text-indent:2em;\">
	幸运的是，如果我们使用java.util.Random或java.util.concurrent.ThreadLocalRandom就不用担心上述问题了。
</p>
<p style=\"text-indent:2em;\">
	Java实战项目里面介绍了一些不正确使用java.util.Random API的危害。这个教训告诉我们不要使用：
</p>
<p style=\"text-indent:2em;\">
	Math.abs(rnd.nextInt())%n
</p>
<p style=\"text-indent:2em;\">
	而使用：
</p>
<p style=\"text-indent:2em;\">
	rnd.nextInt(n)
	<hr />
</p>]]></content>
  <parseVersion>1.1</parseVersion>
  <state>0</state>
</root>
