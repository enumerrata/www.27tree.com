<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>2</uid>
  <datetime>2012-12-08 12:42:32</datetime>
  <title><![CDATA[解高次同余不定方程 C实现]]></title>
  <content><![CDATA[<pre name=\"code\" id=\"prettyprint\" class=\"javascript\">#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;cmath&gt;
#define MAXN 65535
using namespace std;
struct hash
{
    int a;
    int b;
    int next;
}Hash[MAXN*2];
int flg[MAXN+66];
int top,idx;
void ins(int a,int b)
{
    int k=b&amp;MAXN;
    if(flg[k]!=idx)
    {
        flg[k]=idx;
        Hash[k].next=-1;
        Hash[k].a=a;
        Hash[k].b=b;
        return;
    }
    while(Hash[k].next!=-1)
    {
        if(Hash[k].b==b)
        {
            return;
        }
        k=Hash[k].next;
    }
    Hash[k].next=++top;
    Hash[top].next=-1;
    Hash[top].a=a;
    Hash[top].b=b;
}
int find(int b)
{
    int k=b&amp;MAXN;
    if(flg[k]!=idx)
    {
        return -1;
    }
    while(k!=-1)
    {
        if(Hash[k].b==b)
        {
            return Hash[k].a;
        }
        k=Hash[k].next;
    }
    return -1;
}
int gcd(int a,int b)
{
    return b!=0? gcd(b,a%b):a;
}
int ext_gcd(int a,int b,int &amp;x,int &amp;y)
{
    int t,ret;
    if(!b)
    {
        x=1;
        y=0;
        return a;
    }
    ret=ext_gcd(b,a%b,x,y);
    t=x;
    x=y;
    y=t-(a/b)*y;
    return ret;
}
int Inval(int a,int b,int n)
{
    int x,y,e;
    ext_gcd(a,n,x,y);
    e=(long long)x*b%n;
    return e&lt;0? e+n:e;
}
int pow_mod(long long a,int b,int c)
{
    long long ret=1%c;a%=c;
    while(b)
    {
        if(b&amp;1)
        {
            ret=ret*a%c;
        }
        b&gt;&gt;=1;
        a=a*a%c;
    }
    return ret;
}
int BabyStep(int A,int B,int C)
{
    top=MAXN;++idx;
    long long buf=1%C,D=buf,K;
    int i,d=0,tmp;
    for(i=0;i&lt;=100;buf=buf*A%C,++i)
    {
        if(buf==B)
        {
            return i;
        }
    }
    while((tmp=gcd(A,C))!=1)
    {
        if(B%tmp)
        {
            return -1;
        }
        ++d;
        C/=tmp;
        B/=tmp;
        D=D*A/tmp%C;
    }
    int M=(int)ceil(sqrt((double)C));
    for(buf=1%C,i=0;i&lt;=M;buf=buf*A%C,++i)
    {
        ins(i,buf);
    }
    for(i=0,K=pow_mod((long long)A,M,C);i&lt;=M;D=D*K%C,++i)
    {
        tmp=Inval((int)D,B,C);
        int w;
        if(tmp&gt;=0&amp;&amp;(w=find(tmp)!=-1))
        {
            return i*M+w+d;
        }
    }
    return -1;
}
int main()
{
    int A,B,C;
    while(scanf(\"%d%d%d\",&amp;A,&amp;B,&amp;C)!=EOF,A||B||C)
    {
        B%=C;
        int tmp=BabyStep(A,B,C);
        if(tmp&lt;0)
        {
            printf(\"No Solution\\n\");
        }
        else
        {
            printf(\"%d\\n\",tmp);
        }
    }
    return 0;
}</pre>]]></content>
  <parseVersion>1.1</parseVersion>
  <state>0</state>
</root>
