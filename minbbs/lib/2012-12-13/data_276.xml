<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>32</uid>
  <datetime>2012-12-13 21:29:59</datetime>
  <title><![CDATA[Zend Framework中的AutoLoad机制]]></title>
  <content><![CDATA[<p>
<pre name=\"code\" id=\"prettyprint\" class=\"javascript\">set_include_path(USVN_LIB_DIR . PATH_SEPARATOR . get_include_path()); 
require_once \'Zend/Loader/Autoloader.php\'; 
$autoloader = Zend_Loader_Autoloader::getInstance(); 
$autoloader-&gt;registerNamespace(\"Zend_\"); 
$autoloader-&gt;registerNamespace(\"USVN_\"); 
$autoloader-&gt;registerNamespace(\"menus_\"); 
$config = new USVN_Config_Ini(USVN_CONFIG_FILE, USVN_CONFIG_SECTION); </pre>
	<p>
		过程分析
	</p>
	<p>
		首先是设置了include_path,include_path就是php中调用include的时候文件寻找的地址
	</p>
	<p>
		下面就是 require_once \'Zend/Loader/Autoloader.php\';
	</p>
	<p>
		在Zend/Loader/Autoloader.php文件内，读入了Zend/Loader.php， 这个php定义了Zend_Loader这个类，这个类包含了loadClass，loadFile, isReadable(文件是否可读)等函数实例化Zend_Loader_Autoloader的过程就是调用其构造函数（这里是使用了单例模式）的过程它的构造函数中的spl_autoload_register(array(__CLASS__, \'autoload\'));将Zend_Loader_Autoloader:autoload作为类自动加载函数。还做了一个操作将_internalAutoloader赋值了自身的_autoload
	</p>
	<p>
		至于这里面是怎么autoload的等会根据具体例子查看
	</p>
	<p>
		接下来调用了Zend_Loader_Autoloader:registerNamespace(\"USVN_\")，这个函数做的事就只是在Zend_Loader_AutoLoader的内部属性_namespaces上挂载一个key为USVN_和value为true的值。
	</p>
	<p>
		看到这个函数就明白其实代码也可以写成
	</p>
	<p>
		$autoloader-&gt;registerNamespace(\"Zend_\")-&gt;registerNamespace(\"USVN_\")
	</p>
	<p>
		或者
	</p>
	<p>
		$autoloader-&gt;registerNamespace(array(\"Zend_\",\"USVN_\"))
	</p>
	<p>
		好了，现在到调用 USVN_Config_Ini类了
	</p>
	<p>
		这个类自然走的就是Zend_Loader_Autoloader:autoload(\"USVN_Config_Ini\")这个函数第一步会去调用getClassAutoloaders获取这个类的AutoLoader。getClassAutoloaders里面增加了对namespaceAutoloader的选择和判断，由于我们很少使用，直接跳过这里返回的loader打印出来是这样的
	</p>
	<p>
		Array ( [0] =&gt; Zend_Loader_Autoloader Object ( [_autoloaders:protected] =&gt; Array ( ) [_defaultAutoloader:protected] =&gt; Array ( [0] =&gt; Zend_Loader [1] =&gt; loadClass ) [_fallbackAutoloader:protected] =&gt; [_internalAutoloader:protected] =&gt; Array *RECURSION* [_namespaces:protected] =&gt; Array ( [Zend_] =&gt; 1 [ZendX_] =&gt; 1 [USVN_] =&gt; 1 [menus_] =&gt; 1 ) [_namespaceAutoloaders:protected] =&gt; Array ( ) [_suppressNotFoundWarnings:protected] =&gt; [_zfPath:protected] =&gt; ) [1] =&gt; _autoload )
	</p>
	<p>
		其实就是前面设置的_internalAutoloader。
	</p>
	<p>
		这里就会实际调用Zend_Loader_Autoloader:_autoload (\"USVN_Config_Ini\")
	</p>
	<p>
		好了，现在就看到了Zend_Loader_Autoloader:_autoload函数
	</p>
	<p>
		$callback = $this-&gt;getDefaultAutoloader();
	</p>
	<p>
		这里会获取默认的Autoloader，什么是默认的Autoloader? 看这个类初始定义，实际上是array(\'Zend_Loader\', \'loadClass\');
	</p>
	<p>
		下面自然就调用的是call_user_func($callback, $class);即Zend_Loader:loadClass(\"USVN_Config_Ini\")
	</p>
	<p>
		首先Zend_Loader已经在AutoLoader.php中被require了
	</p>
	<p>
		其次我们看看Zend_Loader:loadClass方法，这个方法第一步是检查异常，跳过。第二步是将类分隔，拼凑成$file, 比如USVN/Config/Ini.php，下面就直接调用self::loadFile($file, null, true);
	</p>
	<p>
		接下来查看self::loadFile，首先_securityCheck看类名中是否有非法字符，没有，就include了这个$file。这里的$file当然是相对路径，需要拼接上include_path, 记得include_path是在哪里设置的吗？在程序的一开始就设置了！好了，这里就把USVN_Config_Ini这个类读取进来了。
	</p>
	<p>
		看到这里你就该明白了，如果你自己定义了一个类，并且注册了Namespace，比如USVN，那么你就应该在include_path下面创建一个同名文件夹（大小写必须区分），然后你要引入的相对的文件路径名就是以类名的_做分隔读入的。
	</p>
</p>]]></content>
  <parseVersion>1.1</parseVersion>
  <state>0</state>
</root>
