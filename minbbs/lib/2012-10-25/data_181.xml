<?xml version="1.0" encoding="UTF-8"?>
<root>
  <uid>32</uid>
  <datetime>2012-10-25 08:39:41</datetime>
  <title><![CDATA[Ubuntu下Memcache的安装与基本使用]]></title>
  <content><![CDATA[<p>
	在全世界范围内很多大负载站点采用了Memcache作缓存服务，以分担数据库服务器的压力。
</p>
<p>
	这里只介绍在Ubuntu下如何配置Memcache和如何在PHP使用Memecache，对于更深入的了解，比如Memcache的运作机理或更高级的应用还是Google一下…^_^
</p>
<p>
	关于Memcache与memcached
</p>
<p>
	Memcache是项目名，memcached是服务名。让很多初接触的人感觉很是莫名其妙。个人认为正确的应该是用前者用更为正确一点。
</p>
<p>
	安装Memcache
</p>
<p>
	Memcache分为两部分,Memcache服务端和客户端。Memcache服务端是作为服务来运行的，所有数据缓存的建立，存储，删除实际上都是在这里完成的。客户端，在这里我们指的是PHP的可以调用的扩展。
</p>
<p>
	1)安装Memcache服务端
</p>
<p>
	sudo apt-get install memcached
</p>
<p>
	安装完Memcache服务端以后，我们需要启动该服务：
</p>
<p>
	memcached -d -m 128 -p 11111 -u root
</p>
<p>
	这里需要说明一下memcached服务的启动参数：
</p>
<p>
	-p 监听的端口
</p>
<p>
	-l 连接的IP地址, 默认是本机
</p>
<p>
	-d start 启动memcached服务
</p>
<p>
	-d restart 重起memcached服务
</p>
<p>
	-d stop|shutdown 关闭正在运行的memcached服务
</p>
<p>
	-d install 安装memcached服务
</p>
<p>
	-d uninstall 卸载memcached服务
</p>
<p>
	-u 以的身份运行 (仅在以root运行的时候有效)
</p>
<p>
	-m 最大内存使用，单位MB。默认64MB
</p>
<p>
	-M 内存耗尽时返回错误，而不是删除项
</p>
<p>
	-c 最大同时连接数，默认是1024
</p>
<p>
	-f 块大小增长因子，默认是1.25-n 最小分配空间，key+value+flags默认是48
</p>
<p>
	-h 显示帮助2)安装Memcache客户端
</p>
<p>
	sudo apt-get install php5-memcache
</p>
<p>
	安装完以后我们需要在php.ini里进行简单的配置,打开/etc/php5/apache2/php.ini文件在末尾添加如下内容：
</p>
<p>
	[Memcache]
</p>
<p>
	; 一个高性能的分布式的内存对象缓存系统，通过在内存里维护一个统一的巨大的hash表，
</p>
<p>
	; 它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。
</p>
<p>
	; 是否在遇到错误时透明地向其他服务器进行故障转移。
</p>
<p>
	memcache.allow_failover = On
</p>
<p>
	; 接受和发送数据时最多尝试多少个服务器，只在打开memcache.allow_failover时有效。memcache.max_failover_attempts = 20
</p>
<p>
	; 数据将按照此值设定的块大小进行转移。此值越小所需的额外网络传输越多。
</p>
<p>
	; 如果发现无法解释的速度降低，可以尝试将此值增加到32768。
</p>
<p>
	memcache.chunk_size = 8192
</p>
<p>
	; 连接到memcached服务器时使用的默认TCP端口。
</p>
<p>
	memcache.default_port = 11111
</p>
<p>
	; 控制将key映射到server的策略。默认值”standard”表示使用先前版本的老hash策略。
</p>
<p>
	; 设为”consistent”可以允许在连接池中添加/删除服务器时不必重新计算key与server之间的映射关系。
</p>
<p>
	;memcache.hash_strategy = “standard”; 控制将key映射到server的散列函数。默认值”crc32″使用CRC32算法，而”fnv”则表示使用FNV-1a算法。
</p>
<p>
	; FNV-1a比CRC32速度稍低，但是散列效果更好。
</p>
<p>
	;memcache.hash_function = “crc32″
</p>
<p>
	保存php.ini,执行sudo /etc/init.d/apache2 restart重启Apache。
</p>
<p>
	在PHP中使用Memcache
</p>
<p>
	&lt;?php
</p>
<p>
	$mem = new Memcache; //创建Memcache对象
</p>
<p>
	$mem-&gt;connect(”127.0.0.1″, 11111); //连接Memcache服务器
</p>
<p>
	$val = “这是一个Memcache的测试.”;
</p>
<p>
	$key = md5($val);
</p>
<p>
	$mem-&gt;set($key, $val, 0, 120); //增加插入一条缓存，缓存时间为120s
</p>
<p>
	if(($k = $mem-&gt;get(’key’))){ //判断是否获取到指定的key
</p>
<p>
	echo ‘from cache:’.$k;
</p>
<p>
	} else {
</p>
<p>
	echo ‘normal’; //这里我们在实际使用中就需要替换成查询数据库并创建缓存.
</p>
<p>
	}
</p>
<p>
	?&gt;
</p>
<p>
	对于key，通常用md5 查询语句来获取，在实际使用中根据具体需要来决定好了…
</p>
<p>
	通过上面的步骤，我们就完成了Memcache的配置和基本使用…
</p>
<p>
	php5-memcache扩展提供的方法
</p>
<p>
	Memcache::add — 添加一个值，如果已经存在，则返回false
</p>
<p>
	Memcache::addServer — 添加一个可供使用的服务器地址
</p>
<p>
	Memcache::close — 关闭一个Memcache对象
</p>
<p>
	Memcache::connect — 创建一个Memcache对象
</p>
<p>
	memcache_debug — 控制调试功能
</p>
<p>
	Memcache::decrement — 对保存的某个key中的值进行减法操作
</p>
<p>
	Memcache::delete — 删除一个key值
</p>
<p>
	Memcache::flush — 清除所有缓存的数据
</p>
<p>
	Memcache::get — 获取一个key值
</p>
<p>
	Memcache::getExtendedStats — 获取进程池中所有进程的运行系统统计
</p>
<p>
	Memcache::getServerStatus — 获取运行服务器的参数
</p>
<p>
	Memcache::getStats — 返回服务器的一些运行统计信息
</p>
<p>
	Memcache::getVersion — 返回运行的Memcache的版本信息
</p>
<p>
	Memcache::increment — 对保存的某个key中的值进行加法操作
</p>
<p>
	Memcache::pconnect — 创建一个Memcache的持久连接对象
</p>
<p>
	Memcache::replace — R对一个已有的key进行覆写操作
</p>
<p>
	Memcache::set — 添加一个值，如果已经存在，则覆写
</p>
<p>
	Memcache::setCompressThreshold — 对大于某一大小的数据进行压缩
</p>
<p>
	Memcache::setServerParams — 在运行时修改服务器的参数
</p>
<p>
	<br />
</p>]]></content>
  <parseVersion>1.1</parseVersion>
  <state>0</state>
</root>
